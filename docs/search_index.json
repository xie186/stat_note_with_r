[
["index.html", "Notes of R for Bioinformatics Preface", " Notes of R for Bioinformatics Shaojun Xie Preface This book includes the notes I have during the use of R as a Bioinformatician. ## Bioconductor version 3.6 (BiocInstaller 1.28.0), ?biocLite for help ## A new version of Bioconductor is available after installing the most ## recent version of R; see http://bioconductor.org/install ## BioC_mirror: https://bioconductor.org ## Using Bioconductor 3.6 (BiocInstaller 1.28.0), R 3.4.4 (2018-03-15). "],
["basic-systax.html", "1 Basic systax 1.1 Setup 1.2 Data type 1.3 Data structures 1.4 Read from and write into files 1.5 Functions 1.6 Control structure", " 1 Basic systax 1.1 Setup 1.1.1 Install packages 1.1.2 Install 1.1.2.1 Getting help on functions and packages 1.2 Data type 1.3 Data structures R has multiple data structures. If you are familiar with excel you can think of data structures as building blocks of a table and the table itself, and a table is similar to a sheet in excel. Most of the time you will deal with tabular data sets, you will manipulate them, take sub-sections of them. It is essential to know what are the common data structures in R and how they can be used. R deals with named data structures, this means you can give names to data structures and manipulate or operate on them using those names. 1.4 Read from and write into files 1.4.1 Read Random Rows from A Huge File Given R data frames stored in the memory, sometimes it is beneficial to sample and examine the data in a large-size csv file before importing into the data frame. To the best of my knowledge, there is no off-shelf R function performing such data sampling with a relatively low computing cost. Therefore, I drafted two utility functions serving this particular purpose, one with the LaF library and the other with the reticulate library by leveraging the power of Python. While the first function is more efficient and samples 3 records out of 336,776 in about 100 milliseconds, the second one is more for fun and a showcase of the reticulate package. #install.packages(&quot;LaF&quot;) library(LaF) sample1 &lt;- function(file, n) { lf &lt;- laf_open(detect_dm_csv(file, sep = &quot;,&quot;, header = TRUE, factor_fraction = -1)) return(read_lines(lf, sample(1:nrow(lf), n))) } sample1(&quot;data/galton.csv&quot;, 3) ## family father mother sex height nkids ## 1 77 70.0 64.0 M 66.7 4 ## 2 53 71.0 63.0 F 63.0 9 ## 3 80 70.5 64.5 F 60.0 1 1.4.2 Reference Read Random Rows from A Huge CSV File: https://www.r-bloggers.com/read-random-rows-from-a-huge-csv-file/ 1.5 Functions 1.6 Control structure "],
["plot-in-r.html", "2 Plot in R 2.1 Read the data 2.2 Line plot 2.3 Basic line plot 2.4 Color the dots based on the sex information 2.5 2.6 Draw a circle in R 2.7 Network", " 2 Plot in R 2.1 Read the data Consider the data collected by Francis Galton in the 1880s, stored in a modern format in the galton.csv file. In this file, heights is the variable containing the child’s heights, while the father’s and mother’s height is contained in the variables father and mother. The family variable is a numerical code identifying children in the same family; the number of kids in this family is in nkids. ## Data from https://github.com/thomas-haslwanter/statsintro_python/blob/master/ISP/Code_Quantlets/08_TestsMeanValues/anovaOneway/galton.csv tab&lt;-read.csv(&quot;data/galton.csv&quot;) head(tab) ## family father mother sex height nkids ## 1 1 78.5 67.0 M 73.2 4 ## 2 1 78.5 67.0 F 69.2 4 ## 3 1 78.5 67.0 F 69.0 4 ## 4 1 78.5 67.0 F 69.0 4 ## 5 2 75.5 66.5 M 73.5 4 ## 6 2 75.5 66.5 M 72.5 4 2.2 Line plot 2.3 Basic line plot plot(tab$father, tab$height) 2.4 Color the dots based on the sex information col_info = ifelse(tab$sex==&quot;M&quot;, &quot;royalblue&quot;, &quot;darkred&quot;) plot(tab$father, tab$height, col=col_info) col_info = ifelse(tab$sex==&quot;M&quot;, &quot;royalblue&quot;, &quot;darkred&quot;) plot(tab$father, tab$height, col=col_info, xlim=c(60, 80), ylim=c(60, 80)) legend(76, 65,pch=c(19,19),col=c(&quot;royalblue&quot;, &quot;darkred&quot;),c(&quot;female&quot;, &quot;male&quot;),bty=&quot;o&quot;,cex=.8) 2.5 meth_lev=read.table(&quot;data/global_meth_lev.tsv&quot;, header=TRUE) meth_lev ## Sample CG CHG CHH ## 1 cmt23 0.227 0.009 0.011 ## 2 cmt2-3 0.229 0.062 0.010 ## 3 drm12cmt23 0.221 0.004 0.005 ## 4 drm12cmt2 0.222 0.059 0.005 ## 5 WT 0.247 0.079 0.029 2.6 Draw a circle in R # initialize a plot plot(c(-1, 1), c(-1, 1), type = &quot;n&quot;) # prepare &quot;circle data&quot; radius &lt;- 1 theta &lt;- seq(0, 2 * pi, length = 200) # draw the circle lines(x = radius * cos(theta), y = radius * sin(theta)) 2.7 Network 2.7.1 ##========================================================## ## ## ## Network Visualization with R ## ## Polnet 2018 Workshop, Washington, DC ## ## www.kateto.net/polnet2018 ## ## ## ## Katherine (Katya) Ognyanova ## ## Web: kateto.net | Email: katya@ognyanova.net ## ## GitHub: kateto | Twitter: @Ognyanova ## ## ## ##========================================================## # ================ Introduction ================ # Download handouts and example data: bit.ly/polnet2018 # Online tutorial: kateto.net/polnet2018 # CONTENTS # # 1. Working with colors in R plots # 2. Reading in the network data # 3. Network plots in &#39;igraph&#39; # 4. Plotting two-mode networks # 5. Plotting multiplex networks # 6. Quick example using &#39;network&#39; # 7. Simple plot animations in R # 8. Interactive JavaScript networks # 9. Interactive and dynamic networks with ndtv-d3 # 10. Plotting networks on a geographic map # KEY PACKAGES # Install those now if you do not have the latest versions. # (please do NOT load them yet!) install.packages(&quot;igraph&quot;) install.packages(&quot;network&quot;) install.packages(&quot;sna&quot;) install.packages(&quot;visNetwork&quot;) install.packages(&quot;threejs&quot;) install.packages(&quot;ndtv&quot;) # OPTIONAL PACKAGES # Install those if you would like to run through all of the # examples below (those are not critical and can be skipped). install.packages(&quot;RColorBrewer&quot;) install.packages(&quot;png&quot;) install.packages(&quot;networkD3&quot;) install.packages(&quot;animation&quot;) install.packages(&quot;maps&quot;) install.packages(&quot;geosphere&quot;) # ================ 1. Colors in R plots ================ # -------~~ Colors -------- # In most R functions, you can use named colors, hex, or rgb values: plot(x=1:10, y=rep(5,10), pch=19, cex=5, col=&quot;dark red&quot;) points(x=1:10, y=rep(6, 10), pch=19, cex=5, col=&quot;#557799&quot;) points(x=1:10, y=rep(4, 10), pch=19, cex=5, col=rgb(.25, .5, .3)) # In the simple base plot chart above, x and y are point coordinates, &#39;pch&#39; # is the point symbol shape, &#39;cex&#39; is the point size, and &#39;col&#39; is the color. # To see the parameters for plotting in base R, check out ?par # Some key ones include &quot;bg&quot; for background color, &#39;cex&#39; for scaling text size, # &#39;mar&#39; for plot margins, &#39;new&#39; for plotting witout clearing the previous plot, # &#39;mfcol&#39; &amp; &#39;mfrow&#39; split plotting space into rows and columns for multiple plots ?par # To close the current graphics device clearing the plot and plot parameters, use: dev.off() # If you plan on using the built-in color names, here&#39;s what they are: colors() # all colors grep(&quot;blue&quot;, colors(), value=T) # colors that have &#39;blue&#39; in the name # You may notice that rgb here ranges from 0 to 1. While this is the R default, # you can also set it for the more typical 0-255 range: rgb(10, 100, 100, maxColorValue=255) # -------~~ Transparency -------- # We can also set the opacity/transparency using the parameter &#39;alpha&#39; (range 0-1): plot(x=1:5, y=rep(5,5), pch=19, cex=16, col=rgb(.25, .5, .3, alpha=.5), xlim=c(0,6)) # If we have a hex color representation, we can set the transparency alpha # using &#39;adjustcolor&#39; from package &#39;grDevices&#39;. For fun, let&#39;s also set the # the plot background to black using the par() function for graphical parameters. # We could also set the margins in par() with mar=c(bottom, left, top, right). par(bg=&quot;black&quot;) col.tr &lt;- grDevices::adjustcolor(&quot;#557799&quot;, alpha=0.7) plot(x=1:5, y=rep(5,5), pch=19, cex=20, col=col.tr, xlim=c(0,6)) dev.off() # -------~~ Palettes -------- # In many cases, we need a number of contrasting colors, or multiple shades of a color. # R comes with some predefined palette function that can generate those for us. pal1 &lt;- heat.colors(5, alpha=1) # generate 5 colors from the heat palette, opaque pal2 &lt;- rainbow(5, alpha=.5) # generate 5 colors from the heat palette, semi-transparent plot(x=1:10, y=1:10, pch=19, cex=10, col=pal1) par(new=TRUE) # tells R not to clear the first plot before adding the second one plot(x=10:1, y=1:10, pch=19, cex=10, col=pal2) # We can also generate our own gradients using colorRampPalette(). # Note that colorRampPalette returns a FUNCTION that we can use # to generate as many colors from that palette as we need. palf &lt;- colorRampPalette(c(&quot;gray70&quot;, &quot;dark red&quot;, &quot;orange&quot;)) plot(x=10:1, y=1:10, pch=19, cex=10, col=palf(10)) # To add transparency to colorRampPalette, you need to add a parameter `alpha=TRUE`: palf &lt;- colorRampPalette(c(rgb(1,1,1, .2),rgb(.8,0,0, .7)), alpha=TRUE) plot(x=10:1, y=1:10, pch=19, cex=10, col=palf(10)) # -------~~ ColorBrewer -------- # Finding good color combinations is a tough task - and the built-in R palettes # are rather limited. Thankfully there are other available packages for this: # install.packages(&quot;RColorBrewer&quot;) library(&quot;RColorBrewer&quot;) display.brewer.all() # This package has one main function, called &#39;brewer.pal&#39;. # Using it, you just need to select the desired palette and a number of colors. # Let&#39;s take a look at some of the RColorBrewer palettes: display.brewer.pal(8, &quot;Set3&quot;) display.brewer.pal(8, &quot;Spectral&quot;) display.brewer.pal(8, &quot;Blues&quot;) # Plot figures using ColorBrewer # We&#39;ll use par() to plot multiple figures. # plot row by row: mfrow=c(number of rows, number of columns) # plot column by column: mfcol=c(number of rows, number of columns) par(mfrow=c(1,2)) # plot two figures - 1 row, 2 columns pal3 &lt;- brewer.pal(10, &quot;Set3&quot;) plot(x=10:1, y=10:1, pch=19, cex=6, col=pal3) plot(x=10:1, y=10:1, pch=19, cex=6, col=rev(pal3)) # backwards dev.off() # shut off the graphic device to clear the two-figure configuration. detach(&quot;package:RColorBrewer&quot;) # ================ 2. Reading network data into &#39;igraph&#39; ================ # Download an archive with the data files from http://bit.ly/polnet2018 # Clear your workspace by removing all objects returned by ls(): rm(list = ls()) # Set the working directory to the folder containing the workshop files: setwd(&quot;C:/polnet2018&quot;) # If you don&#39;t know the path to the folder and you&#39;re in RStudio, go to the # &quot;Session&quot; menu -&gt; &quot;Set Working Directory&quot; -&gt; &quot;To Source File Location&quot; library(&quot;igraph&quot;) # -------~~ DATASET 1: edgelist -------- # Read in the data: nodes &lt;- read.csv(&quot;./Data files/Dataset1-Media-Example-NODES.csv&quot;, header=T, as.is=T) links &lt;- read.csv(&quot;./Data files/Dataset1-Media-Example-EDGES.csv&quot;, header=T, as.is=T) # Examine the data: head(nodes) head(links) # Converting the data to an igraph object: # The graph_from_data_frame() function takes two data frames: &#39;d&#39; and &#39;vertices&#39;. # &#39;d&#39; describes the edges of the network - it should start with two columns # containing the source and target node IDs for each network tie. # &#39;vertices&#39; should start with a column of node IDs. It can be omitted. # Any additional columns in either data frame are interpreted as attributes. net &lt;- graph_from_data_frame(d=links, vertices=nodes, directed=T) # Examine the resulting object: class(net) net # The description of an igraph object starts with four letters: # D or U, for a directed or undirected graph # N for a named graph (where nodes have a `name` attribute) # W for a weighted graph (where edges have a `weight` attribute) # B for a bipartite (two-mode) graph (where nodes have a `type` attribute) # The two numbers that follow (17 49) refer to the number of nodes and edges in the graph. # The description also lists node &amp; edge attributes # We can access the nodes, edges, and their attributes: E(net) V(net) E(net)$type V(net)$media # Or find specific nodes and edges by attribute: # (that returns objects of type vertex sequence / edge sequence) V(net)[media==&quot;BBC&quot;] E(net)[type==&quot;mention&quot;] # If you need them, you can extract an edge list # or a matrix back from the igraph networks. as_edgelist(net, names=T) as_adjacency_matrix(net, attr=&quot;weight&quot;) # Or data frames describing nodes and edges: as_data_frame(net, what=&quot;edges&quot;) as_data_frame(net, what=&quot;vertices&quot;) # You can also access the network matrix directly: net[1,] net[5,7] # First attempt to plot the graph: plot(net) # not pretty! # Removing loops from the graph: net &lt;- simplify(net, remove.multiple = F, remove.loops = T) # Let&#39;s and reduce the arrow size and remove the labels: plot(net, edge.arrow.size=.4,vertex.label=NA) # -------~~ DATASET 2: matrix -------- # Read in the data: nodes2 &lt;- read.csv(&quot;./Data files/Dataset2-Media-User-Example-NODES.csv&quot;, header=T, as.is=T) links2 &lt;- read.csv(&quot;./Data files/Dataset2-Media-User-Example-EDGES.csv&quot;, header=T, row.names=1) # Examine the data: head(nodes2) head(links2) # links2 is a matrix for a two-mode network: links2 &lt;- as.matrix(links2) dim(links2) dim(nodes2) # Create an igraph network object from the two-mode matrix: net2 &lt;- graph_from_incidence_matrix(links2) # To transform a one-mode network matrix into an igraph object, # we would use graph_from_adjacency_matrix() # A built-in vertex attribute &#39;type&#39; shows which mode vertices belong to. table(V(net2)$type) plot(net2,vertex.label=NA) # Examine the resulting object: class(net2) net2 # ================ 3. Network plots in &#39;igraph&#39; ================ # ------~~ Plot parameters in igraph -------- # Check out the node options (starting with &#39;vertex.&#39;) # and the edge options # (starting with &#39;edge.&#39;). # A list of options is also included in your handout. ?igraph.plotting # We can set the node &amp; edge options in two ways - one is to specify # them in the plot() function, as we are doing below. # Plot with curved edges (edge.curved=.1) and reduce arrow size: plot(net, edge.arrow.size=.4, edge.curved=.1) # Set node color to orange and the border color to hex #555555 # Replace the vertex label with the node names stored in &quot;media&quot; plot(net, edge.arrow.size=.2, edge.curved=0, vertex.color=&quot;orange&quot;, vertex.frame.color=&quot;#555555&quot;, vertex.label=V(net)$media, vertex.label.color=&quot;black&quot;, vertex.label.cex=.7) # The second way to set attributes is to add them to the igraph object. # Generate colors based on media type: colrs &lt;- c(&quot;gray50&quot;, &quot;tomato&quot;, &quot;gold&quot;) V(net)$color &lt;- colrs[V(net)$media.type] # Compute node degrees (#links) and use that to set node size: deg &lt;- degree(net, mode=&quot;all&quot;) V(net)$size &lt;- deg*3 # Alternatively, we can set node size based on audience size: V(net)$size &lt;- V(net)$audience.size*0.7 # The labels are currently node IDs. # Setting them to NA will render no labels: V(net)$label.color &lt;- &quot;black&quot; V(net)$label &lt;- NA # Set edge width based on weight: E(net)$width &lt;- E(net)$weight/6 #change arrow size and edge color: E(net)$arrow.size &lt;- .2 E(net)$edge.color &lt;- &quot;gray80&quot; # We can even set the network layout: graph_attr(net, &quot;layout&quot;) &lt;- layout_with_lgl plot(net) # We can also override the attributes explicitly in the plot: plot(net, edge.color=&quot;orange&quot;, vertex.color=&quot;gray50&quot;) # We can also add a legend explaining the meaning of the colors we used: plot(net) legend(x=-1.1, y=-1.1, c(&quot;Newspaper&quot;,&quot;Television&quot;, &quot;Online News&quot;), pch=21, col=&quot;#777777&quot;, pt.bg=colrs, pt.cex=2.5, bty=&quot;n&quot;, ncol=1) # Sometimes, especially with semantic networks, we may be interested in # plotting only the labels of the nodes: plot(net, vertex.shape=&quot;none&quot;, vertex.label=V(net)$media, vertex.label.font=2, vertex.label.color=&quot;gray40&quot;, vertex.label.cex=.7, edge.color=&quot;gray85&quot;) # Let&#39;s color the edges of the graph based on their source node color. # We&#39;ll get the starting node for each edge with &quot;ends()&quot;. edge.start &lt;- ends(net, es=E(net), names=F)[,1] edge.col &lt;- V(net)$color[edge.start] plot(net, edge.color=edge.col, edge.curved=.4) # -------~~ Network Layouts in &#39;igraph&#39; -------- # Network layouts are algorithms that return coordinates for each # node in a network. # Let&#39;s generate a slightly larger 100-node graph using # a preferential attachment model (Barabasi-Albert). net.bg &lt;- sample_pa(100, 1.2) V(net.bg)$size &lt;- 8 V(net.bg)$frame.color &lt;- &quot;white&quot; V(net.bg)$color &lt;- &quot;orange&quot; V(net.bg)$label &lt;- &quot;&quot; E(net.bg)$arrow.mode &lt;- 0 plot(net.bg) # Now let&#39;s plot this network using the layouts available in igraph. # You can set the layout in the plot function: plot(net.bg, layout=layout_randomly) # Or calculate the vertex coordinates in advance: l &lt;- layout_in_circle(net.bg) plot(net.bg, layout=l) # l is simply a matrix of x,y coordinates (N x 2) for the N nodes in the graph. # You can generate your own: l l &lt;- cbind(1:vcount(net.bg), c(1, vcount(net.bg):2)) plot(net.bg, layout=l) # This layout is just an example and not very helpful - thankfully # &#39;igraph&#39; has a number of built-in layouts, including: # Randomly placed vertices l &lt;- layout_randomly(net.bg) plot(net.bg, layout=l) # Circle layout l &lt;- layout_in_circle(net.bg) plot(net.bg, layout=l) # 3D sphere layout l &lt;- layout_on_sphere(net.bg) plot(net.bg, layout=l) # The Fruchterman-Reingold force-directed algorithm # Nice but slow, most often used in graphs smaller than ~1000 vertices. l &lt;- layout_with_fr(net.bg) plot(net.bg, layout=l) # You will also notice that the F-R layout is not deterministic - different # runs will result in slightly different configurations. Saving the layout # in l allows us to get the exact same result multiple times. par(mfrow=c(2,2), mar=c(1,1,1,1)) plot(net.bg, layout=layout_with_fr) plot(net.bg, layout=layout_with_fr) plot(net.bg, layout=l) plot(net.bg, layout=l) dev.off() # By default, the coordinates of the plots are rescaled to the [-1,1] interval # for both x and y. You can change that with the parameter &quot;rescale=FALSE&quot; # and rescale your plot manually by multiplying the coordinates by a scalar. # You can use norm_coords to normalize the plot with the boundaries you want. # This way you can create more compact or spread out layout versions. # Get the layout coordinates: l &lt;- layout_with_fr(net.bg) # Normalize them so that they are in the -1, 1 interval: l &lt;- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1) par(mfrow=c(2,2), mar=c(0,0,0,0)) plot(net.bg, rescale=F, layout=l*0.4) plot(net.bg, rescale=F, layout=l*0.8) plot(net.bg, rescale=F, layout=l*1.2) plot(net.bg, rescale=F, layout=l*1.6) dev.off() # Another popular force-directed algorithm that produces nice results for # connected graphs is Kamada Kawai. Like Fruchterman Reingold, it attempts to # minimize the energy in a spring system. l &lt;- layout_with_kk(net.bg) plot(net.bg, layout=l) #The MDS (multidimensional scaling) algorithm tries to place nodes based on some # measure of similarity or distance between them. More similar/less distant nodes are # placed closer to each other. By default, the measure used is based on the shortest #paths between nodes in the network. That can be changed with the &#39;dist&#39; parameter. plot(net.bg, layout=layout_with_mds) # The LGL algorithm is for large connected graphs. Here you can specify a root - # the node that will be placed in the middle of the layout. plot(net.bg, layout=layout_with_lgl) # By default, igraph uses a layout called &#39;layout_nicely&#39; which selects # an appropriate layout algorithm based on the properties of the graph. # Check out all available layouts in igraph: ?igraph::layout_ layouts &lt;- grep(&quot;^layout_&quot;, ls(&quot;package:igraph&quot;), value=TRUE)[-1] # Remove layouts that do not apply to our graph. layouts &lt;- layouts[!grepl(&quot;bipartite|merge|norm|sugiyama|tree&quot;, layouts)] par(mfrow=c(3,3), mar=c(1,1,1,1)) for (layout in layouts) { print(layout) l &lt;- do.call(layout, list(net)) plot(net, edge.arrow.mode=0, layout=l, main=layout) } dev.off() # -------~~ Highlighting aspects of the network -------- plot(net) # Notice that our network plot is still not too helpful. # We can identify the type and size of nodes, but cannot see # much about the structure since the links we&#39;re examining are so dense. # One way to approach this is to see if we can sparsify the network. hist(links$weight) mean(links$weight) sd(links$weight) # There are more sophisticated ways to extract the key edges, # but for the purposes of this exercise we&#39;ll only keep ones # that have weight higher than the mean for the network. # We can delete edges using delete_edges(net, edges) # (or, by the way, add edges with add_edges(net, edges) ) cut.off &lt;- mean(links$weight) net.sp &lt;- delete_edges(net, E(net)[weight&lt;cut.off]) plot(net.sp, layout=layout_with_kk) # Another way to think about this is to plot the two tie types # (hyperlinks and mentions) separately. We will do that in # section 5 of this tutorial: Plotting multiplex networks. # We can also try to make the network map more useful by # showing the communities within it. # Community detection (by optimizing modularity over partitions): clp &lt;- cluster_optimal(net) class(clp) clp$membership # Community detection returns an object of class &quot;communities&quot; # which igraph knows how to plot: plot(clp, net) # We can also plot the communities without relying on their built-in plot: V(net)$community &lt;- clp$membership colrs &lt;- adjustcolor( c(&quot;gray50&quot;, &quot;tomato&quot;, &quot;gold&quot;, &quot;yellowgreen&quot;), alpha=.6) plot(net, vertex.color=colrs[V(net)$community]) # -------~~ Highlighting specific nodes or links -------- # Sometimes we want to focus the visualization on a particular node # or a group of nodes. Let&#39;s represent distance from the NYT: # distances() calculates shortest parth from vertices in &#39;v&#39; to ones in &#39;to&#39;. dist.from.NYT &lt;- distances(net, v=V(net)[media==&quot;NY Times&quot;], to=V(net), weights=NA) # Set colors to plot the distances: oranges &lt;- colorRampPalette(c(&quot;dark red&quot;, &quot;gold&quot;)) col &lt;- oranges(max(dist.from.NYT)+1) col &lt;- col[dist.from.NYT+1] plot(net, vertex.label=dist.from.NYT, vertex.color=col, vertex.label.color=&quot;white&quot;) # Or, a bit more readable: plot(net, vertex.color=col, vertex.label=dist.from.NYT, edge.arrow.size=.6, vertex.label.color=&quot;white&quot;, vertex.size=V(net)$size*1.6, edge.width=2, layout=norm_coords(layout_with_lgl(net))*1.4, rescale=F) # We can also highlight paths between the nodes in the network. # Say here between MSNBC and the New York Post: news.path &lt;- shortest_paths(net, from = V(net)[media==&quot;MSNBC&quot;], to = V(net)[media==&quot;New York Post&quot;], output = &quot;both&quot;) # both path nodes and edges # Generate edge color variable to plot the path: ecol &lt;- rep(&quot;gray80&quot;, ecount(net)) ecol[unlist(news.path$epath)] &lt;- &quot;orange&quot; # Generate edge width variable to plot the path: ew &lt;- rep(2, ecount(net)) ew[unlist(news.path$epath)] &lt;- 4 # Generate node color variable to plot the path: vcol &lt;- rep(&quot;gray40&quot;, vcount(net)) vcol[unlist(news.path$vpath)] &lt;- &quot;gold&quot; plot(net, vertex.color=vcol, edge.color=ecol, edge.width=ew, edge.arrow.mode=0) # Highlight the edges going into or out of a vertex, for instance the WSJ. # For a single node, use &#39;incident()&#39;, for multiple nodes use &#39;incident_edges()&#39; inc.edges &lt;- incident(net, V(net)[media==&quot;Wall Street Journal&quot;], mode=&quot;all&quot;) # Set colors to plot the selected edges. ecol &lt;- rep(&quot;gray80&quot;, ecount(net)) ecol[inc.edges] &lt;- &quot;orange&quot; vcol &lt;- rep(&quot;grey40&quot;, vcount(net)) vcol[V(net)$media==&quot;Wall Street Journal&quot;] &lt;- &quot;gold&quot; plot(net, vertex.color=vcol, edge.color=ecol, edge.width=2) # Or we can highlight the immediate neighbors of a vertex, say WSJ. # The &#39;neighbors&#39; function finds all nodes one step out from the focal actor. # To find the neighbors for multiple nodes, use &#39;adjacent_vertices()&#39;. # To find node neighborhoods going more than one step out, use function &#39;ego()&#39; # with parameter &#39;order&#39; set to the number of steps out to go from the focal node(s). neigh.nodes &lt;- neighbors(net, V(net)[media==&quot;Wall Street Journal&quot;], mode=&quot;out&quot;) # Set colors to plot the neighbors: vcol[neigh.nodes] &lt;- &quot;#ff9d00&quot; plot(net, vertex.color=vcol) # Another way to draw attention to a group of nodes: # (This is generally not recommended since, depending on layout, nodes # that are not &#39;marked&#39; can accidentally get placed on top of the mark) plot(net, mark.groups=c(1,4,5,8), mark.col=&quot;#C5E5E7&quot;, mark.border=NA) # Mark multiple groups: plot(net, mark.groups=list(c(1,4,5,8), c(15:17)), mark.col=c(&quot;#C5E5E7&quot;,&quot;#ECD89A&quot;), mark.border=NA) # -------~~ Interactive plotting with &#39;tkplot&#39; -------- # R and igraph offer interactive plotting capabilities # (mostly helpful for small networks) tkid &lt;- tkplot(net) #tkid is the id of the tkplot l &lt;- tkplot.getcoords(tkid) # grab the coordinates from tkplot plot(net, layout=l) # -------~~ Other ways to represent a network -------- # One reminder that there are other ways to represent a network: # Heatmap of the network matrix: netm &lt;- as_adjacency_matrix(net, attr=&quot;weight&quot;, sparse=F) colnames(netm) &lt;- V(net)$media rownames(netm) &lt;- V(net)$media palf &lt;- colorRampPalette(c(&quot;gold&quot;, &quot;dark orange&quot;)) # The Rowv &amp; Colv parameters turn dendrograms on and off heatmap(netm[,17:1], Rowv = NA, Colv = NA, col = palf(20), scale=&quot;none&quot;, margins=c(10,10) ) # Degree distribution deg.dist &lt;- degree_distribution(net, cumulative=T, mode=&quot;all&quot;) plot( x=0:max(degree(net)), y=1-deg.dist, pch=19, cex=1.4, col=&quot;orange&quot;, xlab=&quot;Degree&quot;, ylab=&quot;Cumulative Frequency&quot;) # ================ 4. Plotting two-mode networks ================ head(nodes2) head(links2) net2 plot(net2) # This time we will make nodes look different based on their type. # Media outlets are blue squares, audience nodes are orange circles: V(net2)$color &lt;- c(&quot;steel blue&quot;, &quot;orange&quot;)[V(net2)$type+1] V(net2)$shape &lt;- c(&quot;square&quot;, &quot;circle&quot;)[V(net2)$type+1] # Media outlets will have name labels, audience members will not: V(net2)$label &lt;- &quot;&quot; V(net2)$label[V(net2)$type==F] &lt;- nodes2$media[V(net2)$type==F] V(net2)$label.cex=.6 V(net2)$label.font=2 plot(net2, vertex.label.color=&quot;white&quot;, vertex.size=(2-V(net2)$type)*8) # igraph has a built-in bipartite layout, though it&#39;s not the most helpful: plot(net2, vertex.label=NA, vertex.size=7, layout=layout_as_bipartite) # Using text as nodes: par(mar=c(0,0,0,0)) plot(net2, vertex.shape=&quot;none&quot;, vertex.label=nodes2$media, vertex.label.color=V(net2)$color, vertex.label.font=2, vertex.label.cex=.95, edge.color=&quot;gray70&quot;, edge.width=2) dev.off() # Using images as nodes # You will need the &#39;png&#39; package to do this: # install.packages(&quot;png&quot;) library(&quot;png&quot;) img.1 &lt;- readPNG(&quot;./Data files/images/news.png&quot;) img.2 &lt;- readPNG(&quot;./Data files/images/user.png&quot;) V(net2)$raster &lt;- list(img.1, img.2)[V(net2)$type+1] par(mar=c(3,3,3,3)) plot(net2, vertex.shape=&quot;raster&quot;, vertex.label=NA, vertex.size=16, vertex.size2=16, edge.width=2) # By the way, you can also add any image you want to any plot. # For example, many network graphs could be improved by a photo # of a puppy carrying a basket full of kittens. img.3 &lt;- readPNG(&quot;./Data files/images/puppy.png&quot;) rasterImage(img.3, xleft=-1.7, xright=0, ybottom=-1.2, ytop=0) # The numbers after the image are coordinates for the plot. # The limits of your plotting area are given in par()$usr dev.off() detach(&quot;package:png&quot;) # We can also generate and plot bipartite projections for the two-mode network: # (co-memberships are easy to calculate by multiplying the network matrix by # its transposed matrix, or using igraph&#39;s bipartite.projection function) net2.bp &lt;- bipartite.projection(net2) # We can calculate the projections manually as well: # as_incidence_matrix(net2) %*% t(as_incidence_matrix(net2)) # t(as_incidence_matrix(net2)) %*% as_incidence_matrix(net2) par(mfrow=c(1,2)) plot(net2.bp$proj1, vertex.label.color=&quot;black&quot;, vertex.label.dist=2, vertex.label=nodes2$media[!is.na(nodes2$media.type)]) plot(net2.bp$proj2, vertex.label.color=&quot;black&quot;, vertex.label.dist=2, vertex.label=nodes2$media[ is.na(nodes2$media.type)]) dev.off() # PSA: Remember to detach packages when you are done with them! # You may run into problems if you have igraph and Statnet packages loaded together. detach(&quot;package:igraph&quot;) # ================ 5. Plotting multiplex networks ================ # In some cases, the networks we want to plot are multigraphs: # they can have multiple edges connecting the same two nodes. # # A related concept, multiplex networks, contain multiple types of ties # -- e.g. friendship, romantic, and work relationships between individuals. # In our example network, we also have two tie types: hyperlinks and mentions. # One thing we can do is plot each type of tie separately: library(&quot;igraph&quot;) E(net)$width &lt;- 2 plot(net, edge.color=c(&quot;dark red&quot;, &quot;slategrey&quot;)[(E(net)$type==&quot;hyperlink&quot;)+1], vertex.color=&quot;gray40&quot;, layout=layout_in_circle, edge.curved=.3) # Another way to delete edges using the minus operator: net.m &lt;- net - E(net)[E(net)$type==&quot;hyperlink&quot;] net.h &lt;- net - E(net)[E(net)$type==&quot;mention&quot;] # Plot the two links separately: par(mfrow=c(1,2)) plot(net.h, vertex.color=&quot;orange&quot;, layout=layout_with_fr, main=&quot;Tie: Hyperlink&quot;) plot(net.m, vertex.color=&quot;lightsteelblue2&quot;, layout=layout_with_fr, main=&quot;Tie: Mention&quot;) dev.off() # Make sure the nodes stay in the same place in both plots: par(mfrow=c(1,2),mar=c(1,1,4,1)) l &lt;- layout_with_fr(net) plot(net.h, vertex.color=&quot;orange&quot;, layout=l, main=&quot;Tie: Hyperlink&quot;) plot(net.m, vertex.color=&quot;lightsteelblue2&quot;, layout=l, main=&quot;Tie: Mention&quot;) dev.off() # In our example network, we don&#39;t have node dyads connected by multiple # types of connections (we never have both a &#39;hyperlink&#39; and a &#39;mention&#39; # tie between the same two news outlets) -- however that could happen. # One challenge in visualizing multiplex networks is that multiple # edges between the same two nodes may get plotted on top of each # other in a way that makes them impossible to distinguish. # For example, let us generate a simple multiplex network with # two nodes and three ties between them: multigtr &lt;- graph( edges=c(1,2, 1,2, 1,2), n=2 ) l &lt;- layout_with_kk(multigtr) # Let&#39;s just plot the graph: plot(multigtr, vertex.color=&quot;lightsteelblue&quot;, vertex.frame.color=&quot;white&quot;, vertex.size=40, vertex.shape=&quot;circle&quot;, vertex.label=NA, edge.color=c(&quot;gold&quot;, &quot;tomato&quot;, &quot;yellowgreen&quot;), edge.width=10, edge.arrow.size=5, edge.curved=0.1, layout=l) # Because all edges in the graph have the same curvature, they are drawn # over each other so that we only see the last one. What we can do is # assign each edge a different curvature. One useful function in &#39;igraph&#39; # called curve_multiple() can help us here. For a graph G, curve.multiple(G) # will generate a curvature for each edge that maximizes visibility. plot(multigtr, vertex.color=&quot;lightsteelblue&quot;, vertex.frame.color=&quot;white&quot;, vertex.size=40, vertex.shape=&quot;circle&quot;, vertex.label=NA, edge.color=c(&quot;gold&quot;, &quot;tomato&quot;, &quot;yellowgreen&quot;), edge.width=10, edge.arrow.size=5, edge.curved=curve_multiple(multigtr), layout=l) dev.off() detach(&quot;package:igraph&quot;) # ================ 6. Quick example using the &#39;network&#39; package ================ # Plotting with the &#39;network&#39; package is very similar to that with &#39;igraph&#39; - # although the notation is slightly different (a whole new set of parameter names!) # Here is a quick example using the (by now very familiar) media network. #Just in case we have forgotten this earlier: dev.off() detach(&quot;package:igraph&quot;) # Load our main package: library(&quot;network&quot;) # Wait, what did our data look like? head(links) head(nodes) # Convert the data into the network format used by the Statnet family. # As in igraph, we can generate a &#39;network&#39; object from an edgelist, # an adjacency matrix, or an incidence matrix. ?edgeset.constructors # Remember to set the &#39;ignore.eval&#39; to F for weighted networks. # We would need to set &#39;multile&#39; to T if we wanted to allow multiplex edges. net3 &lt;- network(links, vertex.attr=nodes, matrix.type=&quot;edgelist&quot;, loops=F, multiple=F, ignore.eval = F) net3 # You can access the edges, vertices, and the network matrix using: net3[,] net3 %n% &quot;net.name&quot; &lt;- &quot;Media Network&quot; # network attribute net3 %v% &quot;media&quot; # Node attribute net3 %e% &quot;type&quot; # Edge attribute net3 %v% &quot;col&quot; &lt;- c(&quot;gray70&quot;, &quot;tomato&quot;, &quot;gold&quot;)[net3 %v% &quot;media.type&quot;] # plot the network: plot(net3, vertex.cex=(net3 %v% &quot;audience.size&quot;)/7, vertex.col=&quot;col&quot;) # For a full list of parameters that you can use in this plot, # check out ?plot.network. ?plot.network # Note that - as in igraph - the plot returns the node position coordinates. l &lt;- plot(net3, vertex.cex=(net3 %v% &quot;audience.size&quot;)/7, vertex.col=&quot;col&quot;) plot(net3, vertex.cex=(net3 %v% &quot;audience.size&quot;)/7, vertex.col=&quot;col&quot;, coord=l) # The network package also offers the option to edit a plot interactively, # by setting the parameter interactive=T plot(net3, vertex.cex=(net3 %v% &quot;audience.size&quot;)/7, vertex.col=&quot;col&quot;, interactive=T) detach(&quot;package:network&quot;) # ================ 7. Simple plot animations in R ================ # If you have already installed &quot;ndtv&quot;, you should also have # a package used by it called &quot;animation&quot;. # install.packages(&quot;animation&quot;) library(&quot;animation&quot;) library(&quot;igraph&quot;) # In order for this to work, you need not only the R package, but also # an additional software called ImageMagick from imagemagick.org # If you don&#39;t already have it, skip this part of the tutorial for now. ani.options(&quot;convert&quot;) # Check that the package knows where to find ImageMagick ani.options(convert=&quot;C:/Progra~1/ImageMagick-7.0.6-Q16/convert.exe&quot;) # You can use this technique to create various (not necessarily network-related) # animations in R by generating multiple plots and combining them in an animated GIF. l &lt;- layout_with_lgl(net) saveGIF( { col &lt;- rep(&quot;grey40&quot;, vcount(net)) plot(net, vertex.color=col, layout=l) step.1 &lt;- V(net)[media==&quot;Wall Street Journal&quot;] col[step.1] &lt;- &quot;#ff5100&quot; plot(net, vertex.color=col, layout=l) step.2 &lt;- unlist(neighborhood(net, 1, step.1, mode=&quot;out&quot;)) col[setdiff(step.2, step.1)] &lt;- &quot;#ff9d00&quot; plot(net, vertex.color=col, layout=l) step.3 &lt;- unlist(neighborhood(net, 2, step.1, mode=&quot;out&quot;)) col[setdiff(step.3, step.2)] &lt;- &quot;#FFDD1F&quot; plot(net, vertex.color=col, layout=l) }, interval = .8, movie.name=&quot;network_animation.gif&quot; ) detach(&quot;package:igraph&quot;) detach(&quot;package:animation&quot;) # ================ 8. Interactive JavaScript networks ================ # There are a number of libraries like &#39;rcharts&#39; and &#39;htmlwidgets&#39; that can help you # export interactive web charts from R. We&#39;ll take a quick look at three packages that # can export networks from R to JavaScript: : &#39;visNetwork&#39; and &#39;threejs&#39;, and &#39;networkD3&#39; # -------~~ Interactive networks with visNetwork -------- # install.packages(&quot;visNetwork&quot;) library(&quot;visNetwork&quot;) head(nodes) head(links) # We can visualize the network right away - visNetwork() will accept # our node and link data frames (it needs node data with an &#39;id&#39; column, # and edge data with &#39;from&#39; and &#39;to&#39; columns). visNetwork(nodes, links) # We can set the height and width of the visNetwork() window # with parameters &#39;height&#39; and &#39;width&#39;, the back color with &#39;background&#39;, # the title, subtitle, and footer with &#39;main&#39;, &#39;submain&#39;, and &#39;footer&#39; visNetwork(nodes, links, height=&quot;300px&quot;, width=&quot;100%&quot;, background=&quot;#eeefff&quot;, main=&quot;Network&quot;, submain=&quot;And what a great network it is!&quot;, footer= &quot;Hyperlinks and mentions among media sources&quot;) # Like &#39;igraph&#39; did, &#39;visNetwork&#39; allows us to set graphic properties # as node or edge attributes directly in the data or through a function. # Check out the available options with: ?visNodes ?visEdges # We&#39;ll start by adding new node and edge attributes to our dataframes. # We&#39;ll leave our original data alone and create two new data frames: vis.nodes &lt;- nodes vis.links &lt;- links # The options for node shape include &#39;ellipse&#39;, &#39;circle&#39;, # &#39;database&#39;, &#39;box&#39;, &#39;text&#39;, &#39;image&#39;, &#39;circularImage&#39;, &#39;diamond&#39;, # &#39;dot&#39;, &#39;star&#39;, &#39;triangle&#39;, &#39;triangleDown&#39;, &#39;square&#39;, and &#39;icon&#39; vis.nodes$shape &lt;- &quot;dot&quot; vis.nodes$shadow &lt;- TRUE # Nodes will drop shadow vis.nodes$title &lt;- vis.nodes$media # Text on click vis.nodes$label &lt;- vis.nodes$type.label # Node label vis.nodes$size &lt;- vis.nodes$audience.size # Node size vis.nodes$borderWidth &lt;- 2 # Node border width # We can set the color for several elements of the nodes: # &quot;background&quot; changes the node color, &quot;border&quot; changes the frame color; # &quot;highlight&quot; sets the color on click, &quot;hover&quot; sets the color on mouseover. vis.nodes$color.background &lt;- c(&quot;slategrey&quot;, &quot;tomato&quot;, &quot;gold&quot;)[nodes$media.type] vis.nodes$color.border &lt;- &quot;black&quot; vis.nodes$color.highlight.background &lt;- &quot;orange&quot; vis.nodes$color.highlight.border &lt;- &quot;darkred&quot; visNetwork(vis.nodes, vis.links) # Below we change some of the visual properties of the edges: vis.links$width &lt;- 1+links$weight/8 # line width vis.links$color &lt;- &quot;gray&quot; # line color vis.links$arrows &lt;- &quot;middle&quot; # arrows: &#39;from&#39;, &#39;to&#39;, or &#39;middle&#39; vis.links$smooth &lt;- FALSE # should the edges be curved? vis.links$shadow &lt;- FALSE # edge shadow visNetwork(vis.nodes, vis.links) # Remove the arrows and set the edge width to 1: vis.links$arrows &lt;- &quot;&quot; vis.links$width &lt;- 1 visnet &lt;- visNetwork(vis.nodes, vis.links) visnet # We can also set the visualization options directly with visNodes() and visEdges() visnet2 &lt;- visNetwork(nodes, links) visnet2 &lt;- visNodes(visnet2, shape = &quot;square&quot;, shadow = TRUE, color=list(background=&quot;gray&quot;, highlight=&quot;orange&quot;, border=&quot;black&quot;)) visnet2 &lt;- visEdges(visnet2, color=list(color=&quot;black&quot;, highlight = &quot;orange&quot;), smooth = FALSE, width=2, dashes= TRUE, arrows = &#39;middle&#39; ) visnet2 # &#39;visNetwork&#39; offers a number of options, including highlighting the neighbors # of a selected node, or adding a drop-down menu to select a subset of nodes. # The subset is based on a column from our data - here the type label. visOptions(visnet, highlightNearest = TRUE, selectedBy = &quot;type.label&quot;) # &#39;visNetwork&#39; can also work with predefined groups of nodes. # Visual characteristics for each group can be set with visGroups(). nodes$group &lt;- nodes$type.label visnet3 &lt;- visNetwork(nodes, links) visnet3 &lt;- visGroups(visnet3, groupname = &quot;Newspaper&quot;, shape = &quot;square&quot;, color = list(background = &quot;gray&quot;, border=&quot;black&quot;)) visnet3 &lt;- visGroups(visnet3, groupname = &quot;TV&quot;, shape = &quot;dot&quot;, color = list(background = &quot;tomato&quot;, border=&quot;black&quot;)) visnet3 &lt;- visGroups(visnet3, groupname = &quot;Online&quot;, shape = &quot;diamond&quot;, color = list(background = &quot;orange&quot;, border=&quot;black&quot;)) visLegend(visnet3, main=&quot;Legend&quot;, position=&quot;right&quot;, ncol=1) # For more information, check out: ?visOptions # available options ?visLayout # available layouts ?visGroups # using node groups ?visLegend # adding a legend detach(&quot;package:visNetwork&quot;) # -------~~ Interactive networks with threejs -------- # Another package exporting networks from R to a js library is &#39;threejs&#39; # The nice thing about it is that it can read igraph objects. # install.packages(&quot;threejs&quot;) # If you get errors or warnings using this library and the latest R version, # try installing the development version of the &#39;htmlwidgets&#39; package # devtools::install_github(&quot;ramnathv/htmlwidgets&quot;) library(&quot;threejs&quot;) library(&quot;htmlwidgets&quot;) library(&quot;igraph&quot;) # The main network plotting function - graphjs() will take an igraph object. # We could use our initial &#39;net&#39; object with a slight modification - we will # delete its graph layout and let &#39;threejs&#39; generate its own layout. # (We cheated a bit by assigning a function to the layout attribute above # rather than giving it a table of node coordinates. This is fine by &#39;igraph&#39;, # but &#39;threejs&#39; will not let us do it. net.js &lt;- net graph_attr(net.js, &quot;layout&quot;) &lt;- NULL # Note that RStudio for Windows may not render the &#39;threejs&#39; graphics properly. # We will save the output in an HTML file and open it in a browser. # Some of the parameters that we can add include &#39;main&#39; for the plot title; # &#39;curvature&#39; for the edge curvature; &#39;bg&#39; for background color; # &#39;showLabels&#39; to set labels to visible (TRUE) or not (FALSE); # &#39;attraction&#39; and &#39;repulsion&#39; to set how much nodes attract and repulse # each other; &#39;opacity&#39; for node transparency (0 to 1); &#39;stroke&#39; to indicate # whether nodes should be framed in a black circle (TRUE) or not (FALSE), etc. # For the full list of parameters, check out ?graphjs gjs &lt;- graphjs(net.js, main=&quot;Network!&quot;, bg=&quot;gray10&quot;, showLabels=F, stroke=F, curvature=0.1, attraction=0.9, repulsion=0.8, opacity=0.9) print(gjs) saveWidget(gjs, file=&quot;Media-Network-gjs.html&quot;) browseURL(&quot;Media-Network-gjs.html&quot;) # Once we open the resulting visualization in the browser, we can use the mouse to # control it: scrollwheel to zoom in and out, the left mouse button to rotate # the network, and the right mouse button to pan. # We can also create simple animations with &#39;threejs&#39; by using lists of # layouts, vertex colors, and edge colors that will switch at each step. gjs.an &lt;- graphjs(net.js, bg=&quot;gray10&quot;, showLabels=F, stroke=F, layout=list(layout_randomly(net.js, dim=3), layout_with_fr(net.js, dim=3), layout_with_drl(net.js, dim=3), layout_on_sphere(net.js)), vertex.color=list(V(net.js)$color, &quot;gray&quot;, &quot;orange&quot;, V(net.js)$color), main=list(&quot;Random Layout&quot;, &quot;Fruchterman-Reingold&quot;, &quot;DrL layout&quot;, &quot;Sphere&quot; ) ) print(gjs.an) saveWidget(gjs.an, file=&quot;Media-Network-gjs-an.html&quot;) browseURL(&quot;Media-Network-gjs-an.html&quot;) # Another example is the &#39;Les Miserables&#39; network included with the package: data(LeMis) lemis.net &lt;- graphjs(LeMis, main=&quot;Les Miserables&quot;, showLabels=T) print(lemis.net) saveWidget(lemis.net, file=&quot;LeMis-Network-gjs.html&quot;) browseURL(&quot;LeMis-Network-gjs.html&quot;) detach(&quot;package:igraph&quot;) detach(&quot;package:threejs&quot;) detach(&quot;package:htmlwidgets&quot;) # -------~~ Interactive Networks with networkD3 -------- # Another package using JavaScript to export networks: networkD3 # install.packages(&quot;networkD3&quot;) library(&quot;networkD3&quot;) # d3ForceNetwork expects node IDs that are numeric and start from 0 # so we have to transform our character node IDs: links.d3 &lt;- data.frame(from=as.numeric(factor(links$from))-1, to=as.numeric(factor(links$to))-1 ) # The nodes need to be in the same order as the &quot;source&quot; column in links: nodes.d3 &lt;- cbind(idn=factor(nodes$media, levels=nodes$media), nodes) # The `Group` parameter is used to color the nodes. # Nodesize is not (as you might think) the size of the node, but the # number of the column in the node data that should be used for sizing. # The `charge` parameter guides node repulsion (if negative) or # attraction (if positive). forceNetwork(Links = links.d3, Nodes = nodes.d3, Source=&quot;from&quot;, Target=&quot;to&quot;, NodeID = &quot;idn&quot;, Group = &quot;type.label&quot;,linkWidth = 1, linkColour = &quot;#afafaf&quot;, fontSize=12, zoom=T, legend=T, Nodesize=6, opacity = 1, charge=-600, width = 600, height = 600) detach(&quot;package:networkD3&quot;) # ================ 9. Interactive and dynamic networks with ndtv-d3 ================ # -------~~ Interactive network plots -------- # install.packages(&quot;ndtv&quot;, dependencies=T) library(&quot;ndtv&quot;) # You should not need additional software to produce web animations with &#39;ndtv&#39; (below). # If you want to save the animations as video files ( see ?saveVideo), you have to # install a video converter called FFmpeg (ffmpg.org). To find out how to get the right # installation for your OS, check out ?install.ffmpeg To use all available layouts, # you need to have Java installed on your machine. # Remember net3, our original media network turned into a &#39;network&#39; object: net3 # Let&#39;s create an interactive (but not yet dynamic!) visualization of net3. # You will recognize a lot of the plotting parameters from &#39;network&#39;: # Two new parameters set the tooltips (the popup labels you see when you # click on network elements); note that those can take html format. # &#39;launchBrowser=T&#39; will open file &#39;filename&#39; in your default browser. render.d3movie(net3, usearrows = F, displaylabels = F, bg=&quot;#111111&quot;, vertex.border=&quot;#ffffff&quot;, vertex.col = net3 %v% &quot;col&quot;, vertex.cex = (net3 %v% &quot;audience.size&quot;)/8, edge.lwd = (net3 %e% &quot;weight&quot;)/3, edge.col = &#39;#55555599&#39;, vertex.tooltip = paste(&quot;&lt;b&gt;Name:&lt;/b&gt;&quot;, (net3 %v% &#39;media&#39;) , &quot;&lt;br&gt;&quot;, &quot;&lt;b&gt;Type:&lt;/b&gt;&quot;, (net3 %v% &#39;type.label&#39;)), edge.tooltip = paste(&quot;&lt;b&gt;Edge type:&lt;/b&gt;&quot;, (net3 %e% &#39;type&#39;), &quot;&lt;br&gt;&quot;, &quot;&lt;b&gt;Edge weight:&lt;/b&gt;&quot;, (net3 %e% &#39;weight&#39; ) ), launchBrowser=T, filename=&quot;Media-Network.html&quot; ) # If you are going to embed this in a markdown document, # you would also need to add output.mode=&#39;inline&#39; above. # -------~~ Network evolution animations -------- # In order to work with the network animations in &#39;ndtv&#39;, # we need to understand the dynamic network format used by # Statnet packages, implemented in &#39;networkDynamic&#39;. It can # represent discrete or continuous longitudinal network structures. # Let&#39;s look at one of the example datasets included in the # package, containing simulation data based on the network of # business connections among Renaissance Florentine families: data(short.stergm.sim) short.stergm.sim head(as.data.frame(short.stergm.sim)) # Here, an edge starts from a node with ID in `tail` and goes to one with ID in `head`. # Edges exist from time point `onset` to time point `terminus`. # There may be multiple periods (*activity spells*) where an edge is present. # Each of those periods is recorded on a separate row in the data frame. # With dynamic data, we can use &#39;network.extract()&#39; to get a network # that only contains elements active at a given point/time interval. # Plot the network ignoring time (all nodes &amp; edges that were ever present): plot(short.stergm.sim) # Plot the network at time 1 (at=1): plot( network.extract(short.stergm.sim, at=1) ) # Plot nodes &amp; edges active for the entire period (`rule=all`) from 1 to 5: plot( network.extract(short.stergm.sim, onset=1, terminus=5, rule=&quot;all&quot;) ) #Plot nodes &amp; edges active at any point (`rule=any`) between 1 and 10: plot( network.extract(short.stergm.sim, onset=1, terminus=10, rule=&quot;any&quot;) ) # Let&#39;s make a quick d3 animation from the example network: render.d3movie(short.stergm.sim,displaylabels=TRUE) # Next, we will create and animate our own dynamic network. # Dynamic network object can be generated in a number of ways: from # a set of networks/matrices representing different time points, or from # data frames/matrices with node lists and edge lists indicating when each # is active, or when they switch state. See ?networkDynamic for more information. net3 plot(net3) vs &lt;- data.frame(onset=0, terminus=50, vertex.id=1:17) es &lt;- data.frame(onset=1:49, terminus=50, head=as.matrix(net3, matrix.type=&quot;edgelist&quot;)[,1], tail=as.matrix(net3, matrix.type=&quot;edgelist&quot;)[,2]) head(vs) head(es) # Combine our base network with the edge and node longitudinal data: net3.dyn &lt;- networkDynamic(base.net=net3, edge.spells=es, vertex.spells=vs) # Plot the network (all elements present at any time point): plot(net3.dyn, vertex.cex=(net3 %v% &quot;audience.size&quot;)/7, vertex.col=&quot;col&quot;) # Plot static images showing network evolution: compute.animation(net3.dyn, animation.mode = &quot;kamadakawai&quot;, slice.par=list(start=0, end=49, interval=10, aggregate.dur=10, rule=&#39;any&#39;)) # Show time evolution through static images at different time points: filmstrip(net3.dyn, displaylabels=F, mfrow=c(2, 3), slice.par=list(start=0, end=49, interval=10, aggregate.dur=10, rule=&#39;any&#39;)) # We can pre-compute the animation coordinates (otherwise they get calculated when # you generate the animation). Here &#39;animation.mode&#39; is the layout algorithm - # one of &quot;kamadakawai&quot;, &quot;MDSJ&quot;, &quot;Graphviz&quot;and &quot;useAttribute&quot; (user-generated). # Here &#39;slice.par&#39; is a list of parameters controlling how the network visualization # moves through time. The parameter &#39;interval&#39; is the time step between layouts, # &#39;aggregate.dur&#39; is the period shown in each layout, &#39;rule&#39; is the rule for # displaying elements (e.g. &#39;any&#39;: active at any point during that period, # &#39;all&#39;: active during the entire period, etc.) # Let&#39;s make an actual animation: compute.animation(net3.dyn, animation.mode = &quot;kamadakawai&quot;, slice.par=list(start=0, end=50, interval=1, aggregate.dur=1, rule=&#39;any&#39;)) render.d3movie(net3.dyn, usearrows = F, displaylabels = F, label=net3 %v% &quot;media&quot;, bg=&quot;#ffffff&quot;, vertex.border=&quot;#333333&quot;, vertex.cex = degree(net3)/2, vertex.col = net3.dyn %v% &quot;col&quot;, edge.lwd = (net3.dyn %e% &quot;weight&quot;)/3, edge.col = &#39;#55555599&#39;, vertex.tooltip = paste(&quot;&lt;b&gt;Name:&lt;/b&gt;&quot;, (net3.dyn %v% &quot;media&quot;) , &quot;&lt;br&gt;&quot;, &quot;&lt;b&gt;Type:&lt;/b&gt;&quot;, (net3.dyn %v% &quot;type.label&quot;) ), edge.tooltip = paste(&quot;&lt;b&gt;Edge type:&lt;/b&gt;&quot;, (net3.dyn %e% &quot;type&quot;), &quot;&lt;br&gt;&quot;, &quot;&lt;b&gt;Edge weight:&lt;/b&gt;&quot;, (net3.dyn %e% &quot;weight&quot; ) ), launchBrowser=T, filename=&quot;Media-Network-Dynamic.html&quot;, render.par=list(tween.frames = 30, show.time = F), plot.par=list(mar=c(0,0,0,0)) ) # In addition to dynamic nodes and edges, &#39;ndtv&#39; takes dynamic attributes. # We could have added those to the &#39;es&#39; and &#39;vs&#39; data frames above. # However, the plotting function can also evaluate parameters # and generate dynamic arguments on the fly. For example, # function(slice) { do some calculations with slice } will perform operations # on the current time slice network, letting us change parameters dynamically. # See the node size below: compute.animation(net3.dyn, animation.mode = &quot;kamadakawai&quot;, slice.par=list(start=0, end=50, interval=4, aggregate.dur=1, rule=&#39;any&#39;)) render.d3movie(net3.dyn, usearrows = F, displaylabels = F, label=net3 %v% &quot;media&quot;, bg=&quot;#000000&quot;, vertex.border=&quot;#dddddd&quot;, vertex.cex = function(slice){ degree(slice)/2.5 }, vertex.col = net3.dyn %v% &quot;col&quot;, edge.lwd = (net3.dyn %e% &quot;weight&quot;)/3, edge.col = &#39;#55555599&#39;, vertex.tooltip = paste(&quot;&lt;b&gt;Name:&lt;/b&gt;&quot;, (net3.dyn %v% &quot;media&quot;) , &quot;&lt;br&gt;&quot;, &quot;&lt;b&gt;Type:&lt;/b&gt;&quot;, (net3.dyn %v% &quot;type.label&quot;) ), edge.tooltip = paste(&quot;&lt;b&gt;Edge type:&lt;/b&gt;&quot;, (net3.dyn %e% &quot;type&quot;), &quot;&lt;br&gt;&quot;, &quot;&lt;b&gt;Edge weight:&lt;/b&gt;&quot;, (net3.dyn %e% &quot;weight&quot; ) ), launchBrowser=T, filename=&quot;Media-Network-even-more-Dynamic.html&quot;, render.par=list(tween.frames = 25, show.time = F) ) detach(&quot;package:ndtv&quot;) detach(&quot;package:sna&quot;) detach(&quot;package:networkDynamic&quot;) detach(&quot;package:network&quot;) # ================ 10. Plotting networks on a geographic map ================ # The example below plots a network on a map using base R and mapping libraries. # Note that for those familiar with it, the package &#39;ggplot2&#39; may provide # a more flexible way of doing this. Things there work similarly to below, # but you would use borders() to plot the map and geom_path() for the edges. rm(list = ls()) # clear the workspace # In order to plot on a map, we&#39;ll need two additional packages. # If you do not already have them, install those now: # install.packages(&quot;maps&quot;) # install.packages(&quot;geosphere&quot;) library(&quot;maps&quot;) library(&quot;geosphere&quot;) # Package &#39;maps&#39; has built-in maps it can plot for you. For example: # (&#39;col&#39; is map fill, &#39;border&#39; is border color, &#39;bg&#39; is background color) par(mfrow = c(2,2)) map(&quot;usa&quot;, col=&quot;tomato&quot;, border=&quot;gray10&quot;, fill=TRUE, bg=&quot;gray30&quot;) map(&quot;state&quot;, col=&quot;orange&quot;, border=&quot;gray10&quot;, fill=TRUE, bg=&quot;gray30&quot;) map(&quot;county&quot;, col=&quot;palegreen&quot;, border=&quot;gray10&quot;, fill=TRUE, bg=&quot;gray30&quot;) map(&quot;world&quot;, col=&quot;skyblue&quot;, border=&quot;gray10&quot;, fill=TRUE, bg=&quot;gray30&quot;) dev.off() # The data we will use contains US airports and flights among them. # The airport file includes info about latitude and longitude. # If we did not have those, we could use &#39;geocode()&#39; from &#39;ggmap&#39; # to get latitude and longitude for an address. airports &lt;- read.csv(&quot;./Data Files/Dataset3-Airlines-NODES.csv&quot;, header=TRUE) flights &lt;- read.csv(&quot;./Data Files/Dataset3-Airlines-EDGES.csv&quot;, header=TRUE, as.is=TRUE) head(flights) head(airports) # Select only large airports: ones with more than 10 connections in the data. tab &lt;- table(flights$Source) big.id &lt;- names(tab)[tab&gt;10] airports &lt;- airports[airports$ID %in% big.id,] flights &lt;- flights[flights$Source %in% big.id &amp; flights$Target %in% big.id, ] # Plot a map of the united states: map(&quot;state&quot;, col=&quot;grey20&quot;, fill=TRUE, bg=&quot;black&quot;, lwd=0.1) # Add a point on the map for each airport: points(x=airports$longitude, y=airports$latitude, pch=19, cex=airports$Visits/80, col=&quot;orange&quot;) # Generate edge colors: lighter color means higher flight volume. col.1 &lt;- adjustcolor(&quot;orange red&quot;, alpha=0.4) col.2 &lt;- adjustcolor(&quot;orange&quot;, alpha=0.4) edge.pal &lt;- colorRampPalette(c(col.1, col.2), alpha = TRUE) edge.col &lt;- edge.pal(100) # For each flight, we will generate the coordinates of an arc that connects # its star and end point, using gcIntermediate() from package &#39;geosphere&#39;. # Then we will plot that arc over the map using lines(). for(i in 1:nrow(flights)) { node1 &lt;- airports[airports$ID == flights[i,]$Source,] node2 &lt;- airports[airports$ID == flights[i,]$Target,] arc &lt;- gcIntermediate( c(node1[1,]$longitude, node1[1,]$latitude), c(node2[1,]$longitude, node2[1,]$latitude), n=1000, addStartEnd=TRUE ) edge.ind &lt;- round(100*flights[i,]$Freq / max(flights$Freq)) lines(arc, col=edge.col[edge.ind], lwd=edge.ind/30) } # ================ |-------------| ================ 2.7.1.1 Reference Network visualization with R: http://www.kateto.net/polnet2018 "],
["correlation.html", "3 Correlation 3.1 Visulization of pair-wise correlation in R 3.2 Correlation and p-values of all combinations of all rows of two matrices 3.3 Different ways to visulize correlation 3.4 Reference", " 3 Correlation 3.1 Visulization of pair-wise correlation in R 3.2 Correlation and p-values of all combinations of all rows of two matrices 3.2.1 Prepare the data bac1 &lt;- c(1,2,3,4,5) bac2 &lt;- c(2,3,4,5,1) bac3 &lt;- c(4,5,1,2,3) bac4 &lt;- c(5,1,2,3,4) bac &lt;- as.data.frame(cbind(bac1, bac2, bac3, bac4 )) colnames(bac) &lt;- c(&quot;station1&quot;, &quot;station2&quot;, &quot;station3&quot;, &quot;station4&quot;) rownames(bac) &lt;- c(&quot;bac1&quot;, &quot;bac2&quot;, &quot;bac3&quot;, &quot;bac4&quot;, &quot;bac5&quot;) fac1 &lt;- c(1,2,3,4,5,6) fac2 &lt;- c(2,3,4,5,1,6) fac3&lt;- c(3,4,5,1,2,1) fac4&lt;- c(4,5,1,2,3, 6) fac &lt;- as.data.frame(cbind(fac1, fac2, fac3, fac4)) colnames(fac) &lt;- c(&quot;station1&quot;, &quot;station2&quot;, &quot;station3&quot;, &quot;station4&quot;) rownames(fac) &lt;- c(&quot;fac1&quot;, &quot;fac2&quot;, &quot;fac3&quot;, &quot;fac4&quot;, &quot;fac5&quot;, &quot;fac6&quot;) bac ## station1 station2 station3 station4 ## bac1 1 2 4 5 ## bac2 2 3 5 1 ## bac3 3 4 1 2 ## bac4 4 5 2 3 ## bac5 5 1 3 4 fac ## station1 station2 station3 station4 ## fac1 1 2 3 4 ## fac2 2 3 4 5 ## fac3 3 4 5 1 ## fac4 4 5 1 2 ## fac5 5 1 2 3 ## fac6 6 6 1 6 3.2.2 Another way to do this is to use corr.test You can just pass the full matrices to the cor function (or psych::corr.test)and it takes care of finding the correlation of the relevant columns. #install.packages(&quot;psych&quot;) library(reshape2) #cor.eff&lt;-cor(t(fac), t(bac)) #coreff &lt;- reshape2::melt(cor.eff) pval &lt;- psych::corr.test(t(fac), t(bac), adjust=&quot;fdr&quot;) pval ## Call:psych::corr.test(x = t(fac), y = t(bac), adjust = &quot;fdr&quot;) ## Correlation matrix ## bac1 bac2 bac3 bac4 bac5 ## fac1 0.99 -0.08 -0.60 -0.60 -0.08 ## fac2 0.99 -0.08 -0.60 -0.60 -0.08 ## fac3 -0.32 0.94 -0.08 -0.08 -0.49 ## fac4 -0.80 -0.32 0.99 0.99 -0.32 ## fac5 -0.32 -0.49 -0.08 -0.08 0.94 ## fac6 -0.37 -0.88 0.77 0.77 0.10 ## Sample Size ## [1] 4 ## Probability values adjusted for multiple tests. ## bac1 bac2 bac3 bac4 bac5 ## fac1 0.08 0.92 0.86 0.86 0.92 ## fac2 0.08 0.92 0.86 0.86 0.92 ## fac3 0.92 0.29 0.92 0.92 0.92 ## fac4 0.68 0.92 0.08 0.08 0.92 ## fac5 0.92 0.92 0.92 0.92 0.29 ## fac6 0.92 0.52 0.68 0.68 0.92 ## ## To see confidence intervals of the correlations, print with the short=FALSE option cor_pval&lt;- merge(melt(pval$r, value.name=&quot;cor&quot;), melt(pval$p, value.name=&quot;p-value&quot;), by=c(&quot;Var1&quot;, &quot;Var2&quot;)) head(cor_pval) ## Var1 Var2 cor p-value ## 1 fac1 bac1 0.98994949 0.0753788 ## 2 fac1 bac2 -0.07559289 0.9244071 ## 3 fac1 bac3 -0.60000000 0.8571429 ## 4 fac1 bac4 -0.60000000 0.8571429 ## 5 fac1 bac5 -0.07559289 0.9244071 ## 6 fac2 bac1 0.98994949 0.0753788 3.2.3 Read data data/cor_data_metablomics.txt data/cor_data_transcriptome.txt 3.2.4 Calculate the correlation (Advance) tbac &lt;- data.frame(t(bac)) tfac &lt;- data.frame(t(fac)) f &lt;- function (x, y) cor(x, y) pval &lt;- function(x, y) cor.test(x, y)$p.val tab &lt;- outer(tfac, tbac, Vectorize(f)) tabp&lt;-outer(tfac, tbac, Vectorize(pval)) as.data.frame.table(tabp) ## Var1 Var2 Freq ## 1 fac1 bac1 0.01005051 ## 2 fac2 bac1 0.01005051 ## 3 fac3 bac1 0.67928651 ## 4 fac4 bac1 0.20000000 ## 5 fac5 bac1 0.67928651 ## 6 fac6 bac1 0.63485163 ## 7 fac1 bac2 0.92440711 ## 8 fac2 bac2 0.92440711 ## 9 fac3 bac2 0.05714286 ## 10 fac4 bac2 0.67928651 ## 11 fac5 bac2 0.51428571 ## 12 fac6 bac2 0.12168993 ## 13 fac1 bac3 0.40000000 ## 14 fac2 bac3 0.40000000 ## 15 fac3 bac3 0.92440711 ## 16 fac4 bac3 0.01005051 ## 17 fac5 bac3 0.92440711 ## 18 fac6 bac3 0.22540333 ## 19 fac1 bac4 0.40000000 ## 20 fac2 bac4 0.40000000 ## 21 fac3 bac4 0.92440711 ## 22 fac4 bac4 0.01005051 ## 23 fac5 bac4 0.92440711 ## 24 fac6 bac4 0.22540333 ## 25 fac1 bac5 0.92440711 ## 26 fac2 bac5 0.92440711 ## 27 fac3 bac5 0.51428571 ## 28 fac4 bac5 0.67928651 ## 29 fac5 bac5 0.05714286 ## 30 fac6 bac5 0.90240999 3.2.5 Reference Correlation/p values of all combinations of all rows of two matrices: https://stackoverflow.com/questions/41793219/correlation-p-values-of-all-combinations-of-all-rows-of-two-matrices 3.3 Different ways to visulize correlation 3.3.1 Display correlation using chart.Correlation in PerformanceAnalytics library(datasets) data(iris) library(&quot;PerformanceAnalytics&quot;) ## Loading required package: xts ## Loading required package: zoo ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric ## ## Attaching package: &#39;PerformanceAnalytics&#39; ## The following object is masked from &#39;package:graphics&#39;: ## ## legend chart.Correlation(iris[, 1:4], histogram=TRUE, pch=19) library(corrplot) ## corrplot 0.84 loaded corrplot.mixed(cor(iris[, 1:4]), order=&quot;original&quot;, tl.col=&quot;black&quot;) 3.4 Reference Seven Easy Graphs to Visualize Correlation Matrices in R: http://jamesmarquezportfolio.com/correlation_matrices_in_r.html Example 9.17: (much) better pairs plots: https://www.r-bloggers.com/example-9-17-much-better-pairs-plots/ Introduction to Correlation: https://rpubs.com/aaronsc32/linear-relationship-pearson-r-correlation Spearman Rank Correlation: https://rstudio-pubs-static.s3.amazonaws.com/191093_4169c5282eb145a491a5b1924941a6ba.html "],
["standard-deviation-vs-standard-error.html", "4 Standard deviation vs Standard error 4.1 Reference", " 4 Standard deviation vs Standard error 4.1 Reference https://datascienceplus.com/standard-deviation-vs-standard-error/ "],
["t-test.html", "5 T test 5.1 Calculate t-statistic step by step in R 5.2 Calculate the standard deviation in R 5.3 Reference", " 5 T test 5.1 Calculate t-statistic step by step in R #load dataset library(reshape2) data(tips) #create tip percent variable tips$percent=tips$tip/tips$total_bill #Split dataset for ease splits&lt;-split(tips, tips$sex) #Save data sets women&lt;-splits[[1]] men&lt;-splits[[2]] #variance by group sample size var_women&lt;-var(women$percent)/length(women$percent) var_men&lt;-var(men$percent)/length(men$percent) #Sum total_variance&lt;-var_women+var_men #Squre Root sqrt_variance&lt;-sqrt(total_variance) #Group means by pooled variances (mean(women$percent)-mean(men$percent))/sqrt_variance ## [1] 1.143277 #T.test t.test(percent~sex, data=tips) ## ## Welch Two Sample t-test ## ## data: percent by sex ## t = 1.1433, df = 206.76, p-value = 0.2542 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -0.006404119 0.024084498 ## sample estimates: ## mean in group Female mean in group Male ## 0.1664907 0.1576505 5.1.1 Your data set is probably not the best illustrative example in terms of normality assumption… but anyway, here is some quick R code to reproduce some of the calculation of t.test(). 5.1.1.1 Equal variances head(tips) ## total_bill tip sex smoker day time size percent ## 1 16.99 1.01 Female No Sun Dinner 2 0.05944673 ## 2 10.34 1.66 Male No Sun Dinner 3 0.16054159 ## 3 21.01 3.50 Male No Sun Dinner 3 0.16658734 ## 4 23.68 3.31 Male No Sun Dinner 2 0.13978041 ## 5 24.59 3.61 Female No Sun Dinner 4 0.14680765 ## 6 25.29 4.71 Male No Sun Dinner 4 0.18623962 t.test(percent ~ sex, data=tips, var.equal=TRUE) ## ## Two Sample t-test ## ## data: percent by sex ## t = 1.0834, df = 242, p-value = 0.2797 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -0.007232898 0.024913277 ## sample estimates: ## mean in group Female mean in group Male ## 0.1664907 0.1576505 x1 &lt;- tips$percent[tips$sex == &quot;Female&quot;] x2 &lt;- tips$percent[tips$sex == &quot;Male&quot;] n1 &lt;- length(x1) n2 &lt;- length(x2) var.pooled &lt;- weighted.mean(x=c(var(x1), var(x2)), w=c(n1 - 1, n2 - 1)) t &lt;- (mean(x1) - mean(x2)) / sqrt(var.pooled / n1 + var.pooled / n2) t ## [1] 1.083397 df &lt;- n1 + n2 - 2 df ## [1] 242 5.1.1.2 Unequal variance t.test(percent ~ sex, data=tips, var.equal=FALSE) ## ## Welch Two Sample t-test ## ## data: percent by sex ## t = 1.1433, df = 206.76, p-value = 0.2542 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -0.006404119 0.024084498 ## sample estimates: ## mean in group Female mean in group Male ## 0.1664907 0.1576505 # Welch Two Sample t-test # # data: percent by sex # t = 1.1433, df = 206.759, p-value = 0.2542 # alternative hypothesis: true difference in means is not equal to 0 # 95 percent confidence interval: # -0.006404119 0.024084498 # sample estimates: # mean in group Female mean in group Male # 0.1664907 0.1576505 x1 &lt;- tips$percent[tips$sex == &quot;Female&quot;] x2 &lt;- tips$percent[tips$sex == &quot;Male&quot;] n1 &lt;- length(x1) n2 &lt;- length(x2) t &lt;- (mean(x1) - mean(x2)) / sqrt(var(x1) / n1 + var(x2) / n2) t ## [1] 1.143277 # [1] 1.143277 df.num &lt;- (var(x1) / n1 + var(x2) / n2)^2 df.denom &lt;- var(x1)^2 / (n1^2 * (n1 - 1)) + var(x2)^2 / (n2^2 * (n2 - 1)) df &lt;- df.num / df.denom df ## [1] 206.7587 # [1] 206.7587 5.2 Calculate the standard deviation in R \\(variance = \\frac{sum((x-mean(x))^2)}{(length(x)-1)}\\) a &lt;- c(179,160,136,227) sd(a) ## [1] 38.57892 sqrt(sum((a-mean(a))^2/(length(a)-1))) ## [1] 38.57892 5.3 Reference Calculate t-statistic step by step in R: https://stats.stackexchange.com/questions/141593/calculate-t-statistic-step-by-step-in-r "],
["linear-model.html", "6 Linear model 6.1 6.2 Extract male data 6.3 Reference", " 6 Linear model While the assumtions of a linear model are never perfectly met, we must still check if they are reasonable assumtions to work with. 6.1 ## Data from https://github.com/thomas-haslwanter/statsintro_python/blob/master/ISP/Code_Quantlets/08_TestsMeanValues/anovaOneway/galton.csv tab&lt;-read.csv(&quot;data/galton.csv&quot;) head(tab) ## family father mother sex height nkids ## 1 1 78.5 67.0 M 73.2 4 ## 2 1 78.5 67.0 F 69.2 4 ## 3 1 78.5 67.0 F 69.0 4 ## 4 1 78.5 67.0 F 69.0 4 ## 5 2 75.5 66.5 M 73.5 4 ## 6 2 75.5 66.5 M 72.5 4 6.2 Extract male data tab_son = tab[tab$sex==&quot;M&quot;, ] head(tab_son) ## family father mother sex height nkids ## 1 1 78.5 67.0 M 73.2 4 ## 5 2 75.5 66.5 M 73.5 4 ## 6 2 75.5 66.5 M 72.5 4 ## 9 3 75.0 64.0 M 71.0 2 ## 11 4 75.0 64.0 M 70.5 5 ## 12 4 75.0 64.0 M 68.5 5 plot(father~height, data=tab_son) 6.3 Reference How to apply Linear Regression in R: https://datascienceplus.com/how-to-apply-linear-regression-in-r/ R for Data Science: https://r4ds.had.co.nz/model-basics.html#a-simple-model "],
["mrg.html", "7 MRG 7.1 Read the data", " 7 MRG Sir Francis Galton (1822–1911) was an English statistician. He founded many concepts in statistics, such as correlation, quartile, percentile and regression, that are still being used today. 7.1 Read the data Consider the data collected by Francis Galton in the 1880s, stored in a modern format in the galton.csv file. In this file, heights is the variable containing the child’s heights, while the father’s and mother’s height is contained in the variables father and mother. The family variable is a numerical code identifying children in the same family; the number of kids in this family is in nkids. ## Data from https://github.com/thomas-haslwanter/statsintro_python/blob/master/ISP/Code_Quantlets/08_TestsMeanValues/anovaOneway/galton.csv tab&lt;-read.csv(&quot;data/galton.csv&quot;) head(tab) ## family father mother sex height nkids ## 1 1 78.5 67.0 M 73.2 4 ## 2 1 78.5 67.0 F 69.2 4 ## 3 1 78.5 67.0 F 69.0 4 ## 4 1 78.5 67.0 F 69.0 4 ## 5 2 75.5 66.5 M 73.5 4 ## 6 2 75.5 66.5 M 72.5 4 Check the number of rows and columns: dim(tab) ## [1] 898 6 Covert the column of sex into numberic values: tab$sex=as.numeric(tab$sex) -1 head(tab) ## family father mother sex height nkids ## 1 1 78.5 67.0 1 73.2 4 ## 2 1 78.5 67.0 0 69.2 4 ## 3 1 78.5 67.0 0 69.0 4 ## 4 1 78.5 67.0 0 69.0 4 ## 5 2 75.5 66.5 1 73.5 4 ## 6 2 75.5 66.5 1 72.5 4 Remove the columns of nkids: tab&lt;-tab[, -c(6)] head(tab) ## family father mother sex height ## 1 1 78.5 67.0 1 73.2 ## 2 1 78.5 67.0 0 69.2 ## 3 1 78.5 67.0 0 69.0 ## 4 1 78.5 67.0 0 69.0 ## 5 2 75.5 66.5 1 73.5 ## 6 2 75.5 66.5 1 72.5 "],
["multiple-linear-regression.html", "8 Multiple linear regression 8.1 8.2 ", " 8 Multiple linear regression 8.1 Descriptions of the data: https://stat.ethz.ch/R-manual/R-patched/library/datasets/html/airquality.html Daily air quality measurements in New York, May to September 1973. data(&quot;airquality&quot;) names(airquality) ## [1] &quot;Ozone&quot; &quot;Solar.R&quot; &quot;Wind&quot; &quot;Temp&quot; &quot;Month&quot; &quot;Day&quot; require(graphics) pairs(airquality, panel = panel.smooth, main = &quot;airquality data&quot;) A formula of the form y ~ x | a indicates that plots of y versus x should be produced conditional on the variable a. A formula of the form y ~ x| a * b indicates that plots of y versus x should be produced conditional on the two variables a and b coplot(Ozone~Solar.R|Wind, panel = panel.smooth, airquality) ## ## Missing rows: 5, 6, 10, 11, 25, 26, 27, 32, 33, 34, 35, 36, 37, 39, 42, 43, 45, 46, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 72, 75, 83, 84, 96, 97, 98, 102, 103, 107, 115, 119, 150 model2 = lm(Ozone~Solar.R*Wind, airquality) par(mfrow=c(2,2)) # Change the panel layout to 2 x 2 plot(model2) par(mfrow=c(1,1)) # Change back to 1 x 1 Residuals vs Fitted This plot shows if residuals have non-linear patterns. There could be a non-linear relationship between predictor variables and an outcome variable and the pattern could show up in this plot if the model doesn’t capture the non-linear relationship. If you find equally spread residuals around a horizontal line without distinct patterns, that is a good indication you don’t have non-linear relationships. Normal Q-Q This plot shows if residuals are normally distributed. Do residuals follow a straight line well or do they deviate severely? It’s good if residuals are lined well on the straight dashed line. Scale-Location It’s also called Spread-Location plot. This plot shows if residuals are spread equally along the ranges of predictors. This is how you can check the assumption of equal variance (homoscedasticity). It’s good if you see a horizontal line with equally (randomly) spread points. Residuals vs Leverage This plot helps us to find influential cases (i.e., subjects) if any. Not all outliers are influential in linear regression analysis (whatever outliers mean). Even though data have extreme values, they might not be influential to determine a regression line. That means, the results wouldn’t be much different if we either include or exclude them from analysis. They follow the trend in the majority of cases and they don’t really matter; they are not influential. On the other hand, some cases could be very influential even if they look to be within a reasonable range of the values. They could be extreme cases against a regression line and can alter the results if we exclude them from analysis. Another way to put it is that they don’t get along with the trend in the majority of the cases. Unlike the other plots, this time patterns are not relevant. We watch out for outlying values at the upper right corner or at the lower right corner. Those spots are the places where cases can be influential against a regression line. Look for cases outside of a dashed line, Cook’s distance. When cases are outside of the Cook’s distance (meaning they have high Cook’s distance scores), the cases are influential to the regression results. The regression results will be altered if we exclude those cases. #install.packages(&quot;UsingR&quot;) suppressWarnings(suppressMessages(library(UsingR))) data(father.son) names(father.son) ## [1] &quot;fheight&quot; &quot;sheight&quot; model_fs = lm(fheight~sheight, father.son) par(mfrow=c(2,2)) # Change the panel layout to 2 x 2 plot(model_fs) 8.2 summary(model2) ## ## Call: ## lm(formula = Ozone ~ Solar.R * Wind, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -48.694 -17.200 -4.384 12.740 78.218 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 34.467686 17.634602 1.955 0.053246 . ## Solar.R 0.324141 0.083928 3.862 0.000193 *** ## Wind -1.594546 1.508979 -1.057 0.293026 ## Solar.R:Wind -0.020279 0.007246 -2.799 0.006089 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 24.16 on 107 degrees of freedom ## (42 observations deleted due to missingness) ## Multiple R-squared: 0.487, Adjusted R-squared: 0.4727 ## F-statistic: 33.86 on 3 and 107 DF, p-value: 1.807e-15 par(mfrow=c(1,2)) # Change back to 1 x 1 termplot(model2, partial.resid=TRUE, col.res = &quot;royalblue&quot;) ## Warning in termplot(model2, partial.resid = TRUE, col.res = &quot;royalblue&quot;): ## &#39;model&#39; appears to involve interactions: see the help page summary(airquality$Solar.R) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 7.0 115.8 205.0 185.9 258.8 334.0 7 summary(airquality$Wind) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.700 7.400 9.700 9.958 11.500 20.700 Solar1 = mean(airquality$Solar.R, na.rm=T) Solar2 = 100 Solar3 = 300 p1 = predict(model2, data.frame(Solar.R=Solar1, Wind=1:20)) p2 = predict(model2, data.frame(Solar.R=Solar2, Wind=1:20)) p3 = predict(model2, data.frame(Solar.R=Solar3, Wind=1:20)) p1 ## 1 2 3 4 5 6 ## 89.370627 84.005541 78.640456 73.275370 67.910285 62.545199 ## 7 8 9 10 11 12 ## 57.180113 51.815028 46.449942 41.084856 35.719771 30.354685 ## 13 14 15 16 17 18 ## 24.989600 19.624514 14.259428 8.894343 3.529257 -1.835829 ## 19 20 ## -7.200914 -12.566000 plot(Ozone~Wind, airquality, col=&quot;grey&quot;) lines(p1, col=&quot;red&quot;) lines(p2, col=&quot;blue&quot;) lines(p3, col=&quot;darkgreen&quot;) "],
["bayesian-newwork-in-r.html", "9 Bayesian newwork in R 9.1 Practical experiments", " 9 Bayesian newwork in R Bayesian networks (BNs) are a type of graphical model that encode the conditional probability between different learning variables in a directed acyclic graph. There are benefits to using BNs compared to other unsupervised machine learning techniques. A few of these benefits are: It is easy to exploit expert knowledge in BN models. BN models have been found to be very robust in the sense of noisy data, missing data and sparse data. Unlike many machine learning models (including Artificial Neural Network), which usually appear as a “black box,” all the parameters in BNs have an understandable semantic interpretation. #install.packages(&quot;bnlearn&quot;) 9.1 Practical experiments 9.1.1 Analysis of the MAGIC population in Scutari et al., Genetics (2014) 9.1.1.1 Reading and preprocessing the data #install.packages(lme4) #install.packages(&quot;bnlearn&quot;) library(lme4) ## Loading required package: Matrix library(bnlearn) ## ## Attaching package: &#39;bnlearn&#39; ## The following object is masked from &#39;package:Hmisc&#39;: ## ## impute ## The following object is masked from &#39;package:stats&#39;: ## ## sigma library(parallel) # load the data. ## http://www.bnlearn.com/research/genetics14/prepd-magic.txt.xz xzfd = xzfile(&quot;data/prepd-magic.txt.xz&quot;, open = &quot;r&quot;) magic = read.table(xzfd, header = TRUE, colClasses = c(rep(&quot;factor&quot;, 4), rep(&quot;numeric&quot;, 3164))) close(xzfd) head(magic) ## ID FUNNEL PLANT LINE YR.GLASS YLD HT YR.FIELD FUS MIL FT ## 1 MEL_001-1b 1 1 b 2.679 7.547 80 2 3 3 37 ## 2 MEL_001-2b 1 2 b 1.275 6.770 92 5 2 1 26 ## 3 MEL_002-1 2 1 a 2.815 8.006 80 3 3 4 30 ## 4 MEL_002-3 2 3 a 1.567 8.082 82 2 2 1 29 ## 5 MEL_002-5-A 2 5 a 3.019 7.831 68 6 4 3 NA ## 6 MEL_002-7-B 2 7 a 2.583 7.491 78 3 4 5 NA ## BobWhite_c10082_241 BobWhite_c10126_263 BobWhite_c10140_297 ## 1 2 0 1 ## 2 2 0 1 ## 3 2 0 0 ## 4 2 0 2 ## 5 2 0 0 ## 6 2 2 2 ## BobWhite_c10238_127 BobWhite_c1027_360 BobWhite_c1027_474 ## 1 2 0 0 ## 2 2 0 0 ## 3 2 0 0 ## 4 2 0 2 ## 5 2 0 0 ## 6 2 0 0 ## BobWhite_c10343_320 BobWhite_c10385_374 BobWhite_c10399_401 ## 1 0 2 1 ## 2 0 2 2 ## 3 2 0 2 ## 4 0 0 2 ## 5 2 0 1 ## 6 0 0 2 ## BobWhite_c10402_170 BobWhite_c10476_790 BobWhite_c10583_352 ## 1 0 0 2 ## 2 0 0 2 ## 3 2 1 2 ## 4 2 0 1 ## 5 0 2 2 ## 6 2 0 0 ## BobWhite_c1059_1825 BobWhite_c10614_157 BobWhite_c10673_138 ## 1 2 2 2 ## 2 1 2 2 ## 3 0 2 2 ## 4 2 2 2 ## 5 2 2 0 ## 6 0 2 2 ## BobWhite_c10740_179 BobWhite_c1082_134 BobWhite_c10832_1131 ## 1 2 0 2 ## 2 2 0 2 ## 3 0 0 0 ## 4 2 2 2 ## 5 0 0 0 ## 6 2 0 2 ## BobWhite_c1085_412 BobWhite_c10864_436 BobWhite_c10896_923 ## 1 0 0 0 ## 2 2 0 0 ## 3 2 0 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 2 0 0 ## BobWhite_c10921_1183 BobWhite_c1093_494 BobWhite_c11005_236 ## 1 1 2 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 2 2 0 ## 5 0 0 0 ## 6 0 2 0 ## BobWhite_c11038_605 BobWhite_c11044_322 BobWhite_c11153_266 ## 1 2 0 0 ## 2 2 0 0 ## 3 2 0 0 ## 4 2 0 1 ## 5 2 0 0 ## 6 2 0 2 ## BobWhite_c11154_279 BobWhite_c11235_370 BobWhite_c11298_512 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 2 2 ## 4 0 2 0 ## 5 0 2 2 ## 6 0 2 2 ## BobWhite_c11301_226 BobWhite_c1131_328 BobWhite_c11327_185 ## 1 2 2 2 ## 2 2 2 0 ## 3 2 2 0 ## 4 2 2 0 ## 5 2 2 0 ## 6 2 2 0 ## BobWhite_c11374_530 BobWhite_c11397_231 BobWhite_c11480_1370 ## 1 0 0 2 ## 2 2 0 2 ## 3 0 2 2 ## 4 2 0 2 ## 5 2 2 2 ## 6 1 2 2 ## BobWhite_c1149_539 BobWhite_c11512_157 BobWhite_c11539_336 ## 1 2 2 0 ## 2 2 2 0 ## 3 2 2 2 ## 4 2 2 0 ## 5 2 2 0 ## 6 0 2 2 ## BobWhite_c11540_60 BobWhite_c11562_133 BobWhite_c11652_421 ## 1 2 2 0 ## 2 0 2 0 ## 3 0 2 2 ## 4 2 1 0 ## 5 0 2 2 ## 6 0 2 0 ## BobWhite_c11692_148 BobWhite_c11756_79 BobWhite_c11808_975 ## 1 0 0 2 ## 2 0 2 2 ## 3 0 0 2 ## 4 0 0 2 ## 5 0 2 2 ## 6 0 2 1 ## BobWhite_c11811_327 BobWhite_c11861_557 BobWhite_c11946_277 ## 1 2 0 2 ## 2 1 0 2 ## 3 2 0 2 ## 4 2 0 2 ## 5 0 0 2 ## 6 0 2 2 ## BobWhite_c1196_297 BobWhite_c1201_384 BobWhite_c12013_275 ## 1 2 2 0 ## 2 0 2 0 ## 3 0 0 2 ## 4 2 2 2 ## 5 0 2 0 ## 6 0 0 0 ## BobWhite_c12032_371 BobWhite_c12078_316 BobWhite_c12090_117 ## 1 0 2 2 ## 2 0 0 2 ## 3 0 2 2 ## 4 0 2 0 ## 5 0 0 2 ## 6 0 0 2 ## BobWhite_c1215_240 BobWhite_c12252_476 BobWhite_c12256_96 ## 1 2 2 0 ## 2 2 0 2 ## 3 2 0 2 ## 4 0 0 0 ## 5 0 2 0 ## 6 2 2 2 ## BobWhite_c12281_752 BobWhite_c12316_383 BobWhite_c12343_253 ## 1 2 0 2 ## 2 2 0 0 ## 3 1 0 2 ## 4 2 0 0 ## 5 0 0 0 ## 6 2 0 1 ## BobWhite_c12355_1548 BobWhite_c12428_371 BobWhite_c12568_900 ## 1 2 2 2 ## 2 2 2 2 ## 3 2 2 2 ## 4 0 2 2 ## 5 0 2 2 ## 6 2 2 2 ## BobWhite_c12593_361 BobWhite_c1265_607 BobWhite_c12841_56 ## 1 2 0 2 ## 2 0 0 2 ## 3 2 0 2 ## 4 2 0 2 ## 5 2 0 0 ## 6 2 0 0 ## BobWhite_c12846_196 BobWhite_c12859_257 BobWhite_c12883_272 ## 1 0 0 0 ## 2 0 0 2 ## 3 2 0 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 2 0 0 ## BobWhite_c12908_381 BobWhite_c12911_788 BobWhite_c13030_406 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 2 0 ## 4 2 0 2 ## 5 2 2 2 ## 6 0 2 0 ## BobWhite_c13099_755 BobWhite_c13156_773 BobWhite_c13202_399 ## 1 0 2 2 ## 2 2 2 0 ## 3 2 0 2 ## 4 1 0 0 ## 5 2 0 0 ## 6 0 2 0 ## BobWhite_c13238_386 BobWhite_c13435_700 BobWhite_c13450_2100 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 0 2 ## 4 2 1 2 ## 5 2 2 2 ## 6 0 2 2 ## BobWhite_c13525_262 BobWhite_c1372_133 BobWhite_c13845_195 ## 1 0 2 0 ## 2 0 2 0 ## 3 0 2 0 ## 4 2 2 0 ## 5 0 2 0 ## 6 0 0 0 ## BobWhite_c1387_798 BobWhite_c13977_91 BobWhite_c14028_182 ## 1 2 2 0 ## 2 2 1 0 ## 3 0 0 0 ## 4 0 2 0 ## 5 0 2 0 ## 6 0 0 2 ## BobWhite_c14066_403 BobWhite_c14076_98 BobWhite_c14271_1379 ## 1 2 0 0 ## 2 2 2 0 ## 3 2 2 0 ## 4 0 0 0 ## 5 2 2 0 ## 6 2 2 0 ## BobWhite_c14291_666 BobWhite_c14365_59 BobWhite_c14409_206 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 1 0 ## 4 0 0 0 ## 5 2 2 2 ## 6 2 0 2 ## BobWhite_c1441_1123 BobWhite_c14486_122 BobWhite_c1456_615 ## 1 2 2 0 ## 2 2 0 2 ## 3 2 0 0 ## 4 2 0 2 ## 5 2 0 1 ## 6 2 0 0 ## BobWhite_c14575_323 BobWhite_c14705_487 BobWhite_c14812_828 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 0 2 ## 4 2 0 2 ## 5 2 0 2 ## 6 2 0 2 ## BobWhite_c14882_143 BobWhite_c14915_156 BobWhite_c1523_269 ## 1 2 0 2 ## 2 2 0 2 ## 3 0 2 2 ## 4 0 1 0 ## 5 2 2 2 ## 6 2 0 2 ## BobWhite_c15241_604 BobWhite_c15312_405 BobWhite_c15454_63 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 2 2 ## 4 2 2 2 ## 5 0 2 2 ## 6 0 2 2 ## BobWhite_c15476_88 BobWhite_c15529_288 BobWhite_c1562_246 ## 1 2 0 0 ## 2 0 0 0 ## 3 0 0 2 ## 4 0 2 2 ## 5 0 2 2 ## 6 0 2 0 ## BobWhite_c1562_369 BobWhite_c15653_484 BobWhite_c15758_79 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 0 1 ## 4 0 0 2 ## 5 0 0 2 ## 6 0 0 2 ## BobWhite_c15763_205 BobWhite_c15773_166 BobWhite_c15796_315 ## 1 0 2 2 ## 2 0 2 0 ## 3 0 2 2 ## 4 0 1 2 ## 5 2 0 0 ## 6 0 2 0 ## BobWhite_c15802_72 BobWhite_c15867_215 BobWhite_c15977_107 ## 1 0 2 2 ## 2 0 2 2 ## 3 2 2 2 ## 4 0 2 2 ## 5 2 0 2 ## 6 0 0 2 ## BobWhite_c160_276 BobWhite_c16005_289 BobWhite_c16301_60 ## 1 0 2 1 ## 2 0 0 1 ## 3 2 1 2 ## 4 0 2 0 ## 5 0 0 0 ## 6 2 2 0 ## BobWhite_c1635_691 BobWhite_c16397_524 BobWhite_c16439_1102 ## 1 0 2 2 ## 2 0 0 2 ## 3 0 0 0 ## 4 0 0 1 ## 5 0 2 0 ## 6 0 2 2 ## BobWhite_c1656_186 BobWhite_c16578_171 BobWhite_c16635_331 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 2 0 ## 4 0 2 2 ## 5 0 0 0 ## 6 0 2 2 ## BobWhite_c16667_296 BobWhite_c16792_432 BobWhite_c16824_151 ## 1 0 0 0 ## 2 2 0 0 ## 3 0 0 0 ## 4 0 0 0 ## 5 2 0 2 ## 6 0 2 0 ## BobWhite_c16847_99 BobWhite_c16907_477 BobWhite_c16923_64 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 2 0 ## 4 0 2 2 ## 5 0 2 2 ## 6 0 2 2 ## BobWhite_c16987_106 BobWhite_c17045_186 BobWhite_c17095_237 ## 1 0 0 2 ## 2 0 2 2 ## 3 0 0 2 ## 4 0 2 2 ## 5 0 2 2 ## 6 2 0 2 ## BobWhite_c17220_314 BobWhite_c17385_55 BobWhite_c17386_221 ## 1 0 0 2 ## 2 2 0 2 ## 3 2 0 2 ## 4 2 0 2 ## 5 2 0 2 ## 6 0 0 2 ## BobWhite_c1740_97 BobWhite_c17457_89 BobWhite_c17467_129 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 2 2 ## 4 0 2 2 ## 5 0 2 2 ## 6 0 0 2 ## BobWhite_c1763_558 BobWhite_c17644_456 BobWhite_c17845_132 ## 1 0 2 0 ## 2 0 2 0 ## 3 2 1 0 ## 4 0 2 0 ## 5 0 2 0 ## 6 2 2 0 ## BobWhite_c17852_511 BobWhite_c17879_519 BobWhite_c1796_701 ## 1 0 2 0 ## 2 0 0 2 ## 3 1 2 0 ## 4 0 2 0 ## 5 0 2 0 ## 6 0 2 2 ## BobWhite_c18017_209 BobWhite_c1802_456 BobWhite_c18136_441 ## 1 0 0 0 ## 2 0 0 0 ## 3 2 0 0 ## 4 2 1 0 ## 5 2 0 0 ## 6 2 0 0 ## BobWhite_c18256_105 BobWhite_c18256_158 BobWhite_c18406_110 ## 1 2 0 2 ## 2 0 0 2 ## 3 1 0 2 ## 4 0 0 2 ## 5 0 0 0 ## 6 0 0 0 ## BobWhite_c18408_199 BobWhite_c18506_419 BobWhite_c18540_351 ## 1 0 0 2 ## 2 2 0 2 ## 3 0 0 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 0 2 2 ## BobWhite_c18550_159 BobWhite_c18593_955 BobWhite_c18721_190 ## 1 1 2 2 ## 2 0 0 2 ## 3 2 0 0 ## 4 0 0 2 ## 5 2 0 0 ## 6 0 0 2 ## BobWhite_c18852_91 BobWhite_c18881_338 BobWhite_c18906_680 ## 1 0 2 0 ## 2 2 2 0 ## 3 2 2 0 ## 4 1 0 0 ## 5 0 0 0 ## 6 2 2 0 ## BobWhite_c1895_1953 BobWhite_c1905_98 BobWhite_c1907_124 ## 1 2 2 0 ## 2 2 0 0 ## 3 2 2 2 ## 4 2 0 2 ## 5 2 2 2 ## 6 2 0 0 ## BobWhite_c19346_434 BobWhite_c19433_329 BobWhite_c19497_606 ## 1 0 0 0 ## 2 2 0 0 ## 3 0 0 0 ## 4 0 0 0 ## 5 0 2 2 ## 6 0 2 0 ## BobWhite_c1967_175 BobWhite_c19733_149 BobWhite_c19752_293 ## 1 2 2 2 ## 2 2 1 1 ## 3 2 0 2 ## 4 2 0 0 ## 5 2 0 0 ## 6 2 0 2 ## BobWhite_c19875_271 BobWhite_c19919_516 BobWhite_c19919_572 ## 1 2 0 0 ## 2 0 2 0 ## 3 0 2 0 ## 4 0 0 2 ## 5 0 2 0 ## 6 0 0 2 ## BobWhite_c19985_446 BobWhite_c20015_225 BobWhite_c20073_382 ## 1 0 2 0 ## 2 0 2 0 ## 3 0 1 0 ## 4 0 2 0 ## 5 0 0 0 ## 6 2 2 0 ## BobWhite_c20137_229 BobWhite_c2027_215 BobWhite_c20514_70 ## 1 2 0 2 ## 2 2 2 0 ## 3 2 2 0 ## 4 0 2 0 ## 5 0 2 0 ## 6 0 2 0 ## BobWhite_c2053_182 BobWhite_c20558_413 BobWhite_c2058_367 ## 1 1 2 0 ## 2 1 2 0 ## 3 2 2 0 ## 4 0 2 0 ## 5 0 2 0 ## 6 0 2 0 ## BobWhite_c20621_541 BobWhite_c20689_427 BobWhite_c2069_1096 ## 1 0 2 0 ## 2 0 2 0 ## 3 0 2 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 0 0 ## BobWhite_c20706_135 BobWhite_c20782_697 BobWhite_c20909_243 ## 1 2 0 2 ## 2 0 2 0 ## 3 2 2 1 ## 4 0 2 2 ## 5 0 2 0 ## 6 0 2 2 ## BobWhite_c20952_105 BobWhite_c20959_229 BobWhite_c21129_830 ## 1 0 0 0 ## 2 0 0 2 ## 3 0 0 2 ## 4 2 2 2 ## 5 2 0 2 ## 6 2 0 2 ## BobWhite_c21200_281 BobWhite_c21397_148 BobWhite_c21678_328 ## 1 0 2 1 ## 2 0 2 0 ## 3 2 2 0 ## 4 2 0 2 ## 5 2 2 0 ## 6 2 2 0 ## BobWhite_c21838_152 BobWhite_c22134_398 BobWhite_c22273_227 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 2 2 ## 4 0 2 0 ## 5 0 2 2 ## 6 0 2 2 ## BobWhite_c22280_104 BobWhite_c22370_352 BobWhite_c22572_782 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 1 0 ## 4 1 2 0 ## 5 0 2 0 ## 6 0 0 2 ## BobWhite_c22580_115 BobWhite_c22728_78 BobWhite_c22752_182 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 0 2 0 ## 5 0 0 2 ## 6 0 0 2 ## BobWhite_c22794_111 BobWhite_c22827_193 BobWhite_c2296_94 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 2 ## 4 0 0 2 ## 5 0 0 2 ## 6 0 0 2 ## BobWhite_c23074_304 BobWhite_c23617_167 BobWhite_c23632_322 ## 1 2 0 2 ## 2 0 2 0 ## 3 2 0 0 ## 4 2 0 0 ## 5 2 2 0 ## 6 0 2 0 ## BobWhite_c23736_153 BobWhite_c23828_884 BobWhite_c23887_53 ## 1 0 0 0 ## 2 0 2 0 ## 3 2 2 1 ## 4 0 2 0 ## 5 0 2 0 ## 6 2 2 0 ## BobWhite_c23918_208 BobWhite_c23992_300 BobWhite_c24063_231 ## 1 0 2 0 ## 2 2 2 2 ## 3 0 2 0 ## 4 2 2 2 ## 5 2 2 2 ## 6 0 2 0 ## BobWhite_c24067_519 BobWhite_c2409_1355 BobWhite_c24096_215 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 1 2 ## 4 2 2 0 ## 5 2 2 0 ## 6 0 2 2 ## BobWhite_c2423_99 BobWhite_c24295_777 BobWhite_c24364_73 ## 1 2 0 2 ## 2 2 2 2 ## 3 2 0 2 ## 4 0 2 2 ## 5 2 0 2 ## 6 2 0 2 ## BobWhite_c24495_282 BobWhite_c24718_225 BobWhite_c24760_142 ## 1 2 0 2 ## 2 2 2 2 ## 3 2 2 2 ## 4 1 0 0 ## 5 2 2 2 ## 6 2 2 2 ## BobWhite_c24774_186 BobWhite_c24803_563 BobWhite_c24825_349 ## 1 2 0 2 ## 2 0 0 2 ## 3 0 0 0 ## 4 2 0 0 ## 5 0 0 0 ## 6 0 0 0 ## BobWhite_c25014_310 BobWhite_c25105_507 BobWhite_c2514_109 ## 1 0 0 2 ## 2 0 0 0 ## 3 0 0 0 ## 4 0 0 2 ## 5 0 0 2 ## 6 0 2 0 ## BobWhite_c25163_178 BobWhite_c25527_109 BobWhite_c2568_115 ## 1 0 0 0 ## 2 2 0 0 ## 3 2 0 2 ## 4 2 0 2 ## 5 2 0 2 ## 6 2 0 0 ## BobWhite_c25708_334 BobWhite_c25764_348 BobWhite_c26122_129 ## 1 0 0 2 ## 2 0 2 2 ## 3 0 0 1 ## 4 0 2 0 ## 5 0 2 0 ## 6 0 0 0 ## BobWhite_c26374_339 BobWhite_c26503_61 BobWhite_c26504_163 ## 1 0 0 1 ## 2 0 0 2 ## 3 0 0 0 ## 4 1 0 2 ## 5 2 0 0 ## 6 2 0 2 ## BobWhite_c26534_532 BobWhite_c26569_190 BobWhite_c26680_62 ## 1 2 2 2 ## 2 2 0 2 ## 3 0 2 2 ## 4 2 2 2 ## 5 2 0 2 ## 6 0 0 0 ## BobWhite_c26689_85 BobWhite_c26803_89 BobWhite_c26850_78 ## 1 2 0 2 ## 2 0 0 2 ## 3 2 2 1 ## 4 2 2 2 ## 5 2 2 2 ## 6 0 2 2 ## BobWhite_c2715_411 BobWhite_c27193_217 BobWhite_c27253_91 ## 1 1 2 2 ## 2 1 0 2 ## 3 0 2 2 ## 4 0 0 2 ## 5 0 0 2 ## 6 0 2 2 ## BobWhite_c2730_245 BobWhite_c27751_206 BobWhite_c27801_429 ## 1 0 2 2 ## 2 0 0 0 ## 3 2 0 2 ## 4 2 0 2 ## 5 0 0 0 ## 6 0 2 2 ## BobWhite_c27885_197 BobWhite_c27991_64 BobWhite_c28058_232 ## 1 2 0 0 ## 2 2 0 0 ## 3 2 0 0 ## 4 2 0 0 ## 5 2 0 2 ## 6 0 0 0 ## BobWhite_c28090_175 BobWhite_c28133_87 BobWhite_c28333_454 ## 1 2 2 0 ## 2 0 2 0 ## 3 0 2 1 ## 4 2 2 2 ## 5 2 0 2 ## 6 2 2 0 ## BobWhite_c28409_462 BobWhite_c28819_733 BobWhite_c2892_167 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 0 2 ## 4 0 2 2 ## 5 0 0 2 ## 6 0 0 2 ## BobWhite_c28950_147 BobWhite_c29014_241 BobWhite_c2905_590 ## 1 2 0 2 ## 2 2 0 2 ## 3 1 0 2 ## 4 1 0 2 ## 5 0 0 2 ## 6 2 0 2 ## BobWhite_c2937_1426 BobWhite_c29596_649 BobWhite_c2988_2161 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 0 0 ## 4 0 2 0 ## 5 2 0 2 ## 6 0 0 0 ## BobWhite_c30009_285 BobWhite_c30043_150 BobWhite_c30138_69 ## 1 2 0 2 ## 2 2 0 2 ## 3 1 0 2 ## 4 2 0 0 ## 5 2 0 1 ## 6 2 0 2 ## BobWhite_c30232_154 BobWhite_c30461_131 BobWhite_c30520_323 ## 1 0 0 2 ## 2 2 2 2 ## 3 0 0 0 ## 4 2 2 0 ## 5 2 2 2 ## 6 0 0 2 ## BobWhite_c30582_103 BobWhite_c30622_180 BobWhite_c31011_102 ## 1 0 0 2 ## 2 0 0 2 ## 3 2 0 0 ## 4 0 2 0 ## 5 0 2 1 ## 6 2 2 0 ## BobWhite_c3146_128 BobWhite_c317_1777 BobWhite_c32319_268 ## 1 2 0 0 ## 2 2 0 0 ## 3 2 0 0 ## 4 0 0 2 ## 5 2 0 0 ## 6 2 0 0 ## BobWhite_c32347_219 BobWhite_c32864_250 BobWhite_c32883_84 ## 1 2 2 2 ## 2 2 2 2 ## 3 2 1 0 ## 4 2 1 0 ## 5 2 0 0 ## 6 0 2 0 ## BobWhite_c32938_177 BobWhite_c33069_114 BobWhite_c33300_159 ## 1 0 0 2 ## 2 0 2 2 ## 3 0 2 2 ## 4 2 0 0 ## 5 0 2 1 ## 6 0 2 2 ## BobWhite_c33506_732 BobWhite_c33756_74 BobWhite_c3392_749 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 0 2 ## 4 0 2 2 ## 5 1 0 2 ## 6 0 2 2 ## BobWhite_c34068_833 BobWhite_c3448_80 BobWhite_c34548_96 ## 1 0 0 0 ## 2 0 0 2 ## 3 2 0 1 ## 4 0 0 2 ## 5 0 0 2 ## 6 0 2 2 ## BobWhite_c34551_714 BobWhite_c34689_116 BobWhite_c34798_184 ## 1 2 0 2 ## 2 2 1 2 ## 3 2 0 2 ## 4 0 0 1 ## 5 0 2 2 ## 6 2 0 2 ## BobWhite_c34866_232 BobWhite_c3488_386 BobWhite_c34887_239 ## 1 0 1 0 ## 2 0 1 2 ## 3 0 2 0 ## 4 0 0 0 ## 5 2 2 0 ## 6 0 2 0 ## BobWhite_c35035_317 BobWhite_c3506_1151 BobWhite_c35093_176 ## 1 0 2 2 ## 2 0 2 0 ## 3 0 2 2 ## 4 2 2 2 ## 5 0 2 2 ## 6 0 2 2 ## BobWhite_c35303_192 BobWhite_c35334_247 BobWhite_c3541_152 ## 1 0 2 2 ## 2 0 2 2 ## 3 1 2 2 ## 4 0 2 2 ## 5 0 2 2 ## 6 0 2 0 ## BobWhite_c35484_282 BobWhite_c36070_89 BobWhite_c36154_81 ## 1 0 0 0 ## 2 0 0 2 ## 3 0 0 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 0 0 ## BobWhite_c36416_56 BobWhite_c36548_98 BobWhite_c36693_210 ## 1 0 2 2 ## 2 0 2 0 ## 3 0 2 0 ## 4 0 1 0 ## 5 0 2 0 ## 6 0 0 0 ## BobWhite_c3675_788 BobWhite_c3692_439 BobWhite_c3714_659 ## 1 2 2 0 ## 2 0 2 0 ## 3 0 2 0 ## 4 0 2 0 ## 5 0 0 0 ## 6 0 0 0 ## BobWhite_c37216_572 BobWhite_c37358_208 BobWhite_c3771_441 ## 1 0 0 2 ## 2 0 0 0 ## 3 2 2 2 ## 4 0 2 0 ## 5 2 2 1 ## 6 0 2 2 ## BobWhite_c37935_124 BobWhite_c38001_528 BobWhite_c38340_243 ## 1 0 0 0 ## 2 0 0 2 ## 3 0 0 2 ## 4 0 0 2 ## 5 2 0 2 ## 6 0 0 0 ## BobWhite_c38408_71 BobWhite_c38741_108 BobWhite_c38865_319 ## 1 2 0 2 ## 2 2 2 2 ## 3 2 0 2 ## 4 2 0 2 ## 5 2 0 0 ## 6 2 2 2 ## BobWhite_c38885_377 BobWhite_c3902_145 BobWhite_c3902_175 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 2 0 ## 4 0 2 2 ## 5 0 2 2 ## 6 0 2 2 ## BobWhite_c3909_877 BobWhite_c39153_131 BobWhite_c39214_164 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 2 0 ## 4 0 2 0 ## 5 0 2 0 ## 6 0 2 2 ## BobWhite_c39364_231 BobWhite_c39656_106 BobWhite_c3995_536 ## 1 2 2 2 ## 2 0 0 2 ## 3 2 2 2 ## 4 2 2 2 ## 5 2 0 2 ## 6 0 2 2 ## BobWhite_c39996_85 BobWhite_c40051_360 BobWhite_c40087_93 ## 1 0 0 0 ## 2 0 0 0 ## 3 2 2 0 ## 4 2 2 1 ## 5 0 0 0 ## 6 0 2 0 ## BobWhite_c4014_508 BobWhite_c40244_73 BobWhite_c40535_218 ## 1 0 2 2 ## 2 0 2 0 ## 3 0 1 2 ## 4 2 1 0 ## 5 2 0 2 ## 6 2 2 2 ## BobWhite_c40583_146 BobWhite_c40643_370 BobWhite_c41535_52 ## 1 0 2 2 ## 2 2 2 2 ## 3 0 0 2 ## 4 2 0 2 ## 5 2 2 2 ## 6 0 0 0 ## BobWhite_c41542_354 BobWhite_c41725_430 BobWhite_c41815_145 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 2 2 ## 4 0 2 0 ## 5 2 0 2 ## 6 2 2 2 ## BobWhite_c42020_456 BobWhite_c42102_237 BobWhite_c42170_144 ## 1 0 2 2 ## 2 0 0 2 ## 3 2 1 2 ## 4 2 0 2 ## 5 2 0 0 ## 6 0 0 0 ## BobWhite_c42349_99 BobWhite_c4236_410 BobWhite_c4253_568 ## 1 2 0 2 ## 2 2 2 0 ## 3 2 0 2 ## 4 2 2 0 ## 5 2 0 0 ## 6 2 0 2 ## BobWhite_c4256_213 BobWhite_c42613_62 BobWhite_c4264_238 ## 1 0 0 2 ## 2 0 0 0 ## 3 0 0 2 ## 4 0 0 0 ## 5 2 1 0 ## 6 0 0 0 ## BobWhite_c42716_71 BobWhite_c43135_397 BobWhite_c43213_184 ## 1 2 0 0 ## 2 2 0 0 ## 3 0 0 0 ## 4 2 2 0 ## 5 0 2 0 ## 6 0 2 0 ## BobWhite_c43263_123 BobWhite_c4336_127 BobWhite_c43389_1243 ## 1 2 0 0 ## 2 0 0 2 ## 3 0 0 0 ## 4 0 0 0 ## 5 0 0 2 ## 6 0 0 2 ## BobWhite_c43495_133 BobWhite_c43681_334 BobWhite_c43728_100 ## 1 2 2 0 ## 2 0 2 0 ## 3 2 2 0 ## 4 2 2 0 ## 5 0 2 2 ## 6 2 2 0 ## BobWhite_c43880_73 BobWhite_c43917_288 BobWhite_c44404_312 ## 1 2 2 0 ## 2 2 0 2 ## 3 2 0 0 ## 4 0 2 2 ## 5 0 0 2 ## 6 2 2 2 ## BobWhite_c44460_821 BobWhite_c44641_134 BobWhite_c44691_648 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 2 0 ## 4 0 2 0 ## 5 0 2 0 ## 6 0 2 0 ## BobWhite_c44947_277 BobWhite_c45118_495 BobWhite_c4517_120 ## 1 0 0 2 ## 2 0 2 2 ## 3 2 0 2 ## 4 2 0 2 ## 5 2 0 2 ## 6 2 0 2 ## BobWhite_c45340_368 BobWhite_c45848_120 BobWhite_c46007_582 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 1 2 ## 4 0 2 2 ## 5 0 2 2 ## 6 0 0 2 ## BobWhite_c46250_98 BobWhite_c46349_402 BobWhite_c46361_331 ## 1 2 2 0 ## 2 2 2 2 ## 3 2 2 0 ## 4 2 2 0 ## 5 2 0 0 ## 6 0 0 0 ## BobWhite_c46416_247 BobWhite_c4646_119 BobWhite_c46501_92 ## 1 0 2 1 ## 2 0 2 0 ## 3 0 0 2 ## 4 2 0 2 ## 5 0 0 2 ## 6 0 0 2 ## BobWhite_c47040_185 BobWhite_c47103_84 BobWhite_c47143_592 ## 1 2 0 2 ## 2 2 0 2 ## 3 0 0 2 ## 4 2 0 2 ## 5 2 0 2 ## 6 2 2 2 ## BobWhite_c47168_289 BobWhite_c47283_127 BobWhite_c4729_243 ## 1 0 0 2 ## 2 2 2 1 ## 3 2 0 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 2 2 2 ## BobWhite_c47357_535 BobWhite_c47401_491 BobWhite_c47456_121 ## 1 0 2 2 ## 2 0 2 0 ## 3 0 2 0 ## 4 2 2 2 ## 5 0 2 0 ## 6 0 2 0 ## BobWhite_c47555_106 BobWhite_c47608_273 BobWhite_c47722_613 ## 1 2 0 2 ## 2 0 0 2 ## 3 2 0 2 ## 4 1 0 2 ## 5 0 2 0 ## 6 2 0 2 ## BobWhite_c4773_85 BobWhite_c47740_85 BobWhite_c478_1386 ## 1 2 2 0 ## 2 2 2 0 ## 3 2 2 0 ## 4 2 2 2 ## 5 2 2 2 ## 6 2 0 2 ## BobWhite_c47964_969 BobWhite_c48071_144 BobWhite_c48435_165 ## 1 0 0 2 ## 2 0 2 2 ## 3 0 0 2 ## 4 0 0 2 ## 5 0 2 2 ## 6 2 2 0 ## BobWhite_c48455_818 BobWhite_c4852_323 BobWhite_c48548_106 ## 1 0 2 2 ## 2 2 2 0 ## 3 2 0 2 ## 4 2 0 2 ## 5 2 2 0 ## 6 0 0 2 ## BobWhite_c48550_198 BobWhite_c4872_97 BobWhite_c48730_723 ## 1 0 2 2 ## 2 2 2 2 ## 3 1 2 0 ## 4 0 0 2 ## 5 2 2 2 ## 6 2 0 0 ## BobWhite_c5046_372 BobWhite_c5072_107 BobWhite_c5092_422 ## 1 2 2 0 ## 2 2 2 0 ## 3 2 2 2 ## 4 2 0 0 ## 5 2 2 2 ## 6 2 2 0 ## BobWhite_c5095_634 BobWhite_c5096_156 BobWhite_c51109_415 ## 1 2 0 2 ## 2 2 0 0 ## 3 1 0 0 ## 4 2 0 2 ## 5 2 2 0 ## 6 0 2 2 ## BobWhite_c5116_247 BobWhite_c5125_258 BobWhite_c5235_710 ## 1 0 2 2 ## 2 0 0 0 ## 3 2 2 2 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 2 2 ## BobWhite_c5246_196 BobWhite_c5246_474 BobWhite_c5255_429 ## 1 0 2 2 ## 2 2 2 2 ## 3 0 1 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 0 2 2 ## BobWhite_c5337_225 BobWhite_c53978_99 BobWhite_c5418_82 ## 1 0 2 0 ## 2 0 2 0 ## 3 2 0 0 ## 4 0 2 0 ## 5 0 0 0 ## 6 0 2 0 ## BobWhite_c5506_1551 BobWhite_c5611_281 BobWhite_c5633_59 ## 1 0 2 2 ## 2 0 2 0 ## 3 0 2 0 ## 4 0 2 0 ## 5 2 2 0 ## 6 0 0 0 ## BobWhite_c5756_516 BobWhite_c5782_825 BobWhite_c5793_372 ## 1 2 2 2 ## 2 2 2 2 ## 3 2 2 2 ## 4 2 0 2 ## 5 2 2 2 ## 6 2 2 2 ## BobWhite_c5812_440 BobWhite_c5847_919 BobWhite_c5852_103 ## 1 2 0 0 ## 2 2 0 0 ## 3 1 2 0 ## 4 2 1 0 ## 5 2 0 0 ## 6 2 0 0 ## BobWhite_c5872_589 BobWhite_c5887_1277 BobWhite_c5968_868 ## 1 0 2 0 ## 2 0 2 2 ## 3 2 2 0 ## 4 0 2 0 ## 5 2 2 2 ## 6 0 2 0 ## BobWhite_c6015_141 BobWhite_c6055_185 BobWhite_c61766_373 ## 1 2 2 2 ## 2 2 2 2 ## 3 2 0 2 ## 4 1 0 2 ## 5 2 0 2 ## 6 2 0 2 ## BobWhite_c634_420 BobWhite_c6527_222 BobWhite_c66165_77 ## 1 0 0 2 ## 2 0 0 0 ## 3 2 0 2 ## 4 2 0 0 ## 5 0 0 0 ## 6 2 0 2 ## BobWhite_c662_148 BobWhite_c6664_644 BobWhite_c6782_180 ## 1 2 2 0 ## 2 2 2 0 ## 3 2 2 0 ## 4 2 2 0 ## 5 2 2 2 ## 6 2 2 2 ## BobWhite_c6998_365 BobWhite_c7050_564 BobWhite_c7145_355 ## 1 0 0 2 ## 2 2 0 2 ## 3 2 0 0 ## 4 0 2 0 ## 5 2 0 2 ## 6 2 0 0 ## BobWhite_c7235_365 BobWhite_c7263_337 BobWhite_c7274_333 ## 1 2 2 2 ## 2 0 0 2 ## 3 0 0 2 ## 4 0 2 0 ## 5 0 0 2 ## 6 0 0 2 ## BobWhite_c7390_286 BobWhite_c7400_334 BobWhite_c744_614 ## 1 0 2 0 ## 2 0 2 0 ## 3 0 2 0 ## 4 2 2 1 ## 5 0 2 0 ## 6 0 2 0 ## BobWhite_c7454_492 BobWhite_c7577_69 BobWhite_c7604_181 ## 1 0 0 0 ## 2 0 0 0 ## 3 2 0 0 ## 4 2 0 0 ## 5 2 0 0 ## 6 2 0 2 ## BobWhite_c7604_254 BobWhite_c7786_376 BobWhite_c7818_278 ## 1 2 0 2 ## 2 2 0 2 ## 3 0 0 2 ## 4 0 0 0 ## 5 2 0 2 ## 6 0 0 2 ## BobWhite_c8027_421 BobWhite_c8048_663 BobWhite_c8113_532 ## 1 0 2 2 ## 2 0 2 2 ## 3 2 2 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 0 2 2 ## BobWhite_c8202_245 BobWhite_c8266_227 BobWhite_c828_329 ## 1 0 0 2 ## 2 2 0 2 ## 3 0 0 0 ## 4 2 0 2 ## 5 0 0 2 ## 6 0 0 2 ## BobWhite_c8764_219 BobWhite_c892_73 BobWhite_c8945_134 BobWhite_c930_401 ## 1 2 0 2 2 ## 2 2 0 2 2 ## 3 2 0 2 0 ## 4 2 0 2 0 ## 5 2 0 2 2 ## 6 2 0 2 2 ## BobWhite_c9316_300 BobWhite_c9505_515 BobWhite_c9563_377 ## 1 1 2 2 ## 2 0 2 2 ## 3 0 2 2 ## 4 0 0 2 ## 5 1 2 2 ## 6 0 2 2 ## BobWhite_c96_170 BobWhite_c9711_71 BobWhite_c9881_1312 ## 1 0 2 0 ## 2 2 2 0 ## 3 1 2 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 0 2 ## BobWhite_c9961_402 BobWhite_c9963_51 BobWhite_rep_c48793_750 ## 1 2 2 0 ## 2 2 2 2 ## 3 1 2 0 ## 4 0 2 0 ## 5 0 2 0 ## 6 0 2 2 ## BobWhite_rep_c49034_167 BobWhite_rep_c49038_551 BobWhite_rep_c49102_169 ## 1 0 0 2 ## 2 2 2 2 ## 3 0 0 2 ## 4 0 0 2 ## 5 0 2 2 ## 6 0 0 2 ## BobWhite_rep_c49207_243 BobWhite_rep_c49225_231 BobWhite_rep_c49333_223 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 1 2 ## 4 2 1 2 ## 5 0 0 0 ## 6 2 0 0 ## BobWhite_rep_c49390_455 BobWhite_rep_c49700_452 BobWhite_rep_c49931_364 ## 1 2 2 2 ## 2 2 0 0 ## 3 0 0 0 ## 4 0 0 0 ## 5 0 0 2 ## 6 2 2 0 ## BobWhite_rep_c50145_387 BobWhite_rep_c50285_616 BobWhite_rep_c50349_139 ## 1 2 2 0 ## 2 0 0 0 ## 3 0 2 1 ## 4 2 1 2 ## 5 0 2 2 ## 6 0 2 2 ## BobWhite_rep_c50457_813 BobWhite_rep_c50671_356 BobWhite_rep_c51103_654 ## 1 2 0 2 ## 2 2 0 2 ## 3 1 0 2 ## 4 2 0 0 ## 5 2 0 0 ## 6 0 0 0 ## BobWhite_rep_c51612_864 BobWhite_rep_c52911_146 BobWhite_rep_c52979_181 ## 1 2 0 0 ## 2 2 2 0 ## 3 2 2 2 ## 4 0 2 0 ## 5 2 2 2 ## 6 0 2 0 ## BobWhite_rep_c56118_100 BobWhite_rep_c58252_112 BobWhite_rep_c60245_107 ## 1 0 0 2 ## 2 0 2 2 ## 3 2 2 2 ## 4 2 0 2 ## 5 2 0 2 ## 6 2 2 2 ## BobWhite_rep_c61602_139 BobWhite_rep_c61813_322 BobWhite_rep_c61884_158 ## 1 2 0 0 ## 2 2 0 2 ## 3 2 0 2 ## 4 2 2 0 ## 5 2 2 2 ## 6 2 0 2 ## BobWhite_rep_c62964_873 BobWhite_rep_c62985_546 BobWhite_rep_c63085_120 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 0 2 ## 4 0 0 2 ## 5 2 0 2 ## 6 2 0 2 ## BobWhite_rep_c63253_215 BobWhite_rep_c63429_271 BobWhite_rep_c63710_181 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 0 2 ## 4 0 2 2 ## 5 0 0 0 ## 6 2 0 2 ## BobWhite_rep_c63819_182 BobWhite_rep_c63940_205 BobWhite_rep_c63943_76 ## 1 2 2 2 ## 2 2 0 2 ## 3 2 2 2 ## 4 2 0 0 ## 5 2 2 0 ## 6 2 2 0 ## BobWhite_rep_c64440_83 BobWhite_rep_c64768_264 BobWhite_rep_c64920_402 ## 1 2 0 0 ## 2 2 0 0 ## 3 2 2 0 ## 4 2 2 0 ## 5 2 2 1 ## 6 2 0 0 ## BobWhite_rep_c65013_174 BobWhite_rep_c65565_359 BobWhite_rep_c66032_270 ## 1 2 2 0 ## 2 0 0 0 ## 3 2 0 0 ## 4 0 0 0 ## 5 0 2 0 ## 6 2 0 0 ## BobWhite_rep_c66957_84 BobWhite_s63403_99 BobWhite_s66966_118 ## 1 0 2 2 ## 2 0 2 0 ## 3 0 2 0 ## 4 0 0 2 ## 5 2 2 0 ## 6 0 2 2 ## BobWhite_s67247_276 BobWhite_s67516_159 BS00000006_51 BS00000020_51 ## 1 2 0 2 2 ## 2 2 0 2 2 ## 3 2 0 0 2 ## 4 2 2 2 2 ## 5 2 2 2 2 ## 6 2 2 0 2 ## BS00000066_51 BS00000209_51 BS00000250_51 BS00000365_51 BS00000405_51 ## 1 0 2 2 0 2 ## 2 2 2 0 0 2 ## 3 0 2 2 2 2 ## 4 0 2 1 2 0 ## 5 2 2 0 2 0 ## 6 0 2 2 2 2 ## BS00000445_51 BS00000592_51 BS00000651_51 BS00000721_51 BS00000750_51 ## 1 2 2 0 2 2 ## 2 2 2 0 2 2 ## 3 1 2 0 0 2 ## 4 0 2 0 0 0 ## 5 0 2 2 0 2 ## 6 0 2 0 0 0 ## BS00000905_51 BS00001085_51 BS00001140_51 BS00001260_51 BS00001835_51 ## 1 2 0 0 2 2 ## 2 2 2 0 2 2 ## 3 0 0 0 2 0 ## 4 2 0 2 2 2 ## 5 0 0 0 0 2 ## 6 2 0 0 0 0 ## BS00001921_51 BS00002178_51 BS00002208_51 BS00002491_51 BS00002800_51 ## 1 2 2 0 0 2 ## 2 2 2 0 0 2 ## 3 0 2 0 0 2 ## 4 0 2 0 0 2 ## 5 2 0 0 0 2 ## 6 1 2 0 0 2 ## BS00002897_51 BS00002974_51 BS00003088_51 BS00003185_51 BS00003214_51 ## 1 2 2 0 0 1 ## 2 2 2 0 0 0 ## 3 2 2 0 0 2 ## 4 0 2 0 0 0 ## 5 0 1 0 0 2 ## 6 2 0 0 0 0 ## BS00003350_51 BS00003494_51 BS00003600_51 BS00003616_51 BS00003630_51 ## 1 0 2 0 0 0 ## 2 1 2 0 0 2 ## 3 0 0 0 0 0 ## 4 0 0 0 0 0 ## 5 2 0 0 0 0 ## 6 0 2 0 0 0 ## BS00003655_51 BS00003663_51 BS00003696_51 BS00003723_51 BS00003727_51 ## 1 0 2 2 0 2 ## 2 0 2 2 2 0 ## 3 0 2 0 2 0 ## 4 0 2 2 1 1 ## 5 0 2 0 2 0 ## 6 2 2 0 2 2 ## BS00003730_51 BS00003735_51 BS00003761_51 BS00003765_51 BS00003806_51 ## 1 2 2 1 0 2 ## 2 2 0 2 0 2 ## 3 2 2 0 0 2 ## 4 2 0 0 0 2 ## 5 2 0 0 0 2 ## 6 2 0 0 2 2 ## BS00003816_51 BS00003822_51 BS00003835_51 BS00003867_51 BS00003881_51 ## 1 0 0 0 0 0 ## 2 0 0 0 0 2 ## 3 0 2 2 0 2 ## 4 2 2 0 2 2 ## 5 0 2 0 0 2 ## 6 0 2 0 0 2 ## BS00003891_51 BS00003917_51 BS00003935_51 BS00003945_51 BS00003971_51 ## 1 2 0 2 0 0 ## 2 2 0 2 0 0 ## 3 2 0 1 0 2 ## 4 2 0 2 0 2 ## 5 2 0 2 0 2 ## 6 2 0 2 0 2 ## BS00003975_51 BS00003995_51 BS00004257_51 BS00004282_51 BS00004376_51 ## 1 0 2 0 2 0 ## 2 0 2 0 2 0 ## 3 0 2 2 2 0 ## 4 0 2 2 0 0 ## 5 0 2 0 2 0 ## 6 0 0 2 2 0 ## BS00004377_51 BS00004403_51 BS00004413_51 BS00004466_51 BS00004724_51 ## 1 0 0 2 2 0 ## 2 2 2 2 2 0 ## 3 2 2 2 0 0 ## 4 2 0 2 2 1 ## 5 2 2 2 0 0 ## 6 2 2 2 2 0 ## BS00005860_51 BS00006196_51 BS00006822_51 BS00007429_51 BS00007684_51 ## 1 2 2 0 0 0 ## 2 2 2 2 2 0 ## 3 0 2 2 2 0 ## 4 0 2 2 0 0 ## 5 0 0 2 0 0 ## 6 0 2 2 2 0 ## BS00008627_51 BS00008805_51 BS00009104_51 BS00009263_51 BS00009274_51 ## 1 2 0 2 0 0 ## 2 2 0 0 0 0 ## 3 0 0 0 2 0 ## 4 0 0 0 2 0 ## 5 0 0 0 0 0 ## 6 0 0 0 0 0 ## BS00009295_51 BS00009299_51 BS00009311_51 BS00009331_51 BS00009335_51 ## 1 0 2 2 2 0 ## 2 0 2 2 2 0 ## 3 0 0 2 0 0 ## 4 2 2 2 2 0 ## 5 0 2 2 0 2 ## 6 0 2 2 2 2 ## BS00009342_51 BS00009369_51 BS00009381_51 BS00009426_51 BS00009477_51 ## 1 2 2 0 0 0 ## 2 2 2 0 0 0 ## 3 0 0 0 0 2 ## 4 0 2 0 0 0 ## 5 0 0 0 0 0 ## 6 0 0 0 0 2 ## BS00009492_51 BS00009540_51 BS00009573_51 BS00009575_51 BS00009657_51 ## 1 0 2 0 2 0 ## 2 2 2 2 2 2 ## 3 2 2 0 0 2 ## 4 2 2 0 2 2 ## 5 0 2 0 2 2 ## 6 2 2 0 2 2 ## BS00009677_51 BS00009789_51 BS00009808_51 BS00009810_51 BS00009866_51 ## 1 2 2 2 0 2 ## 2 0 2 2 0 2 ## 3 2 2 2 0 2 ## 4 2 2 2 0 0 ## 5 2 2 2 2 0 ## 6 2 2 2 0 0 ## BS00010043_51 BS00010055_51 BS00010134_51 BS00010153_51 BS00010160_51 ## 1 0 0 0 2 0 ## 2 0 0 0 2 0 ## 3 0 0 2 2 1 ## 4 2 0 2 2 1 ## 5 0 0 2 0 0 ## 6 0 0 2 2 0 ## BS00010234_51 BS00010282_51 BS00010311_51 BS00010316_51 BS00010322_51 ## 1 0 2 0 0 0 ## 2 0 2 0 0 2 ## 3 2 0 0 1 1 ## 4 0 2 0 1 0 ## 5 0 2 0 2 2 ## 6 2 0 0 0 2 ## BS00010332_51 BS00010339_51 BS00010392_51 BS00010399_51 BS00010403_51 ## 1 2 0 0 0 2 ## 2 2 0 0 0 2 ## 3 1 0 0 1 2 ## 4 2 0 0 0 2 ## 5 2 2 2 0 0 ## 6 0 0 0 0 0 ## BS00010435_51 BS00010488_51 BS00010491_51 BS00010531_51 BS00010567_51 ## 1 2 2 2 1 2 ## 2 2 0 2 0 2 ## 3 2 2 2 1 2 ## 4 2 2 2 1 0 ## 5 2 2 0 0 2 ## 6 2 2 2 2 2 ## BS00010576_51 BS00010580_51 BS00010616_51 BS00010643_51 BS00010645_51 ## 1 0 0 2 0 2 ## 2 0 0 0 0 0 ## 3 0 2 0 0 0 ## 4 0 2 0 2 0 ## 5 0 2 2 0 0 ## 6 0 2 0 0 0 ## BS00010664_51 BS00010696_51 BS00010706_51 BS00010745_51 BS00010795_51 ## 1 0 2 0 0 2 ## 2 0 2 0 0 2 ## 3 0 2 0 0 2 ## 4 0 0 0 2 0 ## 5 0 2 0 0 2 ## 6 0 2 0 0 0 ## BS00010809_51 BS00010830_51 BS00010933_51 BS00011072_51 BS00011085_51 ## 1 0 2 2 2 0 ## 2 0 0 2 2 0 ## 3 0 0 0 2 0 ## 4 0 0 2 0 0 ## 5 0 0 0 2 0 ## 6 0 2 2 2 0 ## BS00011109_51 BS00011165_51 BS00011202_51 BS00011231_51 BS00011235_51 ## 1 2 0 2 0 0 ## 2 2 0 2 0 0 ## 3 2 0 0 0 0 ## 4 2 0 0 0 2 ## 5 2 0 2 2 0 ## 6 2 0 2 2 0 ## BS00011273_51 BS00011425_51 BS00011438_51 BS00011462_51 BS00011469_51 ## 1 2 2 0 2 2 ## 2 2 0 0 2 2 ## 3 2 2 0 2 0 ## 4 2 2 2 2 0 ## 5 0 2 2 2 2 ## 6 2 2 2 2 0 ## BS00011510_51 BS00011513_51 BS00011514_51 BS00011521_51 BS00011532_51 ## 1 0 0 2 0 0 ## 2 2 0 2 0 0 ## 3 0 2 1 0 2 ## 4 0 0 2 0 2 ## 5 0 0 0 0 2 ## 6 0 0 2 0 2 ## BS00011570_51 BS00011578_51 BS00011583_51 BS00011596_51 BS00011607_51 ## 1 0 0 2 0 0 ## 2 0 2 0 2 2 ## 3 2 0 0 2 2 ## 4 2 2 0 0 2 ## 5 2 0 0 0 2 ## 6 2 2 2 2 2 ## BS00011622_51 BS00011695_51 BS00011767_51 BS00011851_51 BS00011899_51 ## 1 2 0 0 0 0 ## 2 2 2 0 0 0 ## 3 2 0 0 0 0 ## 4 2 0 0 0 1 ## 5 2 0 0 0 0 ## 6 0 0 2 0 2 ## BS00011915_51 BS00011962_51 BS00011973_51 BS00012006_51 BS00012023_51 ## 1 2 0 0 0 2 ## 2 2 2 2 2 2 ## 3 0 0 2 0 0 ## 4 2 1 0 2 2 ## 5 2 0 2 2 0 ## 6 0 2 2 2 2 ## BS00012025_51 BS00012028_51 BS00012071_51 BS00012081_51 BS00012126_51 ## 1 0 2 2 2 2 ## 2 0 2 2 2 2 ## 3 0 2 2 2 0 ## 4 0 2 2 0 2 ## 5 0 2 2 0 2 ## 6 0 2 2 2 2 ## BS00012140_51 BS00012210_51 BS00012264_51 BS00012320_51 BS00012551_51 ## 1 0 0 2 1 1 ## 2 2 0 1 0 2 ## 3 0 2 0 0 1 ## 4 0 0 0 2 1 ## 5 0 2 2 2 2 ## 6 0 2 0 2 0 ## BS00012936_51 BS00013584_51 BS00013703_51 BS00014695_51 BS00014946_51 ## 1 0 0 2 2 0 ## 2 0 0 2 2 2 ## 3 0 0 2 2 2 ## 4 0 2 2 2 0 ## 5 2 0 2 2 0 ## 6 0 0 2 2 0 ## BS00015015_51 BS00015136_51 BS00015653_51 BS00016238_51 BS00016407_51 ## 1 2 2 2 2 0 ## 2 2 2 2 0 0 ## 3 2 2 2 2 0 ## 4 2 2 2 0 0 ## 5 2 2 2 0 2 ## 6 0 2 2 2 0 ## BS00016654_51 BS00017187_51 BS00017233_51 BS00017264_51 BS00017267_51 ## 1 2 0 2 2 2 ## 2 2 2 2 2 2 ## 3 2 0 0 2 2 ## 4 2 0 0 2 0 ## 5 2 0 0 2 0 ## 6 2 2 0 0 2 ## BS00017971_51 BS00018028_51 BS00018120_51 BS00018764_51 BS00019238_51 ## 1 0 2 0 2 2 ## 2 0 0 0 0 2 ## 3 2 2 2 0 0 ## 4 2 2 2 0 0 ## 5 0 2 2 0 0 ## 6 2 2 2 0 0 ## BS00020236_51 BS00020363_51 BS00020459_51 BS00020575_51 BS00020605_51 ## 1 0 2 0 2 0 ## 2 0 2 0 2 0 ## 3 0 0 0 0 2 ## 4 2 2 2 0 0 ## 5 0 0 2 0 0 ## 6 2 0 2 2 2 ## BS00020610_51 BS00020982_51 BS00021657_51 BS00021660_51 BS00021673_51 ## 1 0 2 2 0 2 ## 2 0 2 0 2 2 ## 3 0 2 0 0 2 ## 4 2 2 0 0 2 ## 5 2 2 2 0 2 ## 6 0 0 0 0 0 ## BS00021678_51 BS00021680_51 BS00021683_51 BS00021687_51 BS00021688_51 ## 1 2 2 0 0 2 ## 2 2 0 2 2 2 ## 3 2 2 2 0 0 ## 4 0 2 2 0 2 ## 5 2 2 2 2 2 ## 6 2 2 2 0 0 ## BS00021689_51 BS00021692_51 BS00021704_51 BS00021708_51 BS00021710_51 ## 1 0 2 0 2 0 ## 2 0 0 2 0 2 ## 3 0 2 0 2 1 ## 4 0 2 1 2 0 ## 5 0 2 0 0 2 ## 6 0 2 2 2 0 ## BS00021716_51 BS00021718_51 BS00021722_51 BS00021725_51 BS00021728_51 ## 1 0 0 2 2 0 ## 2 2 0 2 2 0 ## 3 2 0 2 2 0 ## 4 2 0 2 0 0 ## 5 2 0 2 0 0 ## 6 2 0 2 0 0 ## BS00021738_51 BS00021739_51 BS00021752_51 BS00021851_51 BS00021864_51 ## 1 2 0 0 2 2 ## 2 2 0 0 2 2 ## 3 1 0 2 2 2 ## 4 0 0 0 2 2 ## 5 2 2 0 0 2 ## 6 0 2 2 2 2 ## BS00021865_51 BS00021868_51 BS00021871_51 BS00021873_51 BS00021877_51 ## 1 0 0 0 0 0 ## 2 0 0 2 2 0 ## 3 0 0 1 0 0 ## 4 0 0 2 0 0 ## 5 0 0 2 2 0 ## 6 0 0 0 0 0 ## BS00021881_51 BS00021901_51 BS00021909_51 BS00021920_51 BS00021934_51 ## 1 0 2 0 2 2 ## 2 0 2 0 2 0 ## 3 0 0 0 2 0 ## 4 0 0 0 2 0 ## 5 0 2 0 2 0 ## 6 0 2 0 0 0 ## BS00021938_51 BS00021939_51 BS00021948_51 BS00021950_51 BS00021955_51 ## 1 2 0 2 2 0 ## 2 2 2 2 2 0 ## 3 1 0 2 2 0 ## 4 2 0 0 0 0 ## 5 2 0 2 2 0 ## 6 0 0 2 0 0 ## BS00021957_51 BS00021965_51 BS00021968_51 BS00021970_51 BS00021976_51 ## 1 2 0 2 2 2 ## 2 2 0 0 2 2 ## 3 0 2 2 2 2 ## 4 2 2 0 2 2 ## 5 0 2 0 2 2 ## 6 2 2 2 2 2 ## BS00021986_51 BS00022013_51 BS00022015_51 BS00022016_51 BS00022022_51 ## 1 2 0 2 0 2 ## 2 2 2 0 0 2 ## 3 0 2 2 0 2 ## 4 0 1 2 0 2 ## 5 0 2 2 0 2 ## 6 2 2 2 0 2 ## BS00022038_51 BS00022045_51 BS00022051_51 BS00022053_51 BS00022056_51 ## 1 0 0 2 2 2 ## 2 2 2 0 0 0 ## 3 2 2 1 0 0 ## 4 2 0 2 2 0 ## 5 2 2 0 0 0 ## 6 0 2 2 0 0 ## BS00022058_51 BS00022059_51 BS00022067_51 BS00022071_51 BS00022080_51 ## 1 0 0 2 0 0 ## 2 2 0 0 0 0 ## 3 0 0 2 0 2 ## 4 0 0 0 0 0 ## 5 0 0 2 0 0 ## 6 0 2 2 0 0 ## BS00022081_51 BS00022090_51 BS00022104_51 BS00022106_51 BS00022107_51 ## 1 2 2 2 0 2 ## 2 2 2 2 0 2 ## 3 2 2 2 0 0 ## 4 2 2 2 0 0 ## 5 2 2 2 2 2 ## 6 2 2 2 0 2 ## BS00022122_51 BS00022124_51 BS00022127_51 BS00022140_51 BS00022148_51 ## 1 2 0 0 0 2 ## 2 0 2 0 0 2 ## 3 0 1 0 0 0 ## 4 2 2 0 0 0 ## 5 0 2 2 0 0 ## 6 0 0 0 0 0 ## BS00022154_51 BS00022155_51 BS00022156_51 BS00022169_51 BS00022176_51 ## 1 0 0 2 2 0 ## 2 0 0 2 0 0 ## 3 2 0 2 2 0 ## 4 2 0 0 2 0 ## 5 2 0 0 2 2 ## 6 2 0 0 2 2 ## BS00022178_51 BS00022180_51 BS00022182_51 BS00022185_51 BS00022191_51 ## 1 2 0 0 0 2 ## 2 2 2 0 0 2 ## 3 2 2 2 0 2 ## 4 1 2 2 2 2 ## 5 0 0 0 0 2 ## 6 2 2 2 0 2 ## BS00022194_51 BS00022203_51 BS00022212_51 BS00022220_51 BS00022234_51 ## 1 2 0 2 2 0 ## 2 0 0 2 2 0 ## 3 2 2 2 2 2 ## 4 2 2 0 2 2 ## 5 2 2 2 2 0 ## 6 2 0 2 2 0 ## BS00022239_51 BS00022241_51 BS00022242_51 BS00022249_51 BS00022270_51 ## 1 2 0 2 2 0 ## 2 0 2 2 2 0 ## 3 0 2 2 1 2 ## 4 0 0 2 2 2 ## 5 0 0 0 2 0 ## 6 0 0 2 0 0 ## BS00022273_51 BS00022276_51 BS00022283_51 BS00022297_51 BS00022299_51 ## 1 2 2 0 2 2 ## 2 2 2 0 0 0 ## 3 2 2 0 2 2 ## 4 2 0 2 2 0 ## 5 2 2 0 2 0 ## 6 2 0 0 2 2 ## BS00022311_51 BS00022315_51 BS00022318_51 BS00022321_51 BS00022330_51 ## 1 0 0 2 2 2 ## 2 0 0 2 2 2 ## 3 0 1 2 2 0 ## 4 2 0 2 2 0 ## 5 0 0 2 2 2 ## 6 0 2 2 2 2 ## BS00022332_51 BS00022336_51 BS00022353_51 BS00022362_51 BS00022366_51 ## 1 0 0 2 0 0 ## 2 0 0 0 0 0 ## 3 0 0 0 2 2 ## 4 0 2 2 0 0 ## 5 0 1 0 2 2 ## 6 0 0 0 0 0 ## BS00022368_51 BS00022372_51 BS00022377_51 BS00022396_51 BS00022398_51 ## 1 2 2 0 0 0 ## 2 2 2 0 2 0 ## 3 2 0 0 1 0 ## 4 2 2 0 2 0 ## 5 2 0 0 2 0 ## 6 2 2 0 2 0 ## BS00022403_51 BS00022411_51 BS00022417_51 BS00022418_51 BS00022419_51 ## 1 2 0 0 2 0 ## 2 2 0 0 0 2 ## 3 2 1 0 0 0 ## 4 0 0 0 0 0 ## 5 2 0 0 2 0 ## 6 0 2 0 0 0 ## BS00022422_51 BS00022424_51 BS00022429_51 BS00022431_51 BS00022432_51 ## 1 0 2 1 0 2 ## 2 0 2 0 0 2 ## 3 0 2 2 2 2 ## 4 2 0 2 2 2 ## 5 2 2 2 2 2 ## 6 0 2 2 0 2 ## BS00022435_51 BS00022442_51 BS00022449_51 BS00022459_51 BS00022463_51 ## 1 2 2 2 0 2 ## 2 0 0 2 0 0 ## 3 2 2 2 1 0 ## 4 0 0 0 0 2 ## 5 0 2 2 0 2 ## 6 2 2 2 0 2 ## BS00022466_51 BS00022473_51 BS00022478_51 BS00022480_51 BS00022481_51 ## 1 0 1 2 0 2 ## 2 2 2 2 0 2 ## 3 0 2 2 2 2 ## 4 0 2 0 2 2 ## 5 0 2 2 2 2 ## 6 2 2 2 2 2 ## BS00022495_51 BS00022498_51 BS00022504_51 BS00022514_51 BS00022516_51 ## 1 0 0 1 0 0 ## 2 0 0 0 0 0 ## 3 0 2 1 0 1 ## 4 0 2 0 0 0 ## 5 0 0 1 0 2 ## 6 0 0 0 0 2 ## BS00022518_51 BS00022528_51 BS00022530_51 BS00022534_51 BS00022537_51 ## 1 2 0 2 0 0 ## 2 2 0 2 1 0 ## 3 2 1 2 2 2 ## 4 2 1 2 2 2 ## 5 2 2 2 2 0 ## 6 2 0 2 0 0 ## BS00022539_51 BS00022562_51 BS00022572_51 BS00022574_51 BS00022579_51 ## 1 2 2 0 2 2 ## 2 0 2 0 2 2 ## 3 1 2 2 1 2 ## 4 2 0 2 0 2 ## 5 0 -1 0 0 2 ## 6 0 2 0 0 2 ## BS00022586_51 BS00022605_51 BS00022607_51 BS00022624_51 BS00022641_51 ## 1 0 2 1 2 0 ## 2 0 2 0 2 0 ## 3 1 2 2 2 2 ## 4 2 2 0 2 2 ## 5 0 2 2 2 2 ## 6 0 2 0 2 2 ## BS00022646_51 BS00022648_51 BS00022653_51 BS00022656_51 BS00022666_51 ## 1 0 2 0 2 0 ## 2 0 2 0 0 0 ## 3 2 2 0 2 0 ## 4 2 2 0 2 2 ## 5 2 2 0 2 0 ## 6 2 2 0 2 0 ## BS00022673_51 BS00022678_51 BS00022688_51 BS00022699_51 BS00022700_51 ## 1 2 0 0 2 2 ## 2 2 0 0 2 2 ## 3 2 2 2 2 2 ## 4 2 2 2 2 2 ## 5 2 2 0 2 0 ## 6 0 0 0 2 2 ## BS00022703_51 BS00022733_51 BS00022742_51 BS00022758_51 BS00022772_51 ## 1 2 2 0 0 1 ## 2 2 2 2 0 1 ## 3 0 2 1 0 2 ## 4 0 2 0 2 0 ## 5 0 2 2 2 0 ## 6 0 2 0 2 0 ## BS00022773_51 BS00022775_51 BS00022800_51 BS00022809_51 BS00022824_51 ## 1 0 2 2 0 0 ## 2 2 2 2 2 0 ## 3 2 2 2 2 2 ## 4 2 2 2 2 0 ## 5 0 2 2 2 0 ## 6 0 2 2 0 0 ## BS00022828_51 BS00022830_51 BS00022832_51 BS00022834_51 BS00022838_51 ## 1 2 0 0 0 0 ## 2 0 0 0 2 2 ## 3 2 0 0 0 0 ## 4 0 0 0 0 2 ## 5 0 0 0 2 2 ## 6 0 2 0 0 0 ## BS00022855_51 BS00022861_51 BS00022864_51 BS00022886_51 BS00022887_51 ## 1 0 0 2 2 2 ## 2 2 2 2 0 2 ## 3 2 2 0 2 2 ## 4 2 0 2 2 2 ## 5 2 0 2 2 2 ## 6 2 0 0 2 2 ## BS00022897_51 BS00022902_51 BS00022903_51 BS00022916_51 BS00022917_51 ## 1 1 1 2 0 0 ## 2 2 0 2 0 0 ## 3 0 0 0 0 0 ## 4 2 0 2 0 0 ## 5 0 0 0 0 0 ## 6 2 0 0 0 0 ## BS00022938_51 BS00022943_51 BS00022950_51 BS00022957_51 BS00022968_51 ## 1 2 0 2 2 0 ## 2 2 0 0 2 2 ## 3 0 2 0 0 0 ## 4 2 2 2 2 0 ## 5 0 0 0 2 0 ## 6 2 0 0 2 0 ## BS00022972_51 BS00022978_51 BS00022982_51 BS00022988_51 BS00022991_51 ## 1 0 0 2 2 2 ## 2 0 2 2 2 2 ## 3 0 0 2 2 0 ## 4 0 2 2 2 0 ## 5 0 2 0 2 0 ## 6 2 2 0 2 2 ## BS00023007_51 BS00023014_51 BS00023017_51 BS00023018_51 BS00023027_51 ## 1 0 0 0 0 0 ## 2 2 2 0 2 2 ## 3 0 2 0 2 2 ## 4 0 0 0 0 2 ## 5 2 2 2 2 0 ## 6 2 0 0 2 2 ## BS00023028_51 BS00023050_51 BS00023064_51 BS00023068_51 BS00023069_51 ## 1 2 2 0 2 2 ## 2 0 2 0 2 2 ## 3 0 2 0 0 2 ## 4 0 2 0 2 2 ## 5 2 2 0 2 2 ## 6 0 2 0 0 2 ## BS00023071_51 BS00023072_51 BS00023075_51 BS00023080_51 BS00023092_51 ## 1 0 0 2 2 2 ## 2 0 0 2 2 2 ## 3 0 2 2 2 2 ## 4 0 2 1 2 2 ## 5 0 2 2 2 2 ## 6 0 0 2 0 2 ## BS00023103_51 BS00023126_51 BS00023139_51 BS00023140_51 BS00023166_51 ## 1 0 2 2 2 0 ## 2 2 2 2 2 1 ## 3 2 2 2 0 2 ## 4 0 2 2 0 2 ## 5 2 2 2 0 2 ## 6 0 2 0 0 0 ## BS00023173_51 BS00023188_51 BS00023192_51 BS00023204_51 BS00023207_51 ## 1 0 2 2 2 2 ## 2 2 1 2 2 2 ## 3 2 2 2 0 2 ## 4 2 2 2 2 2 ## 5 2 0 2 2 2 ## 6 0 0 2 2 2 ## BS00023221_51 BS00023222_51 BS00023225_51 BS00023302_51 BS00023532_51 ## 1 0 0 2 1 2 ## 2 0 2 2 0 2 ## 3 0 2 2 0 2 ## 4 2 2 0 0 2 ## 5 2 2 0 0 2 ## 6 2 2 2 0 2 ## BS00023627_51 BS00023641_51 BS00023645_51 BS00023755_51 BS00023763_51 ## 1 2 2 2 2 2 ## 2 2 2 2 0 2 ## 3 0 2 1 2 2 ## 4 0 2 2 2 2 ## 5 1 2 2 2 2 ## 6 0 2 0 2 2 ## BS00023766_51 BS00023884_51 BS00023893_51 BS00023902_51 BS00023940_51 ## 1 0 0 2 0 2 ## 2 0 2 2 0 0 ## 3 0 2 2 0 0 ## 4 0 2 2 2 2 ## 5 0 2 2 0 0 ## 6 0 2 2 0 0 ## BS00024440_51 BS00024496_51 BS00024617_51 BS00024814_51 BS00024829_51 ## 1 0 0 0 2 0 ## 2 2 2 2 2 1 ## 3 0 2 0 2 2 ## 4 2 0 0 2 2 ## 5 2 0 0 2 2 ## 6 0 0 0 2 2 ## BS00024901_51 BS00024921_51 BS00025031_51 BS00025084_51 BS00025114_51 ## 1 0 0 2 2 2 ## 2 0 0 0 2 2 ## 3 0 0 0 2 2 ## 4 0 2 0 2 0 ## 5 0 2 0 2 2 ## 6 0 2 0 2 0 ## BS00025191_51 BS00025278_51 BS00025521_51 BS00025560_51 BS00025580_51 ## 1 0 0 0 0 2 ## 2 0 2 0 0 2 ## 3 1 2 0 2 2 ## 4 2 0 0 0 2 ## 5 0 0 0 2 -1 ## 6 0 2 0 0 0 ## BS00025880_51 BS00026032_51 BS00026037_51 BS00026076_51 BS00026396_51 ## 1 2 2 0 2 0 ## 2 0 2 2 1 0 ## 3 2 2 2 2 0 ## 4 2 2 0 0 0 ## 5 2 2 0 0 0 ## 6 2 2 2 0 0 ## BS00026456_51 BS00026471_51 BS00026678_51 BS00027006_51 BS00027313_51 ## 1 0 2 2 2 2 ## 2 0 0 2 2 0 ## 3 2 0 1 2 2 ## 4 2 0 0 2 0 ## 5 0 0 0 0 0 ## 6 0 2 0 1 0 ## BS00027469_51 BS00027942_51 BS00028028_51 BS00028033_51 BS00028167_51 ## 1 0 0 0 0 0 ## 2 0 0 0 0 0 ## 3 2 0 -1 2 -1 ## 4 2 0 0 0 0 ## 5 2 0 2 0 2 ## 6 2 0 0 0 2 ## BS00028183_51 BS00028279_51 BS00028476_51 BS00028532_51 BS00028660_51 ## 1 2 2 2 2 1 ## 2 2 2 0 2 2 ## 3 2 2 0 0 2 ## 4 2 2 0 0 2 ## 5 2 0 0 2 2 ## 6 2 2 2 0 2 ## BS00028747_51 BS00028760_51 BS00029127_51 BS00029208_51 BS00029332_51 ## 1 2 0 2 0 2 ## 2 0 1 2 0 2 ## 3 0 2 2 0 2 ## 4 0 2 0 0 2 ## 5 0 0 2 2 2 ## 6 0 2 2 0 2 ## BS00029347_51 BS00029348_51 BS00029386_51 BS00029915_51 BS00030036_51 ## 1 2 0 0 0 0 ## 2 2 0 0 0 0 ## 3 2 0 0 0 0 ## 4 2 0 2 0 0 ## 5 2 0 2 0 0 ## 6 2 0 2 0 0 ## BS00030172_51 BS00030203_51 BS00030361_51 BS00030651_51 BS00030768_51 ## 1 2 2 2 0 0 ## 2 2 0 2 0 0 ## 3 0 0 2 0 0 ## 4 2 2 2 2 0 ## 5 2 2 2 0 0 ## 6 0 2 2 0 0 ## BS00030991_51 BS00031024_51 BS00031028_51 BS00031073_51 BS00031143_51 ## 1 0 2 2 2 0 ## 2 2 0 2 0 0 ## 3 2 2 0 2 0 ## 4 0 0 2 2 0 ## 5 2 1 2 2 0 ## 6 2 2 0 2 0 ## BS00031178_51 BS00031366_51 BS00031596_51 BS00031702_51 BS00031746_51 ## 1 0 2 0 2 0 ## 2 0 2 2 2 2 ## 3 2 2 0 2 2 ## 4 2 0 0 2 2 ## 5 1 0 2 2 2 ## 6 2 0 0 2 2 ## BS00031793_51 BS00031814_51 BS00031820_51 BS00031903_51 BS00032003_51 ## 1 0 0 2 1 2 ## 2 0 0 1 2 2 ## 3 0 0 2 1 2 ## 4 0 0 2 1 2 ## 5 0 0 2 2 2 ## 6 0 0 2 2 2 ## BS00032017_51 BS00032035_51 BS00032149_51 BS00032364_51 BS00032381_51 ## 1 0 2 2 0 0 ## 2 0 0 0 2 0 ## 3 0 2 2 0 0 ## 4 0 2 2 2 2 ## 5 0 2 2 1 0 ## 6 0 0 0 0 0 ## BS00032519_51 BS00032692_51 BS00032746_51 BS00032798_51 BS00032830_51 ## 1 2 0 0 0 0 ## 2 2 0 0 2 0 ## 3 2 0 2 0 2 ## 4 0 0 0 2 2 ## 5 0 0 2 2 0 ## 6 0 0 2 0 2 ## BS00033061_51 BS00033372_51 BS00033612_51 BS00033613_51 BS00033629_51 ## 1 0 0 0 0 2 ## 2 0 2 0 0 2 ## 3 2 2 2 0 2 ## 4 2 0 2 0 0 ## 5 0 2 2 0 2 ## 6 0 0 2 0 2 ## BS00033641_51 BS00033658_51 BS00033737_51 BS00033768_51 BS00033770_51 ## 1 0 0 2 0 0 ## 2 0 0 0 0 0 ## 3 0 0 2 0 0 ## 4 2 0 2 0 2 ## 5 0 0 0 0 0 ## 6 0 0 2 2 0 ## BS00034147_51 BS00034260_51 BS00034315_51 BS00034817_51 BS00034870_51 ## 1 2 2 2 0 2 ## 2 2 0 2 2 2 ## 3 2 1 2 0 2 ## 4 0 2 2 0 2 ## 5 0 0 2 2 2 ## 6 0 2 2 0 2 ## BS00034886_51 BS00035032_51 BS00035141_51 BS00035190_51 BS00035256_51 ## 1 2 2 0 2 2 ## 2 0 0 0 2 0 ## 3 0 2 0 2 2 ## 4 0 0 0 2 2 ## 5 0 0 0 0 2 ## 6 0 2 0 2 0 ## BS00035273_51 BS00035381_51 BS00035423_51 BS00035426_51 BS00035559_51 ## 1 0 0 0 0 0 ## 2 0 0 0 0 2 ## 3 2 0 0 0 2 ## 4 2 2 0 2 0 ## 5 2 2 0 2 2 ## 6 2 0 2 2 2 ## BS00035630_51 BS00035732_51 BS00036033_51 BS00036103_51 BS00036168_51 ## 1 0 0 2 2 0 ## 2 0 2 2 2 0 ## 3 2 2 0 2 2 ## 4 2 0 1 2 0 ## 5 0 1 0 2 2 ## 6 0 0 2 2 2 ## BS00036421_51 BS00036493_51 BS00036721_51 BS00036766_51 BS00036851_51 ## 1 0 2 0 0 0 ## 2 1 2 0 2 2 ## 3 2 0 0 2 2 ## 4 0 0 0 2 0 ## 5 0 0 0 2 0 ## 6 0 0 0 0 2 ## BS00036878_51 BS00037002_51 BS00037006_51 BS00037019_51 BS00037020_51 ## 1 2 2 2 2 2 ## 2 2 0 2 2 2 ## 3 2 0 0 0 2 ## 4 0 2 0 0 2 ## 5 2 0 0 2 2 ## 6 0 2 0 0 2 ## BS00037094_51 BS00037278_51 BS00037357_51 BS00037387_51 BS00037487_51 ## 1 0 0 0 1 0 ## 2 0 0 0 2 0 ## 3 0 0 1 2 0 ## 4 0 2 0 2 0 ## 5 0 0 0 1 0 ## 6 0 0 0 2 2 ## BS00037871_51 BS00037933_51 BS00038040_51 BS00038349_51 BS00038418_51 ## 1 2 2 0 0 2 ## 2 2 2 0 2 2 ## 3 2 0 0 0 0 ## 4 0 0 0 2 0 ## 5 0 2 0 0 0 ## 6 0 2 0 2 2 ## BS00038498_51 BS00038646_51 BS00038823_51 BS00038834_51 BS00039147_51 ## 1 2 0 2 2 2 ## 2 2 0 0 2 0 ## 3 0 0 2 2 0 ## 4 0 0 2 2 0 ## 5 2 0 2 2 0 ## 6 0 2 2 2 0 ## BS00039185_51 BS00039187_51 BS00039188_51 BS00039492_51 BS00039498_51 ## 1 2 2 0 2 2 ## 2 2 2 2 2 2 ## 3 2 2 0 2 0 ## 4 2 0 0 2 2 ## 5 2 2 0 2 0 ## 6 2 2 2 0 0 ## BS00039502_51 BS00039561_51 BS00039641_51 BS00039749_51 BS00039766_51 ## 1 2 0 0 1 0 ## 2 0 2 2 2 0 ## 3 0 0 2 0 0 ## 4 2 2 1 2 2 ## 5 0 2 2 2 0 ## 6 0 0 0 0 0 ## BS00039795_51 BS00039811_51 BS00039852_51 BS00039874_51 BS00039925_51 ## 1 0 0 0 2 2 ## 2 2 2 0 2 2 ## 3 2 2 0 2 0 ## 4 2 1 0 2 2 ## 5 2 2 0 2 2 ## 6 2 1 0 2 0 ## BS00039935_51 BS00040123_51 BS00040127_51 BS00040143_51 BS00040159_51 ## 1 0 2 2 0 2 ## 2 0 2 2 0 2 ## 3 0 2 2 2 2 ## 4 1 2 1 0 2 ## 5 0 2 2 0 2 ## 6 2 2 0 2 2 ## BS00040246_51 BS00040251_51 BS00040283_51 BS00040285_51 BS00040305_51 ## 1 0 2 0 0 2 ## 2 0 2 1 0 2 ## 3 0 2 0 0 0 ## 4 0 2 2 2 0 ## 5 0 2 2 2 0 ## 6 0 2 0 0 2 ## BS00040647_51 BS00040657_51 BS00040742_51 BS00040743_51 BS00040916_51 ## 1 2 0 0 0 2 ## 2 2 0 0 2 0 ## 3 1 0 0 1 2 ## 4 2 0 1 0 0 ## 5 2 0 0 2 2 ## 6 0 0 0 0 2 ## BS00040929_51 BS00041063_51 BS00041093_51 BS00041355_51 BS00041585_51 ## 1 2 0 2 2 2 ## 2 2 0 2 2 2 ## 3 2 2 2 2 0 ## 4 2 2 2 2 2 ## 5 0 2 2 2 2 ## 6 2 2 0 2 0 ## BS00041816_51 BS00042111_51 BS00042116_51 BS00042195_51 BS00042244_51 ## 1 0 2 2 2 2 ## 2 0 0 0 2 2 ## 3 0 0 2 2 2 ## 4 0 0 0 2 2 ## 5 2 0 0 2 2 ## 6 2 0 2 2 2 ## BS00042388_51 BS00042822_51 BS00042999_51 BS00043666_51 BS00044274_51 ## 1 1 2 0 2 0 ## 2 0 2 0 2 2 ## 3 2 2 0 0 2 ## 4 0 1 0 0 1 ## 5 2 2 0 0 0 ## 6 0 2 0 2 2 ## BS00044332_51 BS00044443_51 BS00044720_51 BS00044752_51 BS00044942_51 ## 1 0 2 0 0 0 ## 2 0 2 2 0 0 ## 3 0 2 0 0 0 ## 4 0 2 0 2 0 ## 5 2 2 0 2 0 ## 6 0 2 0 0 0 ## BS00045171_51 BS00045195_51 BS00045327_51 BS00045446_51 BS00045453_51 ## 1 0 2 0 0 2 ## 2 0 2 0 2 2 ## 3 0 0 0 0 2 ## 4 0 0 0 0 2 ## 5 0 2 0 0 2 ## 6 0 0 0 0 2 ## BS00045473_51 BS00045480_51 BS00045521_51 BS00045758_51 BS00046263_51 ## 1 2 0 0 0 2 ## 2 0 2 2 0 2 ## 3 2 0 2 0 0 ## 4 2 0 0 2 2 ## 5 2 0 2 0 2 ## 6 2 2 2 0 2 ## BS00046375_51 BS00046538_51 BS00046672_51 BS00046963_51 BS00046976_51 ## 1 0 0 2 2 2 ## 2 0 0 2 2 0 ## 3 0 0 0 2 2 ## 4 0 2 0 2 2 ## 5 0 0 0 2 0 ## 6 2 0 0 2 2 ## BS00047085_51 BS00047179_51 BS00047195_51 BS00047220_51 BS00047388_51 ## 1 2 1 2 2 0 ## 2 2 1 2 2 0 ## 3 0 2 0 2 0 ## 4 2 0 0 0 2 ## 5 0 2 2 0 0 ## 6 2 0 2 0 0 ## BS00047668_51 BS00047811_51 BS00047836_51 BS00047901_51 BS00048607_51 ## 1 2 2 0 0 2 ## 2 0 2 0 0 2 ## 3 1 2 0 2 0 ## 4 0 2 0 2 0 ## 5 0 0 0 0 0 ## 6 0 2 0 0 2 ## BS00048633_51 BS00048757_51 BS00049032_51 BS00049135_51 BS00049220_51 ## 1 2 2 0 2 2 ## 2 0 2 0 2 2 ## 3 2 2 0 2 2 ## 4 2 0 2 2 2 ## 5 0 2 2 2 2 ## 6 2 2 2 2 2 ## BS00049370_51 BS00049403_51 BS00049582_51 BS00049644_51 BS00049730_51 ## 1 0 0 2 0 0 ## 2 0 0 2 0 0 ## 3 2 1 2 0 2 ## 4 0 2 2 0 0 ## 5 0 2 2 2 0 ## 6 0 0 2 2 2 ## BS00049779_51 BS00049937_51 BS00049941_51 BS00049961_51 BS00050109_51 ## 1 0 0 1 2 0 ## 2 2 0 1 1 0 ## 3 2 2 2 2 2 ## 4 2 1 0 2 2 ## 5 2 2 0 2 2 ## 6 2 2 2 2 2 ## BS00050522_51 BS00050882_51 BS00050993_51 BS00051607_51 BS00051843_51 ## 1 2 2 0 0 2 ## 2 2 0 0 0 2 ## 3 2 2 2 0 0 ## 4 2 2 2 0 0 ## 5 2 0 0 0 0 ## 6 2 2 0 0 0 ## BS00051998_51 BS00053365_51 BS00054496_51 BS00054881_51 BS00054978_51 ## 1 1 0 2 2 2 ## 2 0 2 2 2 2 ## 3 2 2 2 0 2 ## 4 0 2 2 0 0 ## 5 2 2 2 2 0 ## 6 0 0 2 2 0 ## BS00055102_51 BS00055211_51 BS00055353_51 BS00055583_51 BS00055768_51 ## 1 0 0 2 0 2 ## 2 2 0 2 0 2 ## 3 0 2 2 0 0 ## 4 2 2 2 0 2 ## 5 2 2 2 0 2 ## 6 0 2 2 0 2 ## BS00055864_51 BS00056073_51 BS00056089_51 BS00056147_51 BS00056642_51 ## 1 0 2 0 2 2 ## 2 2 2 0 2 0 ## 3 0 2 2 2 0 ## 4 0 2 2 2 2 ## 5 2 0 2 2 2 ## 6 2 2 2 0 0 ## BS00057059_51 BS00057153_51 BS00057323_51 BS00057523_51 BS00057988_51 ## 1 2 2 0 0 0 ## 2 2 2 1 0 0 ## 3 2 0 2 0 0 ## 4 0 0 2 0 1 ## 5 0 0 2 0 0 ## 6 0 2 2 0 0 ## BS00058591_51 BS00058654_51 BS00058861_51 BS00058929_51 BS00059046_51 ## 1 0 2 0 2 0 ## 2 0 2 0 2 2 ## 3 0 0 2 2 0 ## 4 0 2 2 2 1 ## 5 0 2 2 2 0 ## 6 0 2 2 2 2 ## BS00059172_51 BS00059416_51 BS00059422_51 BS00060015_51 BS00060042_51 ## 1 2 0 0 0 0 ## 2 0 0 2 0 0 ## 3 2 0 2 2 0 ## 4 2 2 2 2 0 ## 5 2 0 0 0 2 ## 6 2 2 0 0 2 ## BS00060189_51 BS00060391_51 BS00060445_51 BS00060460_51 BS00060596_51 ## 1 2 2 2 1 0 ## 2 2 2 2 0 0 ## 3 2 0 0 0 2 ## 4 2 0 2 2 0 ## 5 2 0 2 0 2 ## 6 2 0 2 0 2 ## BS00060612_51 BS00060653_51 BS00060666_51 BS00060686_51 BS00061012_51 ## 1 2 0 2 2 2 ## 2 2 0 2 2 0 ## 3 2 2 2 2 0 ## 4 2 0 0 2 2 ## 5 2 2 2 0 2 ## 6 2 2 0 2 0 ## BS00061173_51 BS00061187_51 BS00061326_51 BS00061911_51 BS00061979_51 ## 1 0 0 0 0 2 ## 2 0 0 0 0 0 ## 3 2 0 0 0 2 ## 4 2 0 0 0 2 ## 5 2 0 0 0 2 ## 6 2 0 0 2 0 ## BS00062079_51 BS00062144_51 BS00062485_51 BS00062578_51 BS00062644_51 ## 1 2 0 2 0 0 ## 2 2 0 2 0 0 ## 3 2 2 2 0 0 ## 4 2 2 2 0 0 ## 5 2 2 2 0 0 ## 6 2 2 2 0 0 ## BS00062677_51 BS00062679_51 BS00062724_51 BS00062731_51 BS00062736_51 ## 1 0 2 2 2 0 ## 2 0 2 2 2 0 ## 3 0 2 1 2 2 ## 4 2 0 2 2 0 ## 5 2 2 2 0 0 ## 6 2 2 2 2 0 ## BS00062771_51 BS00062829_51 BS00062843_51 BS00062869_51 BS00062892_51 ## 1 2 2 0 2 2 ## 2 0 0 2 2 2 ## 3 2 2 2 2 2 ## 4 1 0 2 2 2 ## 5 0 0 2 2 2 ## 6 2 2 2 2 0 ## BS00062894_51 BS00062907_51 BS00062914_51 BS00062940_51 BS00062949_51 ## 1 0 2 0 0 2 ## 2 0 0 0 0 0 ## 3 2 0 0 2 0 ## 4 2 2 0 2 2 ## 5 2 0 0 0 0 ## 6 2 0 0 2 0 ## BS00062967_51 BS00062974_51 BS00062996_51 BS00063008_51 BS00063035_51 ## 1 2 2 0 0 0 ## 2 0 0 2 2 0 ## 3 2 2 0 2 2 ## 4 2 2 0 2 2 ## 5 2 2 0 2 2 ## 6 0 2 0 0 0 ## BS00063092_51 BS00063095_51 BS00063160_51 BS00063175_51 BS00063208_51 ## 1 0 0 0 0 0 ## 2 2 2 2 0 1 ## 3 2 0 0 0 0 ## 4 0 0 0 0 0 ## 5 2 0 0 0 0 ## 6 2 2 0 2 0 ## BS00063214_51 BS00063225_51 BS00063245_51 BS00063296_51 BS00063300_51 ## 1 2 2 2 0 0 ## 2 2 0 2 0 2 ## 3 0 0 0 0 0 ## 4 0 2 2 0 0 ## 5 0 0 2 0 0 ## 6 0 2 2 0 0 ## BS00063368_51 BS00063371_51 BS00063399_51 BS00063458_51 BS00063517_51 ## 1 2 1 0 2 0 ## 2 2 0 0 0 0 ## 3 2 0 0 2 0 ## 4 0 0 2 0 2 ## 5 0 0 2 0 0 ## 6 2 0 2 2 2 ## BS00063518_51 BS00063549_51 BS00063595_51 BS00063821_51 BS00063928_51 ## 1 1 0 2 0 2 ## 2 0 0 2 0 0 ## 3 0 0 2 0 2 ## 4 0 0 2 0 2 ## 5 2 0 0 0 2 ## 6 2 0 0 0 2 ## BS00063971_51 BS00064032_51 BS00064039_51 BS00064042_51 BS00064055_51 ## 1 2 2 0 0 2 ## 2 2 0 0 0 2 ## 3 2 1 2 0 2 ## 4 2 2 2 2 2 ## 5 2 0 2 -1 2 ## 6 2 0 2 0 2 ## BS00064077_51 BS00064085_51 BS00064140_51 BS00064176_51 BS00064188_51 ## 1 0 0 2 2 2 ## 2 2 0 2 2 2 ## 3 2 0 2 0 2 ## 4 2 0 2 0 2 ## 5 2 0 0 0 2 ## 6 2 0 2 0 2 ## BS00064214_51 BS00064227_51 BS00064269_51 BS00064324_51 BS00064344_51 ## 1 0 2 2 1 0 ## 2 0 2 2 2 2 ## 3 0 2 2 0 2 ## 4 0 2 0 2 2 ## 5 0 0 2 2 -1 ## 6 0 2 2 0 2 ## BS00064359_51 BS00064368_51 BS00064369_51 BS00064443_51 BS00064483_51 ## 1 0 2 0 2 2 ## 2 0 2 2 2 0 ## 3 0 2 0 2 0 ## 4 0 0 2 2 2 ## 5 0 2 0 2 2 ## 6 0 0 2 2 0 ## BS00064538_51 BS00064548_51 BS00064608_51 BS00064611_51 BS00064673_51 ## 1 2 2 0 0 0 ## 2 1 2 2 2 0 ## 3 0 0 0 2 0 ## 4 2 1 2 2 0 ## 5 2 0 0 2 0 ## 6 2 2 0 2 0 ## BS00064714_51 BS00064765_51 BS00064767_51 BS00064783_51 BS00064810_51 ## 1 2 0 2 0 2 ## 2 2 0 2 2 2 ## 3 2 2 2 0 1 ## 4 2 0 2 2 2 ## 5 2 0 2 2 2 ## 6 2 0 2 0 0 ## BS00064836_51 BS00064938_51 BS00064956_51 BS00065005_51 BS00065020_51 ## 1 2 2 0 2 0 ## 2 2 2 2 2 0 ## 3 2 2 2 2 0 ## 4 2 1 2 0 0 ## 5 0 2 2 2 2 ## 6 0 2 0 2 0 ## BS00065053_51 BS00065082_51 BS00065105_51 BS00065110_51 BS00065135_51 ## 1 2 0 0 2 0 ## 2 0 0 0 2 2 ## 3 0 0 0 2 2 ## 4 0 0 0 2 2 ## 5 0 0 0 0 2 ## 6 0 0 0 2 2 ## BS00065164_51 BS00065170_51 BS00065217_51 BS00065222_51 BS00065231_51 ## 1 0 2 0 2 0 ## 2 0 2 2 2 0 ## 3 2 2 0 0 0 ## 4 1 2 0 0 2 ## 5 -1 2 2 1 0 ## 6 2 2 0 0 2 ## BS00065245_51 BS00065248_51 BS00065257_51 BS00065292_51 BS00065366_51 ## 1 2 2 2 2 0 ## 2 2 2 0 1 0 ## 3 2 0 1 2 0 ## 4 1 2 0 0 0 ## 5 0 2 2 2 0 ## 6 0 2 2 2 0 ## BS00065422_51 BS00065429_51 BS00065509_51 BS00065529_51 BS00065548_51 ## 1 2 2 0 0 2 ## 2 2 2 2 2 2 ## 3 0 0 2 0 0 ## 4 2 0 0 0 2 ## 5 2 0 0 0 0 ## 6 2 0 2 0 2 ## BS00065607_51 BS00065624_51 BS00065628_51 BS00065648_51 BS00065676_51 ## 1 2 0 2 2 0 ## 2 2 2 2 0 0 ## 3 2 2 1 2 0 ## 4 0 2 2 2 0 ## 5 0 2 2 2 0 ## 6 2 2 2 2 0 ## BS00065714_51 BS00065734_51 BS00065818_51 BS00065863_51 BS00065865_51 ## 1 0 0 0 0 0 ## 2 0 0 1 2 0 ## 3 2 0 2 2 0 ## 4 0 0 2 1 2 ## 5 0 0 2 0 2 ## 6 2 0 2 0 2 ## BS00065870_51 BS00065873_51 BS00065882_51 BS00065889_51 BS00065891_51 ## 1 1 2 0 2 0 ## 2 2 2 0 0 2 ## 3 0 2 0 2 0 ## 4 2 0 0 2 2 ## 5 0 2 0 0 2 ## 6 2 0 0 2 2 ## BS00065914_51 BS00065927_51 BS00065932_51 BS00065936_51 BS00065973_51 ## 1 2 2 2 0 0 ## 2 2 2 2 0 0 ## 3 2 1 2 0 0 ## 4 0 2 2 0 0 ## 5 2 0 2 0 0 ## 6 2 0 2 0 0 ## BS00065977_51 BS00065993_51 BS00066108_51 BS00066121_51 BS00066138_51 ## 1 2 0 2 2 2 ## 2 2 0 2 2 2 ## 3 1 0 2 2 2 ## 4 2 0 0 2 2 ## 5 0 0 2 2 2 ## 6 0 0 0 2 0 ## BS00066186_51 BS00066209_51 BS00066211_51 BS00066224_51 BS00066230_51 ## 1 0 2 2 2 0 ## 2 2 2 0 0 0 ## 3 2 2 2 2 0 ## 4 1 0 2 0 0 ## 5 0 2 0 2 0 ## 6 2 0 0 2 0 ## BS00066271_51 BS00066288_51 BS00066309_51 BS00066319_51 BS00066389_51 ## 1 0 0 1 0 2 ## 2 0 0 2 0 2 ## 3 0 0 2 0 0 ## 4 0 0 2 0 2 ## 5 0 2 2 0 0 ## 6 0 0 2 0 0 ## BS00066404_51 BS00066413_51 BS00066447_51 BS00066468_51 BS00066475_51 ## 1 2 2 0 0 0 ## 2 0 0 2 2 2 ## 3 0 0 1 1 0 ## 4 0 2 0 2 1 ## 5 0 0 0 0 2 ## 6 0 2 0 0 0 ## BS00066479_51 BS00066526_51 BS00066545_51 BS00066585_51 BS00066623_51 ## 1 0 0 0 2 2 ## 2 1 0 0 2 0 ## 3 2 0 0 2 2 ## 4 2 0 2 0 1 ## 5 2 0 0 0 0 ## 6 0 0 0 2 0 ## BS00066636_51 BS00066647_51 BS00066714_51 BS00066783_51 BS00066810_51 ## 1 2 2 2 0 2 ## 2 0 1 2 0 0 ## 3 0 2 2 2 0 ## 4 0 0 2 0 0 ## 5 0 0 2 0 0 ## 6 0 0 2 0 0 ## BS00066852_51 BS00066885_51 BS00066905_51 BS00066944_51 BS00067015_51 ## 1 0 0 0 2 2 ## 2 0 2 0 0 0 ## 3 0 2 0 1 0 ## 4 2 0 0 2 0 ## 5 0 0 0 0 2 ## 6 0 2 0 2 2 ## BS00067046_51 BS00067074_51 BS00067094_51 BS00067096_51 BS00067102_51 ## 1 0 0 1 2 2 ## 2 0 0 0 0 2 ## 3 2 2 0 2 0 ## 4 2 0 2 2 2 ## 5 2 2 0 2 0 ## 6 0 2 0 2 2 ## BS00067161_51 BS00067163_51 BS00067203_51 BS00067209_51 BS00067244_51 ## 1 0 2 2 0 2 ## 2 0 2 2 0 2 ## 3 2 2 2 0 2 ## 4 2 2 2 0 2 ## 5 0 0 2 0 2 ## 6 2 2 2 0 2 ## BS00067276_51 BS00067285_51 BS00067388_51 BS00067417_51 BS00067433_51 ## 1 1 0 2 0 0 ## 2 2 0 2 0 0 ## 3 0 2 2 0 0 ## 4 2 0 2 2 0 ## 5 0 2 2 0 0 ## 6 0 0 2 0 0 ## BS00067436_51 BS00067453_51 BS00067484_51 BS00067526_51 BS00067584_51 ## 1 0 2 0 2 0 ## 2 0 0 0 2 0 ## 3 1 2 0 2 0 ## 4 0 2 2 2 0 ## 5 0 2 2 2 0 ## 6 0 2 2 2 0 ## BS00067588_51 BS00067597_51 BS00067599_51 BS00067606_51 BS00067622_51 ## 1 2 0 0 0 2 ## 2 2 0 0 0 2 ## 3 2 2 0 0 2 ## 4 2 2 0 0 0 ## 5 2 2 2 0 2 ## 6 2 0 0 0 2 ## BS00067627_51 BS00067630_51 BS00067650_51 BS00067651_51 BS00067652_51 ## 1 0 2 2 0 2 ## 2 2 2 2 2 2 ## 3 1 2 2 0 2 ## 4 0 2 2 2 2 ## 5 2 2 2 0 2 ## 6 0 2 2 0 2 ## BS00067663_51 BS00067676_51 BS00067682_51 BS00067683_51 BS00067741_51 ## 1 1 0 2 2 2 ## 2 0 2 2 2 2 ## 3 2 0 2 2 2 ## 4 1 0 2 1 2 ## 5 2 0 2 2 2 ## 6 2 0 0 2 2 ## BS00067744_51 BS00067759_51 BS00067768_51 BS00067769_51 BS00067775_51 ## 1 0 0 2 0 0 ## 2 0 2 2 0 0 ## 3 0 2 2 0 0 ## 4 0 2 2 0 0 ## 5 2 2 2 0 0 ## 6 0 2 0 0 0 ## BS00067792_51 BS00067836_51 BS00067882_51 BS00067901_51 BS00067938_51 ## 1 2 0 0 0 0 ## 2 2 1 0 1 0 ## 3 0 2 2 2 2 ## 4 2 0 2 2 2 ## 5 0 0 2 2 0 ## 6 0 2 2 2 2 ## BS00067961_51 BS00067962_51 BS00067983_51 BS00068012_51 BS00068050_51 ## 1 2 0 0 0 2 ## 2 1 0 0 0 2 ## 3 2 0 2 0 0 ## 4 2 0 2 2 2 ## 5 2 0 0 0 2 ## 6 2 2 2 2 2 ## BS00068069_51 BS00068096_51 BS00068108_51 BS00068168_51 BS00068178_51 ## 1 2 2 2 2 0 ## 2 0 2 2 2 0 ## 3 2 2 2 2 0 ## 4 2 2 2 0 0 ## 5 2 2 2 0 0 ## 6 2 2 2 0 0 ## BS00068243_51 BS00068327_51 BS00068393_51 BS00068435_51 BS00068456_51 ## 1 2 0 0 2 2 ## 2 2 2 0 2 0 ## 3 2 2 2 2 2 ## 4 0 2 2 2 0 ## 5 2 2 2 2 0 ## 6 2 2 2 2 2 ## BS00068494_51 BS00068508_51 BS00068520_51 BS00068556_51 BS00068559_51 ## 1 2 2 2 0 0 ## 2 2 0 2 2 0 ## 3 1 2 2 0 0 ## 4 2 2 2 2 0 ## 5 2 2 2 0 2 ## 6 2 2 2 2 2 ## BS00068710_51 BS00068851_51 BS00068863_51 BS00068864_51 BS00069075_51 ## 1 2 0 2 0 0 ## 2 2 0 2 0 2 ## 3 2 2 0 2 0 ## 4 2 2 0 2 0 ## 5 2 2 1 2 -1 ## 6 2 0 2 2 2 ## BS00069163_51 BS00069271_51 BS00069355_51 BS00069431_51 BS00069822_51 ## 1 2 0 2 0 0 ## 2 0 0 2 0 2 ## 3 2 0 2 0 0 ## 4 2 1 2 2 2 ## 5 2 0 2 0 2 ## 6 2 2 2 2 2 ## BS00069915_51 BS00070018_51 BS00070050_51 BS00070104_51 BS00070188_51 ## 1 2 2 0 0 2 ## 2 2 2 0 0 2 ## 3 2 2 2 0 0 ## 4 0 1 2 2 2 ## 5 2 2 0 0 2 ## 6 2 2 0 0 2 ## BS00070210_51 BS00070448_51 BS00070455_51 BS00070507_51 BS00070560_51 ## 1 0 2 0 0 2 ## 2 0 2 0 0 2 ## 3 0 2 0 0 2 ## 4 0 2 2 0 2 ## 5 2 2 2 0 2 ## 6 0 2 2 0 2 ## BS00070584_51 BS00070692_51 BS00070706_51 BS00070751_51 BS00070797_51 ## 1 2 2 2 0 0 ## 2 2 0 0 2 0 ## 3 2 0 2 0 0 ## 4 1 1 2 0 1 ## 5 1 0 2 0 2 ## 6 2 0 2 0 2 ## BS00070856_51 BS00070857_51 BS00071025_51 BS00071042_51 BS00071161_51 ## 1 0 2 2 0 0 ## 2 0 2 0 0 0 ## 3 2 0 0 0 0 ## 4 1 2 0 2 0 ## 5 0 2 0 0 0 ## 6 0 0 0 2 0 ## BS00071346_51 BS00071571_51 BS00071573_51 BS00071660_51 BS00071732_51 ## 1 0 0 0 2 2 ## 2 0 0 0 2 2 ## 3 0 0 0 2 0 ## 4 2 0 0 1 2 ## 5 0 0 0 0 0 ## 6 0 0 0 2 0 ## BS00071823_51 BS00071869_51 BS00072264_51 BS00072349_51 BS00072387_51 ## 1 0 2 2 0 0 ## 2 0 2 0 0 0 ## 3 2 0 2 0 2 ## 4 0 0 2 2 2 ## 5 0 2 2 0 0 ## 6 2 2 2 0 0 ## BS00072903_51 BS00073132_51 BS00073426_51 BS00073658_51 BS00073854_51 ## 1 2 0 2 2 0 ## 2 2 0 2 0 0 ## 3 0 0 2 2 0 ## 4 2 0 0 2 2 ## 5 0 0 0 0 2 ## 6 0 0 2 2 0 ## BS00073898_51 BS00074083_51 BS00074120_51 BS00074259_51 BS00074299_51 ## 1 2 2 0 2 2 ## 2 2 2 0 2 2 ## 3 2 0 2 2 0 ## 4 2 0 0 2 0 ## 5 0 0 2 2 2 ## 6 0 2 0 2 0 ## BS00074429_51 BS00074439_51 BS00074648_51 BS00074911_51 BS00074926_51 ## 1 0 0 2 2 0 ## 2 0 0 2 2 2 ## 3 2 0 2 1 0 ## 4 0 0 2 2 0 ## 5 2 0 2 2 0 ## 6 0 0 2 0 0 ## BS00074962_51 BS00074997_51 BS00075036_51 BS00075332_51 BS00075346_51 ## 1 1 2 0 0 2 ## 2 0 2 0 0 2 ## 3 0 2 0 2 0 ## 4 0 2 0 0 2 ## 5 1 2 0 0 0 ## 6 0 2 0 2 2 ## BS00075524_51 BS00075569_51 BS00075598_51 BS00075615_51 BS00075815_51 ## 1 0 0 2 0 2 ## 2 0 2 2 2 2 ## 3 2 2 0 2 2 ## 4 1 0 0 2 2 ## 5 0 2 0 2 2 ## 6 2 0 0 2 2 ## BS00075819_51 BS00075897_51 BS00075959_51 BS00076000_51 BS00076033_51 ## 1 2 2 2 0 0 ## 2 2 2 2 0 0 ## 3 1 1 0 0 2 ## 4 0 2 0 2 2 ## 5 0 2 0 0 2 ## 6 0 2 0 0 2 ## BS00076248_51 BS00076259_51 BS00076379_51 BS00076394_51 BS00076402_51 ## 1 0 0 2 2 0 ## 2 0 2 0 2 0 ## 3 2 2 2 2 0 ## 4 0 2 0 2 0 ## 5 2 2 0 2 2 ## 6 0 0 2 2 0 ## BS00076693_51 BS00076772_51 BS00077044_51 BS00077597_51 BS00077633_51 ## 1 2 0 2 0 0 ## 2 2 2 2 0 0 ## 3 2 2 2 0 0 ## 4 1 2 2 2 0 ## 5 2 2 2 2 0 ## 6 0 2 2 2 0 ## BS00077635_51 BS00077716_51 BS00077768_51 BS00077819_51 BS00077831_51 ## 1 0 2 2 2 0 ## 2 2 0 0 2 2 ## 3 2 1 2 2 2 ## 4 2 0 2 2 2 ## 5 2 0 0 2 2 ## 6 2 0 2 2 0 ## BS00077896_51 BS00077952_51 BS00077967_51 BS00078116_51 BS00078359_51 ## 1 2 0 0 2 2 ## 2 2 0 2 0 0 ## 3 2 0 0 2 2 ## 4 2 0 0 2 0 ## 5 2 0 0 2 2 ## 6 2 2 0 2 2 ## BS00078401_51 BS00078413_51 BS00078430_51 BS00078473_51 BS00078741_51 ## 1 2 2 0 2 2 ## 2 2 2 0 2 2 ## 3 2 0 0 2 2 ## 4 2 0 1 2 1 ## 5 0 0 2 2 0 ## 6 0 2 0 0 2 ## BS00078982_51 BS00079029_51 BS00079156_51 BS00079189_51 BS00080474_51 ## 1 2 0 0 0 0 ## 2 2 2 0 2 0 ## 3 2 0 0 2 0 ## 4 0 0 0 0 0 ## 5 2 0 0 2 0 ## 6 2 0 2 2 2 ## BS00080751_51 BS00080752_51 BS00081120_51 BS00081125_51 BS00081132_51 ## 1 2 0 0 0 2 ## 2 2 0 0 2 0 ## 3 2 0 0 0 2 ## 4 2 2 0 0 0 ## 5 2 2 0 1 2 ## 6 2 2 2 0 0 ## BS00081335_51 BS00081418_51 BS00081688_51 BS00081749_51 BS00081773_51 ## 1 0 2 0 0 0 ## 2 0 2 2 2 0 ## 3 0 2 2 2 0 ## 4 0 2 2 0 0 ## 5 0 2 2 2 0 ## 6 2 2 2 2 0 ## BS00081871_51 BS00081886_51 BS00082071_51 BS00082211_51 BS00082268_51 ## 1 2 1 2 2 2 ## 2 2 2 0 2 2 ## 3 2 2 1 0 2 ## 4 2 0 2 0 2 ## 5 0 2 0 0 1 ## 6 2 2 0 0 0 ## BS00082423_51 BS00082521_51 BS00082812_51 BS00082900_51 BS00083124_51 ## 1 0 0 0 2 2 ## 2 0 0 2 2 2 ## 3 0 0 0 2 2 ## 4 2 0 0 2 2 ## 5 0 0 0 2 0 ## 6 0 0 0 2 2 ## BS00083146_51 BS00083329_51 BS00083421_51 BS00083497_51 BS00083507_51 ## 1 0 0 1 2 0 ## 2 2 0 2 2 0 ## 3 2 0 0 2 0 ## 4 1 0 2 2 0 ## 5 2 0 1 0 0 ## 6 2 0 2 0 0 ## BS00083818_51 BS00083998_51 BS00084158_51 BS00084226_51 BS00084348_51 ## 1 2 0 0 2 0 ## 2 2 0 0 2 0 ## 3 2 0 0 2 0 ## 4 2 2 0 2 0 ## 5 0 0 0 2 0 ## 6 2 0 0 2 0 ## BS00084881_51 BS00084990_51 BS00085194_51 BS00085967_51 BS00086093_51 ## 1 0 0 2 0 2 ## 2 0 0 2 2 2 ## 3 0 0 2 0 2 ## 4 0 0 0 0 0 ## 5 0 0 1 0 0 ## 6 0 0 2 0 0 ## BS00086534_51 BS00086680_51 BS00086783_51 BS00086964_51 BS00087144_51 ## 1 2 2 2 2 2 ## 2 2 2 0 1 2 ## 3 0 2 0 0 0 ## 4 0 0 0 2 0 ## 5 0 2 0 2 0 ## 6 0 2 0 0 2 ## BS00087190_51 BS00087197_51 BS00087278_51 BS00087406_51 BS00087437_51 ## 1 1 2 2 2 0 ## 2 2 0 2 2 0 ## 3 0 0 1 0 0 ## 4 2 0 1 0 2 ## 5 0 0 2 0 0 ## 6 2 2 2 2 0 ## BS00087588_51 BS00087694_51 BS00087783_51 BS00087784_51 BS00087825_51 ## 1 0 0 0 1 2 ## 2 2 0 0 0 2 ## 3 2 0 0 0 2 ## 4 2 0 0 0 0 ## 5 2 0 2 1 0 ## 6 2 0 0 0 2 ## BS00088136_51 BS00088402_51 BS00088575_51 BS00088579_51 BS00088624_51 ## 1 0 0 2 0 2 ## 2 0 0 2 2 0 ## 3 0 0 2 2 2 ## 4 0 0 2 2 0 ## 5 0 0 2 2 2 ## 6 0 0 2 0 0 ## BS00089031_51 BS00089076_51 BS00089270_51 BS00089403_51 BS00089457_51 ## 1 2 0 2 2 0 ## 2 0 2 0 2 2 ## 3 1 0 0 0 2 ## 4 2 2 0 0 2 ## 5 0 2 0 2 0 ## 6 0 0 2 0 0 ## BS00089563_51 BS00089790_51 BS00089894_51 BS00090225_51 BS00090569_51 ## 1 0 2 2 2 0 ## 2 2 0 2 2 2 ## 3 1 0 2 2 2 ## 4 0 0 2 2 2 ## 5 2 0 2 0 0 ## 6 2 0 2 0 0 ## BS00090770_51 BS00090829_51 BS00091034_51 BS00091099_51 BS00091518_51 ## 1 0 2 2 2 0 ## 2 2 2 2 2 0 ## 3 2 2 2 2 0 ## 4 2 1 0 0 0 ## 5 1 2 0 2 0 ## 6 2 0 2 2 0 ## BS00091752_51 BS00091763_51 BS00091830_51 BS00091867_51 BS00091891_51 ## 1 2 2 0 2 2 ## 2 2 0 0 0 2 ## 3 2 2 0 1 2 ## 4 2 0 0 2 0 ## 5 0 0 2 0 0 ## 6 2 0 0 2 2 ## BS00092492_51 BS00092550_51 BS00092675_51 BS00092839_51 BS00092859_51 ## 1 2 2 2 0 2 ## 2 2 2 2 0 2 ## 3 0 2 2 2 1 ## 4 2 2 2 2 0 ## 5 0 2 2 2 2 ## 6 2 2 2 0 0 ## BS00093078_51 BS00093201_51 BS00093252_51 BS00093447_51 BS00093522_51 ## 1 0 0 2 0 2 ## 2 0 0 2 0 2 ## 3 0 0 2 0 2 ## 4 0 0 2 0 2 ## 5 0 0 2 2 2 ## 6 0 0 2 2 2 ## BS00093771_51 BS00094172_51 BS00094199_51 BS00094237_51 BS00094336_51 ## 1 0 0 0 2 2 ## 2 2 2 0 2 2 ## 3 2 0 0 2 2 ## 4 2 2 0 2 0 ## 5 2 2 0 0 0 ## 6 2 2 0 2 0 ## BS00094343_51 BS00094480_51 BS00094574_51 BS00094670_51 BS00094817_51 ## 1 0 0 0 0 2 ## 2 0 0 0 0 2 ## 3 0 0 0 0 2 ## 4 2 0 2 0 1 ## 5 2 0 2 0 2 ## 6 2 0 2 2 2 ## BS00094821_51 BS00094895_51 BS00094925_51 BS00095228_51 BS00095525_51 ## 1 0 2 2 2 2 ## 2 2 2 2 0 2 ## 3 0 0 2 2 2 ## 4 0 2 0 2 0 ## 5 0 0 0 2 2 ## 6 0 1 2 2 2 ## BS00096240_51 BS00096477_51 BS00096604_51 BS00096719_51 BS00096721_51 ## 1 0 0 2 2 0 ## 2 0 0 0 0 0 ## 3 0 0 0 0 0 ## 4 2 0 0 2 0 ## 5 0 0 0 0 0 ## 6 2 0 2 0 0 ## BS00096882_51 BS00096927_51 BS00096930_51 BS00096942_51 BS00097066_51 ## 1 2 0 2 0 2 ## 2 2 0 2 0 2 ## 3 2 2 2 0 1 ## 4 0 0 0 0 0 ## 5 2 0 0 0 0 ## 6 2 0 0 0 0 ## BS00097147_51 BS00097265_51 BS00097267_51 BS00097485_51 BS00097939_51 ## 1 2 0 0 2 2 ## 2 2 0 0 2 0 ## 3 2 1 0 2 2 ## 4 0 0 0 0 2 ## 5 2 0 0 0 2 ## 6 2 0 0 2 2 ## BS00097986_51 BS00098062_51 BS00098312_51 BS00098413_51 BS00098423_51 ## 1 0 0 2 0 0 ## 2 0 0 2 0 0 ## 3 0 2 2 0 0 ## 4 0 0 2 0 0 ## 5 2 0 2 0 2 ## 6 2 0 2 0 2 ## BS00098482_51 BS00098760_51 BS00099053_51 BS00099074_51 BS00099534_51 ## 1 2 2 2 2 2 ## 2 2 2 2 2 2 ## 3 0 0 2 0 2 ## 4 0 0 0 2 2 ## 5 0 0 2 0 2 ## 6 0 0 2 2 2 ## BS00099611_51 BS00099700_51 BS00099719_51 BS00099738_51 BS00099805_51 ## 1 2 0 2 0 0 ## 2 2 2 2 0 0 ## 3 2 2 1 0 0 ## 4 2 0 2 2 0 ## 5 2 2 0 0 0 ## 6 0 2 2 2 0 ## BS00099829_51 BS00099986_51 BS00100013_51 BS00100106_51 BS00100307_51 ## 1 2 0 0 2 0 ## 2 0 2 2 2 0 ## 3 2 0 2 2 0 ## 4 0 2 2 2 0 ## 5 0 0 2 2 0 ## 6 2 0 2 2 0 ## BS00100510_51 BS00100563_51 BS00101278_51 BS00101364_51 BS00101408_51 ## 1 2 2 0 2 0 ## 2 2 2 0 1 1 ## 3 1 2 0 2 2 ## 4 2 2 0 1 0 ## 5 2 2 0 2 2 ## 6 0 2 2 2 0 ## BS00101437_51 BS00102481_51 BS00102646_51 BS00103442_51 BS00103478_51 ## 1 2 2 0 0 2 ## 2 2 2 0 0 2 ## 3 1 2 2 0 2 ## 4 2 2 0 0 0 ## 5 2 2 0 0 2 ## 6 0 0 0 0 2 ## BS00104270_51 BS00104364_51 BS00104432_51 BS00104558_51 BS00104760_51 ## 1 0 2 0 0 2 ## 2 0 2 0 2 2 ## 3 0 2 2 2 2 ## 4 0 2 2 2 2 ## 5 2 2 2 0 2 ## 6 0 0 2 0 2 ## BS00105466_51 BS00105741_51 BS00105846_51 BS00105878_51 BS00105910_51 ## 1 2 2 0 0 2 ## 2 2 2 2 0 2 ## 3 2 2 0 0 0 ## 4 0 0 0 2 2 ## 5 2 2 0 0 0 ## 6 0 2 0 2 2 ## BS00106043_51 BS00106074_51 BS00106143_51 BS00107097_51 BS00107157_51 ## 1 0 0 2 0 2 ## 2 2 2 0 0 2 ## 3 0 2 0 1 2 ## 4 0 0 0 0 2 ## 5 0 0 0 0 2 ## 6 2 2 0 0 2 ## BS00107804_51 BS00107852_51 BS00108351_51 BS00108451_51 BS00108601_51 ## 1 2 2 2 0 2 ## 2 2 2 2 0 0 ## 3 2 2 2 0 2 ## 4 2 2 2 0 2 ## 5 2 2 2 0 2 ## 6 2 2 2 0 2 ## BS00108733_51 BS00108793_51 BS00108852_51 BS00109317_51 BS00109319_51 ## 1 2 2 0 2 2 ## 2 0 2 0 2 2 ## 3 2 1 0 2 2 ## 4 2 2 1 2 2 ## 5 2 2 2 2 2 ## 6 0 2 0 2 2 ## BS00109683_51 BS00109764_51 BS00109879_51 BS00109912_51 BS00109913_51 ## 1 2 2 2 0 0 ## 2 2 2 2 0 2 ## 3 0 1 1 0 0 ## 4 2 1 2 0 1 ## 5 2 0 2 0 0 ## 6 0 2 2 0 2 ## BS00110078_51 BS00110129_51 BS00110152_51 BS00110319_51 BS00110475_51 ## 1 0 2 2 2 2 ## 2 0 2 2 2 2 ## 3 0 2 2 2 2 ## 4 1 2 2 2 2 ## 5 0 2 0 2 2 ## 6 2 2 2 2 2 ## BS00110485_51 BS00110490_51 BS00110611_51 BS00110642_51 BS00110803_51 ## 1 0 0 2 0 2 ## 2 0 0 2 0 0 ## 3 0 0 2 0 0 ## 4 0 2 0 2 2 ## 5 0 2 2 0 0 ## 6 0 0 2 0 0 ## BS00110940_51 BS00111016_51 BS00111069_51 BS00111144_51 BS00111146_51 ## 1 0 0 2 2 2 ## 2 0 2 2 0 2 ## 3 0 0 2 0 0 ## 4 2 0 1 0 0 ## 5 0 0 2 0 2 ## 6 0 2 2 0 2 ## BS00111247_51 BS00111294_51 BS00111318_51 CAP11_c1022_117 CAP11_c1048_99 ## 1 0 0 2 0 2 ## 2 2 0 0 0 2 ## 3 2 2 0 2 2 ## 4 2 0 0 2 0 ## 5 2 2 2 0 2 ## 6 0 2 0 0 2 ## CAP11_c106_97 CAP11_c181_202 CAP11_c1820_244 CAP11_c1948_102 ## 1 2 0 2 2 ## 2 0 0 2 2 ## 3 2 0 2 0 ## 4 2 0 0 2 ## 5 0 0 2 2 ## 6 0 0 2 2 ## CAP11_c247_245 CAP11_c2623_196 CAP11_c3138_241 CAP11_c3631_75 ## 1 0 0 2 0 ## 2 0 0 0 2 ## 3 0 0 2 0 ## 4 0 0 2 0 ## 5 0 0 0 0 ## 6 0 0 2 0 ## CAP11_c5660_100 CAP11_c6746_112 CAP11_c766_319 CAP11_c8077_69 ## 1 2 0 0 0 ## 2 2 0 0 2 ## 3 2 0 0 2 ## 4 0 0 0 2 ## 5 0 0 0 0 ## 6 2 2 2 2 ## CAP11_c989_113 CAP11_rep_c5191_192 CAP12_c1129_220 CAP12_c1468_114 ## 1 0 2 0 2 ## 2 0 2 0 2 ## 3 2 0 0 2 ## 4 2 2 2 2 ## 5 2 0 0 0 ## 6 2 2 0 2 ## CAP12_c1816_325 CAP12_c1860_280 CAP12_c194_240 CAP12_c194_402 ## 1 2 0 2 2 ## 2 0 2 2 2 ## 3 0 2 2 2 ## 4 0 2 2 2 ## 5 0 2 2 2 ## 6 0 0 2 0 ## CAP12_c1979_117 CAP12_c2231_114 CAP12_c2521_103 CAP12_c2615_128 ## 1 0 2 0 0 ## 2 0 0 0 2 ## 3 0 2 0 2 ## 4 0 2 0 0 ## 5 0 2 2 0 ## 6 0 2 2 0 ## CAP12_c2800_262 CAP12_c3254_366 CAP12_c67_128 CAP7_c10772_156 ## 1 0 0 2 2 ## 2 0 0 2 2 ## 3 0 0 2 2 ## 4 2 0 2 0 ## 5 0 0 2 0 ## 6 2 0 2 0 ## CAP7_c10839_300 CAP7_c1100_277 CAP7_c1155_57 CAP7_c1208_150 ## 1 0 0 2 1 ## 2 2 0 2 2 ## 3 0 0 2 0 ## 4 0 0 2 0 ## 5 0 0 2 0 ## 6 0 0 2 0 ## CAP7_c1490_115 CAP7_c16_483 CAP7_c16_567 CAP7_c317_85 CAP7_c3391_238 ## 1 2 0 2 0 2 ## 2 2 0 2 0 2 ## 3 1 0 2 0 2 ## 4 2 0 2 2 2 ## 5 2 0 2 0 2 ## 6 2 0 2 0 2 ## CAP7_c4608_228 CAP7_c6316_80 CAP7_c6531_308 CAP7_rep_c10402_310 ## 1 0 0 2 0 ## 2 0 0 2 0 ## 3 2 0 2 2 ## 4 0 0 2 2 ## 5 0 0 2 2 ## 6 2 0 2 0 ## CAP7_rep_c12277_73 CAP7_rep_c7543_346 CAP7_rep_c8019_110 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 2 0 ## 4 0 2 2 ## 5 0 2 2 ## 6 0 2 2 ## CAP7_rep_c9901_86 CAP8_c1408_167 CAP8_c1799_237 CAP8_c2401_433 ## 1 0 0 2 0 ## 2 0 0 2 2 ## 3 0 0 0 2 ## 4 0 0 0 2 ## 5 0 0 2 2 ## 6 0 0 0 0 ## CAP8_c2448_355 CAP8_c3013_117 CAP8_c3451_65 CAP8_c665_242 CAP8_c6799_93 ## 1 2 2 0 0 2 ## 2 2 2 0 0 2 ## 3 2 2 0 0 2 ## 4 2 2 2 0 1 ## 5 2 0 0 2 2 ## 6 2 2 0 2 2 ## CAP8_c8600_130 CAP8_rep_c5825_165 CAP8_rep_c9642_82 D_contig09229_928 ## 1 0 0 0 2 ## 2 0 0 0 2 ## 3 0 0 0 2 ## 4 0 1 0 2 ## 5 0 2 0 2 ## 6 2 0 0 2 ## D_contig10996_530 D_contig12069_831 D_contig13475_402 D_contig14507_369 ## 1 0 2 0 0 ## 2 0 0 0 0 ## 3 0 0 0 0 ## 4 1 2 2 0 ## 5 2 0 2 0 ## 6 0 0 2 0 ## D_contig16977_348 D_contig17313_245 D_contig28346_467 D_contig78519_72 ## 1 2 0 0 0 ## 2 2 0 0 0 ## 3 2 2 0 2 ## 4 2 2 0 2 ## 5 2 0 0 2 ## 6 2 0 2 2 ## D_contig79290_372 D_contig79410_237 D_contig93400_86 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 0 2 ## 4 2 0 2 ## 5 2 0 2 ## 6 2 0 2 ## D_F1BEJMU01A0OMY_356 D_F5XZDLF01A85DT_301 D_F5XZDLF02G9H4M_286 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 2 1 0 ## 5 2 2 0 ## 6 0 0 0 ## D_GA8KES401CVVAD_281 D_GB5Y7FA02I369B_378 D_GBF1XID01ETBRB_172 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 0 2 ## 4 2 2 2 ## 5 0 2 2 ## 6 0 0 2 ## D_GBUVHFX01DSLGX_212 D_GDS7LZN02IXNP1_255 Ex_c101685_705 Ex_c103504_760 ## 1 0 2 2 2 ## 2 1 2 0 0 ## 3 0 2 0 0 ## 4 0 2 0 0 ## 5 0 2 0 0 ## 6 0 2 2 0 ## Ex_c104539_35 Ex_c105443_895 Ex_c16948_754 Ex_c17379_1431 Ex_c19057_965 ## 1 2 0 0 0 0 ## 2 2 0 0 0 0 ## 3 2 0 0 0 0 ## 4 0 0 0 0 0 ## 5 0 0 0 0 0 ## 6 0 0 0 0 0 ## Ex_c21450_396 Ex_c21738_1159 Ex_c22089_1077 Ex_c23426_1546 Ex_c25733_348 ## 1 0 2 2 0 0 ## 2 0 2 0 0 0 ## 3 0 2 2 0 0 ## 4 0 2 2 0 0 ## 5 0 0 2 0 2 ## 6 0 0 2 2 0 ## Ex_c26378_1044 Ex_c27046_1546 Ex_c31970_673 Ex_c3990_102 Ex_c402_1223 ## 1 2 2 1 2 2 ## 2 2 2 2 2 2 ## 3 2 2 2 2 1 ## 4 2 2 2 2 2 ## 5 2 2 2 2 2 ## 6 2 2 2 2 2 ## Ex_c4208_839 Ex_c45438_377 Ex_c472_2724 Ex_c4847_236 Ex_c5061_2057 ## 1 2 0 0 0 0 ## 2 2 0 0 2 2 ## 3 0 0 0 2 0 ## 4 0 0 0 2 0 ## 5 0 0 2 0 0 ## 6 0 0 0 0 0 ## Ex_c5858_1992 Ex_c61830_971 Ex_c6196_971 Ex_c63594_515 Ex_c6571_224 ## 1 0 -1 0 0 2 ## 2 0 0 2 0 2 ## 3 0 0 0 0 2 ## 4 0 0 0 2 2 ## 5 0 0 0 0 2 ## 6 0 0 0 2 2 ## Ex_c66324_1151 Ex_c6665_1067 Ex_c68356_765 Ex_c69066_186 Ex_c69252_628 ## 1 2 0 0 0 0 ## 2 2 0 0 0 0 ## 3 0 0 0 0 0 ## 4 0 0 0 0 0 ## 5 0 0 2 0 0 ## 6 0 0 0 0 2 ## Ex_c7227_53 Ex_c7626_444 Ex_c9556_2547 Excalibur_c100270_78 ## 1 2 2 0 0 ## 2 2 0 0 0 ## 3 2 0 0 0 ## 4 0 0 2 2 ## 5 0 2 2 2 ## 6 2 2 0 2 ## Excalibur_c100531_251 Excalibur_c100910_239 Excalibur_c10198_691 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 0 0 0 ## 5 0 0 2 ## 6 2 0 0 ## Excalibur_c10390_104 Excalibur_c104812_253 Excalibur_c105151_200 ## 1 2 2 2 ## 2 0 0 2 ## 3 0 0 2 ## 4 0 2 2 ## 5 0 0 2 ## 6 0 2 2 ## Excalibur_c10657_796 Excalibur_c10699_404 Excalibur_c11047_1145 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 2 2 ## 4 0 2 2 ## 5 0 2 0 ## 6 0 2 0 ## Excalibur_c112015_118 Excalibur_c113341_139 Excalibur_c1142_724 ## 1 0 1 2 ## 2 2 0 2 ## 3 1 0 0 ## 4 0 0 0 ## 5 2 0 0 ## 6 0 0 2 ## Excalibur_c11505_155 Excalibur_c11605_156 Excalibur_c11666_134 ## 1 0 0 0 ## 2 0 0 0 ## 3 1 0 0 ## 4 0 0 0 ## 5 0 2 0 ## 6 0 0 0 ## Excalibur_c11795_934 Excalibur_c11941_612 Excalibur_c11947_746 ## 1 2 0 0 ## 2 2 0 2 ## 3 2 0 2 ## 4 2 2 2 ## 5 2 0 2 ## 6 2 0 2 ## Excalibur_c12064_78 Excalibur_c1208_72 Excalibur_c12499_2075 ## 1 2 2 2 ## 2 2 2 0 ## 3 2 2 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 2 2 2 ## Excalibur_c12675_1395 Excalibur_c12735_380 Excalibur_c12932_2102 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 0 0 ## 4 2 0 0 ## 5 0 0 0 ## 6 0 0 0 ## Excalibur_c12937_64 Excalibur_c12980_2392 Excalibur_c13094_523 ## 1 2 2 2 ## 2 0 2 1 ## 3 2 0 0 ## 4 0 2 0 ## 5 0 0 0 ## 6 0 2 0 ## Excalibur_c13489_867 Excalibur_c1353_1364 Excalibur_c14273_1928 ## 1 0 0 2 ## 2 0 0 0 ## 3 0 0 0 ## 4 0 2 0 ## 5 2 0 0 ## 6 0 0 0 ## Excalibur_c14396_1629 Excalibur_c14451_1313 Excalibur_c14911_976 ## 1 0 2 0 ## 2 0 2 2 ## 3 2 0 1 ## 4 2 2 0 ## 5 0 2 2 ## 6 2 2 0 ## Excalibur_c15332_1305 Excalibur_c15389_501 Excalibur_c15405_808 ## 1 0 2 2 ## 2 2 2 2 ## 3 0 2 2 ## 4 0 2 0 ## 5 2 2 0 ## 6 0 2 0 ## Excalibur_c15692_532 Excalibur_c15744_322 Excalibur_c15750_931 ## 1 2 2 2 ## 2 2 2 2 ## 3 2 2 2 ## 4 0 0 2 ## 5 2 2 2 ## 6 2 2 0 ## Excalibur_c15844_1470 Excalibur_c15944_70 Excalibur_c1604_2710 ## 1 0 2 0 ## 2 0 2 0 ## 3 0 0 0 ## 4 0 2 0 ## 5 0 2 0 ## 6 0 2 0 ## Excalibur_c16197_748 Excalibur_c1634_333 Excalibur_c16703_430 ## 1 0 0 0 ## 2 0 2 0 ## 3 0 2 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 2 0 ## Excalibur_c16851_835 Excalibur_c17055_1451 Excalibur_c17250_104 ## 1 2 0 0 ## 2 2 0 0 ## 3 2 0 0 ## 4 2 0 0 ## 5 2 0 0 ## 6 2 2 2 ## Excalibur_c17320_833 Excalibur_c1787_1199 Excalibur_c17899_352 ## 1 0 0 0 ## 2 0 0 2 ## 3 0 0 1 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 2 2 ## Excalibur_c1791_331 Excalibur_c17915_346 Excalibur_c18042_372 ## 1 2 0 2 ## 2 2 0 2 ## 3 0 2 2 ## 4 0 2 2 ## 5 0 0 2 ## 6 2 2 2 ## Excalibur_c18333_288 Excalibur_c18382_760 Excalibur_c18410_136 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 0 2 ## 4 0 0 0 ## 5 2 0 2 ## 6 0 0 0 ## Excalibur_c1886_1288 Excalibur_c19078_210 Excalibur_c1936_1072 ## 1 1 0 2 ## 2 0 2 2 ## 3 0 0 2 ## 4 0 0 2 ## 5 0 0 2 ## 6 0 0 2 ## Excalibur_c19471_197 Excalibur_c19475_619 Excalibur_c19499_948 ## 1 2 0 0 ## 2 2 0 0 ## 3 2 2 0 ## 4 2 2 0 ## 5 2 1 0 ## 6 2 0 0 ## Excalibur_c19658_127 Excalibur_c20062_195 Excalibur_c20307_654 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 0 0 ## 4 0 2 2 ## 5 2 0 2 ## 6 0 0 0 ## Excalibur_c20597_509 Excalibur_c20597_569 Excalibur_c20837_868 ## 1 0 0 2 ## 2 0 0 2 ## 3 2 2 0 ## 4 0 0 0 ## 5 2 2 0 ## 6 0 0 2 ## Excalibur_c21117_99 Excalibur_c21451_352 Excalibur_c21534_1436 ## 1 0 0 0 ## 2 0 2 0 ## 3 0 2 0 ## 4 2 0 0 ## 5 0 2 0 ## 6 0 2 0 ## Excalibur_c21663_145 Excalibur_c2217_731 Excalibur_c224_1383 ## 1 2 2 2 ## 2 0 2 2 ## 3 2 2 2 ## 4 2 2 2 ## 5 0 2 2 ## 6 0 2 2 ## Excalibur_c22830_1500 Excalibur_c22998_621 Excalibur_c23328_127 ## 1 2 2 1 ## 2 0 2 0 ## 3 0 0 2 ## 4 0 2 0 ## 5 0 2 1 ## 6 0 0 0 ## Excalibur_c23435_228 Excalibur_c23452_401 Excalibur_c23473_451 ## 1 2 0 2 ## 2 2 1 2 ## 3 2 0 2 ## 4 0 0 0 ## 5 2 0 2 ## 6 2 0 0 ## Excalibur_c23486_1091 Excalibur_c24288_548 Excalibur_c24354_465 ## 1 0 2 2 ## 2 0 2 2 ## 3 1 2 2 ## 4 0 2 0 ## 5 0 2 2 ## 6 0 2 2 ## Excalibur_c24391_321 Excalibur_c24639_562 Excalibur_c24688_407 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 0 2 ## 4 2 0 2 ## 5 2 0 0 ## 6 0 0 2 ## Excalibur_c24707_1036 Excalibur_c24750_504 Excalibur_c24830_415 ## 1 2 2 0 ## 2 2 2 0 ## 3 2 0 2 ## 4 2 0 2 ## 5 0 0 0 ## 6 2 0 2 ## Excalibur_c2496_1752 Excalibur_c25175_512 Excalibur_c25353_1171 ## 1 0 2 2 ## 2 0 2 0 ## 3 0 0 1 ## 4 0 0 0 ## 5 0 2 0 ## 6 0 2 0 ## Excalibur_c25545_249 Excalibur_c25566_1000 Excalibur_c25566_423 ## 1 0 2 0 ## 2 2 2 0 ## 3 2 0 2 ## 4 2 0 0 ## 5 2 0 2 ## 6 2 2 0 ## Excalibur_c2578_1966 Excalibur_c25891_1402 Excalibur_c26042_260 ## 1 2 2 0 ## 2 2 2 0 ## 3 1 0 0 ## 4 0 0 0 ## 5 2 2 0 ## 6 0 2 0 ## Excalibur_c26088_184 Excalibur_c26918_75 Excalibur_c27915_560 ## 1 2 0 2 ## 2 2 2 2 ## 3 2 2 2 ## 4 2 2 2 ## 5 2 2 0 ## 6 2 2 2 ## Excalibur_c2795_1518 Excalibur_c27950_459 Excalibur_c28395_89 ## 1 2 0 0 ## 2 2 0 2 ## 3 0 2 2 ## 4 0 2 2 ## 5 2 2 2 ## 6 0 0 0 ## Excalibur_c28463_170 Excalibur_c29231_932 Excalibur_c29304_176 ## 1 2 2 0 ## 2 2 2 0 ## 3 0 0 0 ## 4 0 0 0 ## 5 0 0 2 ## 6 2 2 0 ## Excalibur_c29698_76 Excalibur_c29975_333 Excalibur_c30378_673 ## 1 2 0 0 ## 2 2 0 0 ## 3 2 2 2 ## 4 2 0 2 ## 5 0 0 0 ## 6 0 2 2 ## Excalibur_c30527_515 Excalibur_c30527_559 Excalibur_c30569_384 ## 1 0 2 0 ## 2 0 2 0 ## 3 1 1 0 ## 4 1 2 0 ## 5 0 2 0 ## 6 2 0 0 ## Excalibur_c30713_591 Excalibur_c3076_1127 Excalibur_c30955_479 ## 1 2 0 2 ## 2 2 0 0 ## 3 2 2 0 ## 4 2 1 2 ## 5 2 2 0 ## 6 2 0 0 ## Excalibur_c30958_515 Excalibur_c31379_71 Excalibur_c31405_159 ## 1 2 2 0 ## 2 2 2 2 ## 3 0 2 2 ## 4 2 2 0 ## 5 2 2 0 ## 6 2 2 0 ## Excalibur_c3165_730 Excalibur_c31801_752 Excalibur_c32189_998 ## 1 2 0 0 ## 2 2 2 0 ## 3 1 2 0 ## 4 0 0 0 ## 5 0 2 0 ## 6 2 0 0 ## Excalibur_c32242_137 Excalibur_c32366_122 Excalibur_c32414_705 ## 1 2 2 0 ## 2 2 0 0 ## 3 2 0 2 ## 4 2 0 0 ## 5 2 0 0 ## 6 2 2 2 ## Excalibur_c32414_861 Excalibur_c32653_566 Excalibur_c32691_574 ## 1 0 0 2 ## 2 0 0 0 ## 3 0 0 2 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 0 2 ## Excalibur_c3270_1566 Excalibur_c32708_225 Excalibur_c33002_123 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 0 0 ## 4 0 0 2 ## 5 0 2 0 ## 6 0 0 2 ## Excalibur_c33199_1430 Excalibur_c33675_201 Excalibur_c33923_592 ## 1 0 2 2 ## 2 2 2 0 ## 3 0 2 2 ## 4 0 2 2 ## 5 0 2 2 ## 6 0 0 2 ## Excalibur_c34069_520 Excalibur_c3423_1170 Excalibur_c34451_370 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 2 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 2 0 2 ## Excalibur_c34964_326 Excalibur_c3524_318 Excalibur_c3557_66 ## 1 2 2 2 ## 2 2 2 2 ## 3 2 2 0 ## 4 2 2 2 ## 5 2 2 2 ## 6 2 0 2 ## Excalibur_c35645_587 Excalibur_c36070_300 Excalibur_c3698_739 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 0 2 ## 4 0 0 0 ## 5 2 2 0 ## 6 0 2 2 ## Excalibur_c3730_2098 Excalibur_c37496_271 Excalibur_c37696_192 ## 1 2 0 2 ## 2 2 0 0 ## 3 2 1 2 ## 4 2 0 0 ## 5 0 0 0 ## 6 2 2 0 ## Excalibur_c37897_473 Excalibur_c38034_79 Excalibur_c39569_79 ## 1 0 0 0 ## 2 2 0 0 ## 3 2 0 0 ## 4 0 0 2 ## 5 0 0 0 ## 6 2 0 0 ## Excalibur_c39670_294 Excalibur_c3988_1660 Excalibur_c39966_367 ## 1 2 0 2 ## 2 2 2 2 ## 3 2 0 2 ## 4 0 2 2 ## 5 2 2 2 ## 6 2 2 2 ## Excalibur_c40202_114 Excalibur_c40335_198 Excalibur_c40617_983 ## 1 0 0 2 ## 2 0 2 2 ## 3 1 0 2 ## 4 2 1 2 ## 5 0 2 2 ## 6 0 2 2 ## Excalibur_c40881_182 Excalibur_c40993_1129 Excalibur_c41125_360 ## 1 0 0 0 ## 2 0 2 0 ## 3 2 2 0 ## 4 2 0 2 ## 5 2 2 2 ## 6 2 2 2 ## Excalibur_c41298_459 Excalibur_c41459_380 Excalibur_c415_844 ## 1 2 0 0 ## 2 0 0 0 ## 3 2 0 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 0 0 ## Excalibur_c41536_808 Excalibur_c41736_124 Excalibur_c42928_135 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 2 0 ## 4 0 2 0 ## 5 0 2 2 ## 6 0 2 0 ## Excalibur_c43567_850 Excalibur_c43752_142 Excalibur_c43793_379 ## 1 2 2 0 ## 2 0 1 2 ## 3 2 2 2 ## 4 0 2 2 ## 5 2 2 0 ## 6 2 2 2 ## Excalibur_c44485_362 Excalibur_c44487_642 Excalibur_c45094_602 ## 1 2 0 0 ## 2 2 0 0 ## 3 2 0 0 ## 4 0 0 2 ## 5 0 0 2 ## 6 0 0 0 ## Excalibur_c45297_97 Excalibur_c45554_454 Excalibur_c46000_203 ## 1 2 0 0 ## 2 2 0 0 ## 3 2 0 0 ## 4 0 0 2 ## 5 2 0 0 ## 6 2 0 0 ## Excalibur_c4631_1608 Excalibur_c46399_307 Excalibur_c46833_204 ## 1 0 0 2 ## 2 0 0 0 ## 3 0 0 2 ## 4 0 2 0 ## 5 0 2 2 ## 6 0 2 2 ## Excalibur_c46902_92 Excalibur_c4699_147 Excalibur_c47013_1503 ## 1 1 0 0 ## 2 0 0 0 ## 3 0 0 1 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 0 0 ## Excalibur_c47078_512 Excalibur_c47452_183 Excalibur_c4748_360 ## 1 2 2 0 ## 2 2 2 0 ## 3 2 2 2 ## 4 0 2 2 ## 5 2 0 0 ## 6 2 2 2 ## Excalibur_c47675_176 Excalibur_c47996_509 Excalibur_c48379_461 ## 1 0 0 0 ## 2 0 0 2 ## 3 0 0 0 ## 4 0 0 2 ## 5 0 0 2 ## 6 2 0 0 ## Excalibur_c48448_279 Excalibur_c48976_396 Excalibur_c49419_202 ## 1 2 0 2 ## 2 0 1 2 ## 3 2 0 2 ## 4 0 0 2 ## 5 2 0 2 ## 6 0 0 2 ## Excalibur_c49743_97 Excalibur_c49745_338 Excalibur_c50612_409 ## 1 2 0 0 ## 2 2 0 1 ## 3 2 2 2 ## 4 2 0 2 ## 5 0 2 0 ## 6 0 0 0 ## Excalibur_c51942_75 Excalibur_c52120_132 Excalibur_c52196_235 ## 1 2 0 0 ## 2 0 2 0 ## 3 0 1 0 ## 4 2 0 2 ## 5 2 2 0 ## 6 0 2 2 ## Excalibur_c52276_176 Excalibur_c52319_257 Excalibur_c52517_464 ## 1 2 1 2 ## 2 0 2 2 ## 3 2 0 0 ## 4 2 1 0 ## 5 2 2 0 ## 6 2 2 2 ## Excalibur_c5309_286 Excalibur_c53111_144 Excalibur_c53516_119 ## 1 2 2 2 ## 2 2 2 0 ## 3 2 2 0 ## 4 1 2 0 ## 5 2 0 0 ## 6 2 2 0 ## Excalibur_c54055_694 Excalibur_c5442_1691 Excalibur_c55186_351 ## 1 2 2 2 ## 2 2 2 2 ## 3 2 0 2 ## 4 2 2 2 ## 5 2 0 0 ## 6 2 2 2 ## Excalibur_c5624_1026 Excalibur_c56550_425 Excalibur_c56787_95 ## 1 0 0 2 ## 2 0 0 0 ## 3 0 0 2 ## 4 0 0 2 ## 5 0 0 2 ## 6 2 0 2 ## Excalibur_c5700_244 Excalibur_c57869_162 Excalibur_c581_1220 ## 1 2 2 0 ## 2 2 2 0 ## 3 2 2 1 ## 4 2 2 0 ## 5 2 2 2 ## 6 2 2 2 ## Excalibur_c58410_729 Excalibur_c5888_169 Excalibur_c5938_1703 ## 1 0 2 2 ## 2 0 0 0 ## 3 0 2 0 ## 4 0 2 2 ## 5 0 0 0 ## 6 0 0 0 ## Excalibur_c59653_238 Excalibur_c60238_183 Excalibur_c6050_323 ## 1 0 2 0 ## 2 0 0 2 ## 3 0 0 2 ## 4 0 2 2 ## 5 0 2 2 ## 6 0 0 2 ## Excalibur_c60530_113 Excalibur_c6101_608 Excalibur_c61073_128 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 0 2 ## 4 0 0 2 ## 5 0 0 2 ## 6 0 0 2 ## Excalibur_c6111_411 Excalibur_c61603_1052 Excalibur_c61603_1138 ## 1 2 0 0 ## 2 2 2 0 ## 3 2 0 2 ## 4 0 0 2 ## 5 0 0 2 ## 6 2 0 0 ## Excalibur_c62042_175 Excalibur_c63243_434 Excalibur_c63353_193 ## 1 2 1 0 ## 2 2 0 0 ## 3 0 2 2 ## 4 0 0 0 ## 5 0 2 2 ## 6 0 0 0 ## Excalibur_c63353_712 Excalibur_c64024_119 Excalibur_c642_481 ## 1 2 2 2 ## 2 2 2 0 ## 3 0 0 0 ## 4 2 0 0 ## 5 0 0 0 ## 6 2 0 2 ## Excalibur_c64302_103 Excalibur_c64418_447 Excalibur_c64439_87 ## 1 1 2 0 ## 2 2 0 0 ## 3 1 2 2 ## 4 1 2 0 ## 5 2 2 2 ## 6 0 2 0 ## Excalibur_c6497_535 Excalibur_c65830_82 Excalibur_c6649_304 ## 1 1 0 0 ## 2 2 0 0 ## 3 2 0 0 ## 4 2 2 0 ## 5 2 0 0 ## 6 2 0 0 ## Excalibur_c6660_716 Excalibur_c6714_246 Excalibur_c6742_352 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 0 2 ## 4 2 0 2 ## 5 0 0 2 ## 6 0 0 2 ## Excalibur_c6749_694 Excalibur_c7110_90 Excalibur_c7122_778 ## 1 2 2 0 ## 2 0 2 0 ## 3 0 2 2 ## 4 2 0 0 ## 5 2 0 2 ## 6 0 0 2 ## Excalibur_c7241_284 Excalibur_c7338_242 Excalibur_c7338_563 ## 1 0 0 0 ## 2 2 1 1 ## 3 0 2 2 ## 4 0 2 2 ## 5 2 2 0 ## 6 0 2 2 ## Excalibur_c7348_1140 Excalibur_c74858_243 Excalibur_c7581_1266 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 2 2 ## 4 0 2 2 ## 5 0 2 2 ## 6 2 2 2 ## Excalibur_c76598_570 Excalibur_c76628_251 Excalibur_c79009_131 ## 1 2 2 2 ## 2 2 2 2 ## 3 2 0 0 ## 4 0 0 2 ## 5 2 2 1 ## 6 2 2 2 ## Excalibur_c8197_381 Excalibur_c83177_99 Excalibur_c83953_190 ## 1 2 0 0 ## 2 2 0 0 ## 3 0 0 0 ## 4 2 0 0 ## 5 0 0 0 ## 6 2 0 0 ## Excalibur_c85140_173 Excalibur_c8600_2080 Excalibur_c88899_626 ## 1 2 2 0 ## 2 2 2 0 ## 3 2 2 0 ## 4 2 2 0 ## 5 2 2 0 ## 6 2 2 0 ## Excalibur_c90096_77 Excalibur_c91154_164 Excalibur_c9179_2416 ## 1 2 1 0 ## 2 0 0 2 ## 3 2 1 2 ## 4 2 1 2 ## 5 1 0 2 ## 6 2 2 2 ## Excalibur_c91980_139 Excalibur_c9206_836 Excalibur_c9248_771 ## 1 1 0 0 ## 2 2 2 0 ## 3 0 2 0 ## 4 2 2 0 ## 5 0 0 0 ## 6 2 0 0 ## Excalibur_c9391_1016 Excalibur_c94390_60 Excalibur_c9563_1157 ## 1 0 1 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 0 2 0 ## 5 0 0 0 ## 6 0 0 0 ## Excalibur_c96483_102 Excalibur_c9713_247 Excalibur_c9901_163 ## 1 2 0 0 ## 2 0 0 2 ## 3 2 0 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 1 0 2 ## Excalibur_c9969_98 Excalibur_rep_c101263_892 Excalibur_rep_c101787_89 ## 1 2 2 2 ## 2 0 2 2 ## 3 2 0 1 ## 4 2 0 2 ## 5 2 2 0 ## 6 0 0 0 ## Excalibur_rep_c102052_721 Excalibur_rep_c102327_102 ## 1 0 2 ## 2 0 0 ## 3 0 0 ## 4 2 0 ## 5 0 0 ## 6 0 0 ## Excalibur_rep_c102994_1003 Excalibur_rep_c103091_266 ## 1 0 2 ## 2 0 2 ## 3 0 0 ## 4 0 2 ## 5 0 0 ## 6 0 0 ## Excalibur_rep_c103109_88 Excalibur_rep_c104800_795 ## 1 0 2 ## 2 0 2 ## 3 1 2 ## 4 0 2 ## 5 1 2 ## 6 0 0 ## Excalibur_rep_c104815_1181 Excalibur_rep_c106124_239 ## 1 2 2 ## 2 2 2 ## 3 2 2 ## 4 2 0 ## 5 2 0 ## 6 2 2 ## Excalibur_rep_c106790_155 Excalibur_rep_c107047_469 ## 1 0 2 ## 2 1 2 ## 3 0 1 ## 4 2 2 ## 5 2 2 ## 6 2 2 ## Excalibur_rep_c107798_68 Excalibur_rep_c108023_321 ## 1 2 0 ## 2 2 0 ## 3 1 0 ## 4 2 0 ## 5 2 2 ## 6 2 2 ## Excalibur_rep_c108030_260 Excalibur_rep_c109881_701 ## 1 0 2 ## 2 0 2 ## 3 0 2 ## 4 0 2 ## 5 0 2 ## 6 0 2 ## Excalibur_rep_c110303_320 Excalibur_rep_c112060_100 ## 1 1 2 ## 2 0 0 ## 3 0 0 ## 4 0 2 ## 5 0 0 ## 6 0 0 ## Excalibur_rep_c112985_337 Excalibur_rep_c113786_110 ## 1 2 0 ## 2 2 0 ## 3 2 1 ## 4 0 2 ## 5 2 2 ## 6 2 0 ## Excalibur_rep_c66606_2065 Excalibur_rep_c67073_100 ## 1 1 2 ## 2 2 0 ## 3 0 2 ## 4 0 2 ## 5 0 0 ## 6 0 2 ## Excalibur_rep_c68005_67 Excalibur_rep_c68458_1536 ## 1 0 2 ## 2 0 2 ## 3 2 2 ## 4 0 2 ## 5 0 0 ## 6 2 2 ## Excalibur_rep_c68588_1196 Excalibur_rep_c68899_1400 ## 1 0 0 ## 2 1 0 ## 3 0 0 ## 4 0 0 ## 5 0 0 ## 6 0 2 ## Excalibur_rep_c69275_346 Excalibur_rep_c70578_299 ## 1 0 2 ## 2 2 2 ## 3 0 2 ## 4 0 2 ## 5 2 0 ## 6 0 2 ## Excalibur_rep_c71107_517 Excalibur_rep_c71271_247 ## 1 0 2 ## 2 0 2 ## 3 0 2 ## 4 0 0 ## 5 0 0 ## 6 0 2 ## Excalibur_rep_c71645_94 Excalibur_rep_c90275_262 ## 1 0 0 ## 2 0 0 ## 3 2 0 ## 4 2 0 ## 5 2 0 ## 6 0 2 ## Excalibur_rep_c92475_275 Excalibur_rep_c95828_165 Excalibur_s115877_56 ## 1 0 2 0 ## 2 0 0 2 ## 3 0 0 0 ## 4 0 2 0 ## 5 0 0 0 ## 6 0 2 0 ## GENE.0033_233 GENE.0112_64 GENE.0120_397 GENE.0136_82 GENE.0137_147 ## 1 0 0 2 2 2 ## 2 0 0 0 0 2 ## 3 1 0 0 2 2 ## 4 0 0 2 0 2 ## 5 0 0 0 0 2 ## 6 0 0 0 2 2 ## GENE.0168_7 GENE.0208_1096 GENE.0249_161 GENE.0293_154 GENE.0293_445 ## 1 2 2 1 0 2 ## 2 2 2 2 0 2 ## 3 1 2 0 0 2 ## 4 2 2 2 2 2 ## 5 0 2 1 2 2 ## 6 2 2 0 2 2 ## GENE.0527_92 GENE.0559_171 GENE.0717_28 GENE.1075_265 GENE.1136_260 ## 1 0 0 2 2 2 ## 2 0 0 2 0 2 ## 3 0 0 2 0 2 ## 4 0 2 2 0 2 ## 5 0 0 0 0 2 ## 6 0 0 2 0 2 ## GENE.1350_36 GENE.1460_304 GENE.1464_73 GENE.1539_27 GENE.1549_110 ## 1 0 2 2 0 0 ## 2 0 2 2 0 2 ## 3 0 2 0 2 1 ## 4 0 2 0 0 2 ## 5 0 2 0 2 2 ## 6 0 2 0 0 2 ## GENE.1756_115 GENE.1771_89 GENE.1776_40 GENE.1826_718 GENE.1919_120 ## 1 1 0 2 1 2 ## 2 0 0 2 0 2 ## 3 0 0 1 0 2 ## 4 0 0 0 1 2 ## 5 1 0 2 0 2 ## 6 0 0 0 0 2 ## GENE.1934_501 GENE.2352_964 GENE.2528_709 GENE.2566_317 GENE.2689_215 ## 1 2 2 2 0 0 ## 2 0 2 2 0 0 ## 3 2 2 2 0 1 ## 4 2 0 2 0 2 ## 5 2 0 2 0 2 ## 6 2 0 2 0 0 ## GENE.2725_217 GENE.2768_150 GENE.2771_327 GENE.2794_534 GENE.2812_300 ## 1 2 0 2 0 2 ## 2 0 0 2 0 1 ## 3 2 2 2 1 2 ## 4 0 0 2 2 0 ## 5 0 0 2 2 1 ## 6 2 2 2 0 1 ## GENE.2904_757 GENE.3111_152 GENE.3126_21 GENE.3277_145 GENE.3369_110 ## 1 2 2 0 0 2 ## 2 0 2 0 0 2 ## 3 0 2 0 0 2 ## 4 0 2 0 2 2 ## 5 2 2 0 0 2 ## 6 2 2 0 0 2 ## GENE.3454_74 GENE.3601_145 GENE.3622_277 GENE.3653_580 GENE.3659_104 ## 1 0 2 0 0 2 ## 2 0 2 0 0 2 ## 3 0 2 0 0 2 ## 4 0 2 0 0 2 ## 5 0 2 2 0 2 ## 6 0 0 0 0 2 ## GENE.3665_61 GENE.3709_393 GENE.3872_608 GENE.3975_194 GENE.4060_219 ## 1 2 2 0 0 2 ## 2 0 0 0 0 2 ## 3 2 2 0 0 2 ## 4 2 2 0 0 0 ## 5 2 0 0 2 0 ## 6 2 2 0 2 2 ## GENE.4142_88 GENE.4168_925 GENE.4292_204 GENE.4376_518 GENE.4442_121 ## 1 2 0 2 0 2 ## 2 2 2 0 2 1 ## 3 2 2 0 0 2 ## 4 2 2 0 0 0 ## 5 2 2 0 2 0 ## 6 2 2 0 2 0 ## GENE.4473_398 GENE.4672_55 GENE.4701_272 GENE.4746_72 GENE.4761_106 ## 1 0 0 0 0 0 ## 2 2 0 2 0 0 ## 3 2 2 2 0 0 ## 4 0 2 2 0 0 ## 5 0 2 2 0 0 ## 6 2 0 2 2 0 ## GENE.4796_696 GENE.4833_102 GENE.4895_101 GENE.4943_470 GENE.4996_592 ## 1 2 2 2 0 0 ## 2 1 0 2 0 2 ## 3 0 0 2 0 2 ## 4 2 0 2 0 0 ## 5 2 2 2 0 2 ## 6 0 0 2 2 2 ## IAAV1296 IAAV1311 IAAV1322 IAAV1364 IAAV1410 IAAV1523 IAAV1711 IAAV1915 ## 1 2 0 0 1 0 2 2 2 ## 2 2 2 0 0 0 2 2 2 ## 3 2 0 0 2 0 0 2 0 ## 4 0 0 0 0 0 0 0 0 ## 5 2 2 0 0 2 2 0 0 ## 6 2 0 0 2 2 0 0 2 ## IAAV2040 IAAV2080 IAAV211 IAAV2423 IAAV2448 IAAV2576 IAAV2577 IAAV2580 ## 1 2 0 2 0 0 2 0 2 ## 2 2 2 2 0 2 2 0 0 ## 3 2 2 2 0 0 2 2 0 ## 4 2 2 0 0 2 1 0 0 ## 5 0 2 2 0 0 2 2 0 ## 6 2 0 2 0 0 2 0 2 ## IAAV2585 IAAV2682 IAAV2686 IAAV2718 IAAV2729 IAAV2776 IAAV283 IAAV2871 ## 1 0 0 0 2 0 2 2 2 ## 2 0 0 1 2 0 2 2 2 ## 3 0 0 2 2 0 2 2 2 ## 4 0 0 2 0 0 2 2 2 ## 5 0 0 2 2 0 2 2 2 ## 6 0 0 2 2 0 2 2 2 ## IAAV2968 IAAV298 IAAV3168 IAAV3265 IAAV3293 IAAV3315 IAAV3488 IAAV3545 ## 1 0 0 1 0 0 0 0 0 ## 2 0 0 0 0 2 2 0 0 ## 3 0 2 0 2 2 0 1 0 ## 4 0 0 0 0 2 2 0 0 ## 5 0 0 2 1 1 2 0 0 ## 6 0 0 0 0 2 1 2 0 ## IAAV3567 IAAV3666 IAAV3695 IAAV3838 IAAV3848 IAAV3851 IAAV3854 IAAV3905 ## 1 0 -1 2 2 2 2 2 0 ## 2 2 0 2 2 2 2 2 0 ## 3 1 0 0 2 2 1 2 0 ## 4 0 0 0 1 2 0 2 0 ## 5 2 -1 0 2 2 0 2 1 ## 6 2 0 0 0 2 0 2 0 ## IAAV3919 IAAV3924 IAAV4015 IAAV4072 IAAV4194 IAAV420 IAAV4238 IAAV4351 ## 1 0 0 0 2 2 0 2 2 ## 2 2 0 0 0 0 0 2 2 ## 3 0 0 0 2 2 0 2 2 ## 4 0 2 0 2 2 0 2 2 ## 5 0 2 0 2 2 0 2 2 ## 6 0 0 0 2 2 0 2 2 ## IAAV4644 IAAV4656 IAAV4695 IAAV5014 IAAV5136 IAAV5507 IAAV5588 IAAV5607 ## 1 0 2 2 2 0 0 2 2 ## 2 0 2 0 0 0 2 2 2 ## 3 0 2 2 2 0 1 1 2 ## 4 0 2 2 2 0 0 2 2 ## 5 0 2 0 2 2 0 2 2 ## 6 0 2 0 2 0 0 2 2 ## IAAV5706 IAAV5722 IAAV5776 IAAV5917 IAAV5992 IAAV6015 IAAV6088 IAAV6100 ## 1 2 2 0 2 0 0 2 2 ## 2 2 0 0 1 0 0 2 2 ## 3 0 0 0 0 0 2 2 2 ## 4 2 0 0 0 0 0 1 2 ## 5 2 2 0 0 2 0 2 2 ## 6 2 0 0 0 0 0 0 2 ## IAAV6137 IAAV6234 IAAV6423 IAAV6581 IAAV6653 IAAV6957 IAAV7104 IAAV7160 ## 1 0 0 0 0 2 0 2 2 ## 2 2 0 0 0 2 2 2 2 ## 3 2 0 2 0 2 2 2 2 ## 4 2 0 2 0 2 2 2 2 ## 5 2 0 2 2 2 0 0 2 ## 6 2 0 2 0 2 2 2 2 ## IAAV7168 IAAV7203 IAAV7226 IAAV7267 IAAV7349 IAAV739 IAAV7394 IAAV7418 ## 1 0 0 2 2 0 1 0 0 ## 2 2 0 2 2 0 2 0 0 ## 3 2 0 2 2 0 2 2 0 ## 4 2 0 2 2 0 2 0 2 ## 5 2 2 2 2 0 0 2 0 ## 6 0 0 0 2 0 2 0 2 ## IAAV7428 IAAV7454 IAAV7468 IAAV7519 IAAV7594 IAAV7767 IAAV7827 IAAV7987 ## 1 2 0 2 2 0 2 0 2 ## 2 0 0 0 2 2 2 0 2 ## 3 0 2 0 2 0 0 2 2 ## 4 0 2 1 2 0 2 2 2 ## 5 0 2 0 2 0 0 0 2 ## 6 0 2 0 0 0 2 0 2 ## IAAV8184 IAAV8200 IAAV8211 IAAV8218 IAAV8262 IAAV8297 IAAV8499 IAAV8527 ## 1 0 0 0 0 2 2 2 2 ## 2 2 0 0 0 2 2 2 0 ## 3 2 0 0 1 0 2 2 2 ## 4 0 0 0 2 2 2 2 2 ## 5 0 0 0 0 2 2 2 2 ## 6 0 0 0 0 0 2 2 1 ## IAAV8572 IAAV8633 IAAV8644 IAAV8683 IAAV8693 IAAV8707 IAAV8743 IAAV880 ## 1 2 2 2 2 2 0 2 1 ## 2 2 2 0 0 2 0 0 0 ## 3 2 2 0 0 0 0 1 2 ## 4 2 2 0 2 2 0 2 1 ## 5 2 2 2 0 0 0 2 2 ## 6 2 2 0 0 0 0 2 2 ## IAAV883 IAAV8987 IAAV902 IAAV9068 IAAV9150 IAAV971 IACX10982 IACX11283 ## 1 2 2 0 2 2 2 2 2 ## 2 2 0 0 2 2 0 0 0 ## 3 2 2 0 0 2 2 2 2 ## 4 2 0 2 2 2 2 2 2 ## 5 2 2 2 0 2 2 2 0 ## 6 2 2 0 0 2 2 0 0 ## IACX11305 IACX11320 IACX11374 IACX1163 IACX2226 IACX2322 IACX2471 ## 1 0 2 2 0 0 0 0 ## 2 0 2 2 0 0 0 0 ## 3 0 1 1 0 2 2 0 ## 4 2 2 2 2 0 2 2 ## 5 0 2 2 2 0 0 2 ## 6 0 2 2 2 2 0 0 ## IACX2831 IACX2890 IACX2901 IACX2960 IACX3386 IACX3391 IACX3496 IACX5717 ## 1 0 2 0 2 2 2 0 0 ## 2 2 2 0 0 0 0 0 0 ## 3 0 2 0 0 2 2 0 0 ## 4 2 0 0 0 2 0 0 0 ## 5 0 2 0 1 2 2 2 0 ## 6 2 2 2 0 2 2 0 0 ## IACX5756 IACX5764 IACX5818 IACX5899 IACX5914 IACX5957 IACX5974 IACX5994 ## 1 1 0 0 0 2 2 0 0 ## 2 2 0 0 2 2 2 0 2 ## 3 2 0 0 0 2 2 2 1 ## 4 2 0 0 0 2 2 0 2 ## 5 1 0 0 0 2 2 0 2 ## 6 2 0 2 0 0 0 2 2 ## IACX6064 IACX6070 IACX6080 IACX6200 IACX6214 IACX7540 IACX7649 IACX7717 ## 1 2 2 0 2 2 2 0 2 ## 2 0 2 0 2 2 2 0 2 ## 3 2 2 2 2 2 0 0 2 ## 4 2 2 2 2 2 2 0 0 ## 5 0 2 2 2 2 2 0 2 ## 6 2 0 0 2 0 2 0 2 ## IACX7848 IACX8278 IACX8446 IACX846 IACX8817 IACX9237 IACX9353 IACX987 ## 1 0 2 0 2 2 2 0 0 ## 2 2 2 0 0 2 2 0 2 ## 3 1 2 2 0 0 2 0 0 ## 4 0 2 2 0 2 1 0 0 ## 5 0 2 2 0 2 2 0 0 ## 6 2 0 0 0 2 0 2 0 ## Jagger_c367_427 Jagger_c4026_328 Jagger_c4331_105 Jagger_c5597_332 ## 1 2 2 0 0 ## 2 2 2 0 0 ## 3 2 2 2 2 ## 4 2 2 2 2 ## 5 2 2 0 2 ## 6 2 2 2 2 ## Jagger_c6297_88 Jagger_c8121_167 JD_c107_683 JD_c13024_360 JD_c14460_122 ## 1 0 2 2 0 2 ## 2 2 2 2 0 2 ## 3 2 2 1 2 0 ## 4 0 0 2 2 2 ## 5 0 2 2 2 2 ## 6 2 2 2 2 2 ## JD_c21248_511 JD_c23336_253 JD_c3173_1128 JD_c63957_1176 JD_c64219_207 ## 1 0 2 1 2 2 ## 2 0 2 0 2 2 ## 3 0 0 0 2 2 ## 4 0 2 0 2 2 ## 5 0 2 1 2 2 ## 6 2 2 0 2 2 ## Ku_c101046_1063 Ku_c11336_499 Ku_c11813_215 Ku_c11884_1220 Ku_c12469_837 ## 1 2 0 2 0 0 ## 2 0 0 2 0 0 ## 3 2 1 2 2 2 ## 4 2 0 2 0 2 ## 5 2 2 2 0 2 ## 6 2 0 2 2 2 ## Ku_c12886_1250 Ku_c13130_1319 Ku_c1454_984 Ku_c1571_1457 Ku_c18096_552 ## 1 2 0 2 2 2 ## 2 2 0 2 2 2 ## 3 2 0 2 2 2 ## 4 2 0 2 2 2 ## 5 2 0 2 2 2 ## 6 2 2 2 2 2 ## Ku_c19185_1569 Ku_c1932_1583 Ku_c19745_892 Ku_c22692_1021 Ku_c22706_1527 ## 1 0 2 2 2 0 ## 2 0 2 2 2 0 ## 3 2 1 2 2 0 ## 4 0 2 2 2 0 ## 5 2 2 2 2 2 ## 6 0 2 2 2 0 ## Ku_c24158_1468 Ku_c24324_850 Ku_c24644_599 Ku_c24974_674 Ku_c25346_508 ## 1 0 0 0 2 0 ## 2 0 2 2 0 2 ## 3 0 0 0 2 2 ## 4 0 0 2 1 1 ## 5 2 0 2 2 2 ## 6 2 2 0 0 0 ## Ku_c26804_497 Ku_c26872_269 Ku_c27771_508 Ku_c29856_132 Ku_c30637_1294 ## 1 2 2 2 0 1 ## 2 2 2 2 0 0 ## 3 2 2 2 2 2 ## 4 2 2 2 0 0 ## 5 2 2 2 0 2 ## 6 2 2 2 2 0 ## Ku_c30806_235 Ku_c32100_105 Ku_c331_1124 Ku_c3647_1443 Ku_c405_1954 ## 1 2 0 0 0 0 ## 2 2 0 0 2 2 ## 3 0 0 2 2 0 ## 4 0 0 0 2 2 ## 5 0 0 2 2 2 ## 6 2 2 2 0 2 ## Ku_c4231_940 Ku_c46571_2583 Ku_c46689_1653 Ku_c5938_4221 Ku_c5969_1667 ## 1 0 2 0 2 2 ## 2 2 2 2 2 1 ## 3 2 2 0 2 2 ## 4 0 1 0 2 0 ## 5 0 2 0 2 0 ## 6 0 2 2 2 2 ## Ku_c6080_1667 Ku_c663_1896 Ku_c69608_894 Ku_c71122_384 Ku_c8992_405 ## 1 0 0 2 2 2 ## 2 2 2 2 2 0 ## 3 2 0 2 2 1 ## 4 2 2 2 2 0 ## 5 2 2 0 2 0 ## 6 2 0 0 2 0 ## Ku_c9909_1766 Kukri_c10016_369 Kukri_c10017_833 Kukri_c100408_598 ## 1 0 2 0 2 ## 2 2 2 0 2 ## 3 1 2 0 1 ## 4 0 2 2 0 ## 5 2 2 0 0 ## 6 0 2 0 0 ## Kukri_c100592_82 Kukri_c100613_331 Kukri_c100884_175 Kukri_c102554_189 ## 1 2 2 2 2 ## 2 1 2 2 2 ## 3 2 2 0 0 ## 4 2 2 2 0 ## 5 2 2 0 2 ## 6 2 2 2 2 ## Kukri_c10430_642 Kukri_c10508_253 Kukri_c105601_74 Kukri_c11106_292 ## 1 2 2 2 2 ## 2 2 2 0 2 ## 3 2 2 0 2 ## 4 2 2 0 2 ## 5 2 2 2 2 ## 6 2 2 0 2 ## Kukri_c11415_1074 Kukri_c1175_1577 Kukri_c12212_182 Kukri_c12817_59 ## 1 2 0 0 2 ## 2 0 0 0 2 ## 3 2 2 0 2 ## 4 2 2 0 0 ## 5 2 2 0 0 ## 6 2 0 0 0 ## Kukri_c13045_302 Kukri_c13568_575 Kukri_c13830_487 Kukri_c13830_924 ## 1 0 2 2 2 ## 2 2 2 2 2 ## 3 0 2 2 2 ## 4 0 2 2 0 ## 5 0 2 2 0 ## 6 2 2 0 0 ## Kukri_c148_1346 Kukri_c14877_303 Kukri_c14902_1112 Kukri_c14906_220 ## 1 0 0 0 2 ## 2 0 0 2 2 ## 3 2 0 0 2 ## 4 2 0 0 0 ## 5 0 0 0 2 ## 6 0 0 0 2 ## Kukri_c1552_1059 Kukri_c15615_254 Kukri_c15912_1189 Kukri_c16745_75 ## 1 0 2 2 0 ## 2 0 2 2 0 ## 3 0 2 2 0 ## 4 0 2 2 0 ## 5 0 2 2 0 ## 6 0 2 2 0 ## Kukri_c17133_214 Kukri_c1771_715 Kukri_c18109_331 Kukri_c18109_475 ## 1 2 0 2 0 ## 2 2 0 0 0 ## 3 2 2 2 0 ## 4 2 2 2 0 ## 5 2 2 2 0 ## 6 2 2 2 0 ## Kukri_c18109_649 Kukri_c18148_1177 Kukri_c18230_1633 Kukri_c18348_1025 ## 1 2 0 0 2 ## 2 0 0 0 2 ## 3 2 0 2 0 ## 4 2 0 2 0 ## 5 2 0 2 0 ## 6 2 0 0 2 ## Kukri_c18608_729 Kukri_c1911_222 Kukri_c19562_127 Kukri_c20012_1362 ## 1 2 2 0 0 ## 2 2 0 2 2 ## 3 2 0 0 2 ## 4 0 0 0 2 ## 5 0 0 0 2 ## 6 2 0 0 2 ## Kukri_c20486_255 Kukri_c20672_360 Kukri_c21443_482 Kukri_c22047_313 ## 1 0 2 2 2 ## 2 0 2 2 2 ## 3 1 2 0 2 ## 4 0 2 2 0 ## 5 0 2 0 0 ## 6 0 2 2 0 ## Kukri_c22513_1780 Kukri_c23338_624 Kukri_c23388_695 Kukri_c23433_416 ## 1 0 2 2 2 ## 2 0 2 2 2 ## 3 0 2 2 2 ## 4 0 2 2 2 ## 5 2 2 2 2 ## 6 2 2 2 2 ## Kukri_c2348_2340 Kukri_c24148_254 Kukri_c24262_918 Kukri_c2454_59 ## 1 0 0 0 2 ## 2 0 1 0 2 ## 3 0 0 0 2 ## 4 0 2 0 2 ## 5 0 2 0 2 ## 6 2 0 0 2 ## Kukri_c24795_75 Kukri_c24852_466 Kukri_c24895_402 Kukri_c2526_1375 ## 1 2 0 2 0 ## 2 2 0 0 0 ## 3 2 0 2 2 ## 4 2 0 2 2 ## 5 2 0 2 2 ## 6 2 0 0 0 ## Kukri_c26488_139 Kukri_c26517_691 Kukri_c26676_225 Kukri_c2706_1424 ## 1 0 2 2 0 ## 2 2 0 2 2 ## 3 0 2 2 2 ## 4 0 0 2 2 ## 5 0 2 2 2 ## 6 0 2 2 2 ## Kukri_c27309_590 Kukri_c27568_1763 Kukri_c27691_226 Kukri_c27958_334 ## 1 0 0 2 0 ## 2 2 0 2 0 ## 3 0 0 2 0 ## 4 0 0 2 2 ## 5 2 0 2 0 ## 6 0 0 0 2 ## Kukri_c28077_282 Kukri_c28080_887 Kukri_c28160_2017 Kukri_c28165_906 ## 1 2 2 0 0 ## 2 2 2 2 0 ## 3 1 0 0 0 ## 4 0 0 0 0 ## 5 0 0 0 2 ## 6 0 2 0 0 ## Kukri_c28650_111 Kukri_c28968_130 Kukri_c29039_315 Kukri_c29110_360 ## 1 0 0 0 0 ## 2 0 0 0 0 ## 3 2 0 0 0 ## 4 2 0 0 2 ## 5 2 0 0 0 ## 6 0 2 0 2 ## Kukri_c29484_637 Kukri_c2955_281 Kukri_c29655_194 Kukri_c29711_277 ## 1 1 2 2 0 ## 2 2 2 0 0 ## 3 1 1 2 0 ## 4 0 0 2 0 ## 5 2 0 2 0 ## 6 1 0 2 2 ## Kukri_c3009_1374 Kukri_c30370_79 Kukri_c3067_398 Kukri_c30714_633 ## 1 0 0 2 0 ## 2 0 0 2 0 ## 3 0 1 0 0 ## 4 0 2 0 0 ## 5 0 0 2 0 ## 6 0 0 0 1 ## Kukri_c30814_460 Kukri_c30847_344 Kukri_c31449_620 Kukri_c31599_1456 ## 1 2 0 0 0 ## 2 2 0 2 0 ## 3 0 2 2 0 ## 4 0 2 2 2 ## 5 2 2 2 0 ## 6 0 0 0 0 ## Kukri_c3181_2340 Kukri_c31995_1948 Kukri_c322_1394 Kukri_c33022_198 ## 1 -1 0 0 0 ## 2 2 0 2 0 ## 3 2 2 0 1 ## 4 2 2 0 2 ## 5 -1 2 0 2 ## 6 2 1 0 2 ## Kukri_c3344_401 Kukri_c34147_152 Kukri_c34353_821 Kukri_c34553_188 ## 1 0 2 0 2 ## 2 0 0 0 2 ## 3 0 2 0 2 ## 4 0 2 2 0 ## 5 0 2 0 2 ## 6 0 2 0 2 ## Kukri_c35426_507 Kukri_c35516_93 Kukri_c36329_526 Kukri_c38868_427 ## 1 2 2 0 0 ## 2 2 2 0 0 ## 3 2 2 0 0 ## 4 2 2 0 0 ## 5 2 0 0 0 ## 6 2 0 2 0 ## Kukri_c39081_265 Kukri_c39377_286 Kukri_c3948_209 Kukri_c39767_204 ## 1 2 2 2 2 ## 2 2 2 2 2 ## 3 2 2 2 2 ## 4 1 2 2 2 ## 5 2 2 0 1 ## 6 2 2 2 2 ## Kukri_c40439_366 Kukri_c40735_318 Kukri_c40764_367 Kukri_c42078_708 ## 1 1 2 0 0 ## 2 0 2 0 0 ## 3 2 2 0 1 ## 4 0 0 0 0 ## 5 1 0 0 2 ## 6 2 2 0 0 ## Kukri_c42895_593 Kukri_c4294_371 Kukri_c44201_497 Kukri_c44369_131 ## 1 1 0 0 0 ## 2 2 0 0 0 ## 3 2 0 2 0 ## 4 2 2 2 0 ## 5 2 0 2 0 ## 6 2 0 2 0 ## Kukri_c444_833 Kukri_c44604_203 Kukri_c45275_391 Kukri_c4559_278 ## 1 2 0 0 0 ## 2 2 2 0 0 ## 3 0 0 0 0 ## 4 0 0 0 0 ## 5 1 2 0 0 ## 6 2 2 0 0 ## Kukri_c45843_230 Kukri_c46040_620 Kukri_c46100_246 Kukri_c46218_66 ## 1 2 2 2 2 ## 2 2 2 2 0 ## 3 2 2 2 0 ## 4 2 1 2 0 ## 5 0 2 0 0 ## 6 2 2 0 0 ## Kukri_c46303_512 Kukri_c46426_338 Kukri_c46526_103 Kukri_c46542_1015 ## 1 2 0 0 2 ## 2 2 0 2 2 ## 3 0 0 2 0 ## 4 2 1 2 0 ## 5 2 2 0 2 ## 6 2 2 2 2 ## Kukri_c46948_558 Kukri_c47259_416 Kukri_c484_1704 Kukri_c48943_1149 ## 1 0 0 0 0 ## 2 0 0 0 2 ## 3 0 0 0 2 ## 4 0 2 2 2 ## 5 0 2 0 0 ## 6 0 2 0 2 ## Kukri_c49506_396 Kukri_c49784_56 Kukri_c49798_300 Kukri_c49800_254 ## 1 2 2 1 0 ## 2 2 0 1 2 ## 3 2 0 0 2 ## 4 2 0 0 1 ## 5 2 0 0 2 ## 6 2 0 0 2 ## Kukri_c51296_438 Kukri_c51666_401 Kukri_c51735_79 Kukri_c52_225 ## 1 0 2 0 2 ## 2 0 2 2 2 ## 3 0 2 2 2 ## 4 0 2 2 2 ## 5 0 2 0 0 ## 6 0 2 2 0 ## Kukri_c52736_422 Kukri_c5336_365 Kukri_c53682_85 Kukri_c54059_654 ## 1 2 0 2 2 ## 2 2 0 0 0 ## 3 2 0 2 0 ## 4 0 0 0 2 ## 5 0 0 0 0 ## 6 0 0 2 2 ## Kukri_c5407_192 Kukri_c54820_382 Kukri_c55028_182 Kukri_c55780_296 ## 1 0 2 0 2 ## 2 0 2 2 2 ## 3 2 2 0 2 ## 4 2 2 0 2 ## 5 2 2 2 2 ## 6 2 2 0 2 ## Kukri_c55981_194 Kukri_c57452_1040 Kukri_c5793_1983 Kukri_c59051_579 ## 1 0 2 2 2 ## 2 0 2 0 2 ## 3 0 2 0 2 ## 4 1 0 2 0 ## 5 0 2 0 2 ## 6 0 0 0 2 ## Kukri_c59657_805 Kukri_c60322_490 Kukri_c60633_121 Kukri_c6169_141 ## 1 1 0 2 0 ## 2 0 0 0 0 ## 3 0 0 2 0 ## 4 2 2 0 0 ## 5 0 0 2 0 ## 6 0 0 0 0 ## Kukri_c62431_927 Kukri_c6386_2065 Kukri_c64268_101 Kukri_c64744_1087 ## 1 0 0 0 0 ## 2 0 0 0 0 ## 3 0 0 0 0 ## 4 0 0 2 2 ## 5 0 0 0 0 ## 6 0 0 0 0 ## Kukri_c6477_696 Kukri_c65047_76 Kukri_c65610_551 Kukri_c66214_59 ## 1 2 0 0 2 ## 2 2 0 0 0 ## 3 2 0 0 0 ## 4 2 0 0 0 ## 5 2 0 0 0 ## 6 2 0 0 0 ## Kukri_c693_87 Kukri_c7036_87 Kukri_c717_98 Kukri_c7241_322 ## 1 2 2 2 2 ## 2 2 2 2 2 ## 3 1 0 2 2 ## 4 2 2 2 2 ## 5 2 0 2 2 ## 6 1 2 2 2 ## Kukri_c74165_204 Kukri_c7458_1132 Kukri_c74724_548 Kukri_c75359_152 ## 1 2 2 2 0 ## 2 2 2 2 0 ## 3 2 2 2 2 ## 4 2 2 2 2 ## 5 2 2 2 0 ## 6 2 2 2 2 ## Kukri_c7770_176 Kukri_c79627_494 Kukri_c82145_51 Kukri_c8400_2315 ## 1 2 0 0 0 ## 2 2 0 0 0 ## 3 0 0 0 1 ## 4 2 1 0 2 ## 5 2 0 0 2 ## 6 0 2 0 2 ## Kukri_c855_2107 Kukri_c89274_86 Kukri_c9068_1416 Kukri_c91360_220 ## 1 0 0 0 2 ## 2 0 0 2 1 ## 3 0 2 0 2 ## 4 0 0 2 2 ## 5 0 2 2 2 ## 6 2 0 0 2 ## Kukri_c9387_112 Kukri_c9898_1766 Kukri_rep_c101550_113 ## 1 2 0 0 ## 2 2 0 2 ## 3 2 0 0 ## 4 2 0 2 ## 5 2 2 1 ## 6 2 0 0 ## Kukri_rep_c101620_1848 Kukri_rep_c102608_599 Kukri_rep_c102953_304 ## 1 2 0 2 ## 2 2 2 2 ## 3 2 0 2 ## 4 2 2 2 ## 5 2 2 0 ## 6 0 2 2 ## Kukri_rep_c103613_253 Kukri_rep_c105097_275 Kukri_rep_c105330_552 ## 1 2 0 0 ## 2 2 0 2 ## 3 2 0 0 ## 4 2 2 0 ## 5 0 0 2 ## 6 0 2 0 ## Kukri_rep_c105704_342 Kukri_rep_c106474_293 Kukri_rep_c110868_147 ## 1 2 2 2 ## 2 0 2 0 ## 3 0 2 0 ## 4 2 2 2 ## 5 2 2 2 ## 6 0 2 2 ## Kukri_rep_c111369_53 Kukri_rep_c111517_289 Kukri_rep_c112556_53 ## 1 0 1 2 ## 2 0 2 0 ## 3 0 2 2 ## 4 2 2 2 ## 5 0 2 2 ## 6 2 2 2 ## Kukri_rep_c112609_711 Kukri_rep_c113407_250 Kukri_rep_c68068_95 ## 1 2 2 2 ## 2 2 0 2 ## 3 2 2 0 ## 4 2 2 2 ## 5 0 0 2 ## 6 2 2 2 ## Kukri_rep_c68107_833 Kukri_rep_c68415_936 Kukri_rep_c68594_530 ## 1 0 2 2 ## 2 1 2 0 ## 3 2 2 2 ## 4 0 2 0 ## 5 2 0 0 ## 6 2 2 0 ## Kukri_rep_c69378_1842 Kukri_rep_c69614_1326 Kukri_rep_c69900_197 ## 1 0 2 0 ## 2 2 2 0 ## 3 0 2 0 ## 4 0 2 0 ## 5 0 2 0 ## 6 2 2 0 ## Kukri_rep_c71778_644 Kukri_rep_c73094_348 Kukri_rep_c86903_184 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 0 2 ## 4 2 0 2 ## 5 0 1 2 ## 6 2 2 2 ## Kukri_rep_c90581_382 Kukri_rep_c97145_758 Kukri_s109646_113 ## 1 2 2 0 ## 2 0 2 2 ## 3 0 2 2 ## 4 0 2 2 ## 5 0 2 2 ## 6 0 2 2 ## Kukri_s117946_404 Kukri_s118416_65 Ra_c10284_405 Ra_c10455_3226 ## 1 2 2 2 2 ## 2 2 2 2 2 ## 3 2 2 2 0 ## 4 2 0 2 0 ## 5 2 2 2 0 ## 6 2 2 0 2 ## Ra_c105310_660 Ra_c11910_419 Ra_c14657_919 Ra_c15153_324 Ra_c15638_858 ## 1 0 0 0 2 0 ## 2 0 0 0 2 0 ## 3 2 0 0 0 0 ## 4 2 0 0 2 0 ## 5 0 0 0 2 2 ## 6 2 0 2 0 0 ## Ra_c16310_331 Ra_c1757_256 Ra_c17685_927 Ra_c18630_284 Ra_c19198_137 ## 1 2 0 0 0 2 ## 2 2 2 2 0 0 ## 3 2 2 1 0 2 ## 4 2 2 2 0 2 ## 5 2 0 0 0 2 ## 6 2 0 0 0 2 ## Ra_c21094_506 Ra_c21740_341 Ra_c22675_581 Ra_c23432_639 Ra_c26829_375 ## 1 2 2 2 0 2 ## 2 1 2 2 2 2 ## 3 2 2 0 2 2 ## 4 1 1 2 2 2 ## 5 0 2 2 0 1 ## 6 0 2 0 1 2 ## Ra_c32003_420 Ra_c3470_1551 Ra_c37244_428 Ra_c39588_830 Ra_c4373_716 ## 1 0 0 0 0 0 ## 2 2 0 2 0 2 ## 3 0 0 2 2 2 ## 4 0 0 1 0 2 ## 5 2 0 2 0 0 ## 6 0 0 2 0 2 ## Ra_c49035_206 Ra_c5508_706 Ra_c5718_1142 Ra_c58279_684 Ra_c58335_189 ## 1 2 2 0 0 2 ## 2 2 2 0 0 2 ## 3 2 2 0 2 2 ## 4 2 0 2 1 0 ## 5 0 0 0 2 0 ## 6 2 2 0 2 0 ## Ra_c6065_1145 Ra_c6930_1753 Ra_c73114_428 Ra_c7973_1185 Ra_c857_1853 ## 1 0 0 2 2 0 ## 2 0 0 1 0 0 ## 3 2 0 2 0 0 ## 4 0 2 0 0 0 ## 5 2 2 0 0 0 ## 6 0 2 2 0 0 ## Ra_c9427_300 RAC875_c100147_55 RAC875_c10083_800 RAC875_c1022_3059 ## 1 0 0 0 2 ## 2 0 0 0 0 ## 3 2 0 0 1 ## 4 2 0 0 2 ## 5 0 0 0 2 ## 6 2 0 0 2 ## RAC875_c103396_446 RAC875_c103613_441 RAC875_c10672_440 ## 1 2 2 2 ## 2 2 0 0 ## 3 2 1 2 ## 4 0 2 2 ## 5 0 0 0 ## 6 2 0 0 ## RAC875_c11459_655 RAC875_c11876_120 RAC875_c11899_366 RAC875_c12348_720 ## 1 0 2 0 2 ## 2 0 0 0 0 ## 3 0 2 0 0 ## 4 0 0 2 0 ## 5 0 2 0 0 ## 6 0 0 0 0 ## RAC875_c12733_1509 RAC875_c12821_550 RAC875_c13221_1017 ## 1 2 2 0 ## 2 2 0 0 ## 3 0 2 0 ## 4 0 2 2 ## 5 0 2 0 ## 6 0 2 0 ## RAC875_c13585_778 RAC875_c13610_822 RAC875_c14064_177 RAC875_c14501_102 ## 1 0 0 2 2 ## 2 0 2 2 0 ## 3 2 2 2 2 ## 4 0 0 2 2 ## 5 2 2 2 2 ## 6 2 0 0 2 ## RAC875_c14684_1128 RAC875_c14803_873 RAC875_c15213_1942 ## 1 2 2 2 ## 2 2 2 0 ## 3 2 0 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 2 0 2 ## RAC875_c15229_108 RAC875_c16405_84 RAC875_c16697_1415 RAC875_c17787_274 ## 1 0 2 2 0 ## 2 0 2 2 0 ## 3 0 2 2 0 ## 4 0 0 0 0 ## 5 0 0 2 0 ## 6 2 2 2 0 ## RAC875_c17918_321 RAC875_c195_499 RAC875_c19685_944 RAC875_c20021_615 ## 1 2 0 0 2 ## 2 2 0 0 2 ## 3 0 0 0 2 ## 4 2 2 0 2 ## 5 0 0 0 2 ## 6 0 2 0 2 ## RAC875_c202_474 RAC875_c20247_398 RAC875_c20429_903 RAC875_c20469_686 ## 1 0 0 0 0 ## 2 2 0 2 0 ## 3 0 2 2 0 ## 4 2 2 2 0 ## 5 2 2 0 0 ## 6 2 2 2 0 ## RAC875_c21165_1058 RAC875_c21369_425 RAC875_c21750_784 RAC875_c220_1354 ## 1 0 2 2 2 ## 2 0 2 2 2 ## 3 2 0 2 2 ## 4 2 0 2 2 ## 5 0 0 0 0 ## 6 0 0 0 2 ## RAC875_c22210_191 RAC875_c2260_1700 RAC875_c22627_315 RAC875_c232_1895 ## 1 2 0 0 2 ## 2 2 0 0 2 ## 3 2 0 2 2 ## 4 2 0 0 2 ## 5 1 0 2 2 ## 6 0 0 0 2 ## RAC875_c23340_2243 RAC875_c23521_589 RAC875_c24047_358 RAC875_c25124_182 ## 1 0 0 0 2 ## 2 0 2 0 2 ## 3 0 0 0 1 ## 4 0 0 0 2 ## 5 2 0 0 2 ## 6 2 2 0 0 ## RAC875_c25512_888 RAC875_c25839_225 RAC875_c25988_214 RAC875_c26860_648 ## 1 0 0 2 0 ## 2 2 1 2 0 ## 3 0 0 2 0 ## 4 0 0 0 0 ## 5 2 0 0 0 ## 6 2 0 0 0 ## RAC875_c2734_135 RAC875_c27536_611 RAC875_c27548_417 RAC875_c27611_467 ## 1 2 0 2 2 ## 2 2 2 1 2 ## 3 2 2 0 0 ## 4 2 2 2 0 ## 5 2 2 2 0 ## 6 2 0 0 0 ## RAC875_c27954_378 RAC875_c291_696 RAC875_c29361_70 RAC875_c29906_275 ## 1 1 2 2 2 ## 2 0 2 2 2 ## 3 0 0 2 2 ## 4 1 2 2 2 ## 5 2 0 2 2 ## 6 0 0 2 2 ## RAC875_c30203_57 RAC875_c3141_214 RAC875_c31482_513 RAC875_c3259_276 ## 1 0 2 2 0 ## 2 2 0 2 2 ## 3 0 2 2 2 ## 4 2 2 2 0 ## 5 0 2 2 0 ## 6 0 2 2 2 ## RAC875_c33279_526 RAC875_c33823_279 RAC875_c34012_983 RAC875_c34515_86 ## 1 2 2 2 2 ## 2 2 2 2 2 ## 3 2 0 2 0 ## 4 2 0 2 2 ## 5 2 0 2 2 ## 6 2 0 0 0 ## RAC875_c35819_165 RAC875_c36363_222 RAC875_c3672_705 RAC875_c36922_829 ## 1 2 2 2 0 ## 2 0 2 2 2 ## 3 0 2 0 1 ## 4 0 2 2 0 ## 5 2 2 2 0 ## 6 0 2 0 0 ## RAC875_c371_251 RAC875_c3760_770 RAC875_c39204_91 RAC875_c3925_763 ## 1 0 0 2 2 ## 2 0 0 2 2 ## 3 0 0 2 2 ## 4 0 0 2 2 ## 5 0 0 2 2 ## 6 0 0 2 2 ## RAC875_c40237_269 RAC875_c4033_192 RAC875_c4047_115 RAC875_c40654_206 ## 1 2 0 0 2 ## 2 2 2 0 2 ## 3 2 0 2 0 ## 4 2 2 2 2 ## 5 2 0 2 0 ## 6 2 2 0 2 ## RAC875_c41938_471 RAC875_c42647_153 RAC875_c43002_382 RAC875_c43295_135 ## 1 2 0 2 2 ## 2 1 2 2 2 ## 3 0 2 2 2 ## 4 0 2 2 0 ## 5 0 2 2 0 ## 6 2 2 2 2 ## RAC875_c43389_105 RAC875_c44680_90 RAC875_c44756_381 RAC875_c45515_65 ## 1 2 2 2 0 ## 2 2 0 2 0 ## 3 2 0 2 2 ## 4 0 0 2 2 ## 5 0 2 2 0 ## 6 0 0 2 0 ## RAC875_c46194_201 RAC875_c46236_214 RAC875_c46269_387 RAC875_c46403_277 ## 1 0 0 2 2 ## 2 0 2 2 2 ## 3 0 0 2 2 ## 4 0 2 2 2 ## 5 0 2 2 0 ## 6 0 2 2 2 ## RAC875_c46751_112 RAC875_c46811_128 RAC875_c46980_148 RAC875_c47976_291 ## 1 2 0 0 0 ## 2 0 2 0 0 ## 3 2 2 1 0 ## 4 2 2 0 0 ## 5 2 2 0 0 ## 6 0 0 2 0 ## RAC875_c48107_65 RAC875_c48773_253 RAC875_c48891_87 RAC875_c50676_588 ## 1 0 0 0 0 ## 2 2 0 2 0 ## 3 2 0 2 0 ## 4 0 0 0 2 ## 5 2 0 0 0 ## 6 0 0 2 2 ## RAC875_c510_923 RAC875_c51971_428 RAC875_c52195_324 RAC875_c525_106 ## 1 0 2 0 0 ## 2 0 2 0 0 ## 3 2 2 1 0 ## 4 0 0 2 0 ## 5 0 2 0 0 ## 6 0 0 0 1 ## RAC875_c525_202 RAC875_c52933_818 RAC875_c53520_103 RAC875_c53629_483 ## 1 2 2 2 0 ## 2 2 0 2 0 ## 3 2 2 0 0 ## 4 2 0 0 0 ## 5 2 0 0 0 ## 6 2 2 0 0 ## RAC875_c53725_217 RAC875_c55720_240 RAC875_c5577_1682 RAC875_c55774_225 ## 1 2 0 0 0 ## 2 2 0 0 0 ## 3 0 2 2 1 ## 4 0 0 0 0 ## 5 0 0 2 2 ## 6 0 0 2 2 ## RAC875_c56101_368 RAC875_c57829_83 RAC875_c5799_224 RAC875_c59542_53 ## 1 0 0 0 2 ## 2 0 0 0 1 ## 3 0 2 0 0 ## 4 0 2 0 2 ## 5 0 0 0 2 ## 6 0 2 2 0 ## RAC875_c59682_144 RAC875_c5998_913 RAC875_c6075_214 RAC875_c6144_121 ## 1 0 0 2 0 ## 2 0 2 2 0 ## 3 0 2 0 0 ## 4 0 2 0 2 ## 5 0 0 2 2 ## 6 0 2 0 0 ## RAC875_c61559_435 RAC875_c62483_112 RAC875_c63933_184 RAC875_c6538_123 ## 1 2 0 2 0 ## 2 2 0 0 0 ## 3 2 0 0 2 ## 4 2 2 0 2 ## 5 2 2 2 2 ## 6 2 2 0 2 ## RAC875_c6649_642 RAC875_c67063_703 RAC875_c67826_84 RAC875_c68056_81 ## 1 2 0 0 0 ## 2 2 0 2 2 ## 3 2 0 0 0 ## 4 2 2 2 0 ## 5 2 0 1 0 ## 6 2 0 0 0 ## RAC875_c6837_468 RAC875_c7158_687 RAC875_c7319_195 RAC875_c7518_2343 ## 1 1 2 2 2 ## 2 2 2 1 2 ## 3 2 2 2 2 ## 4 2 2 2 2 ## 5 2 0 2 2 ## 6 2 2 2 2 ## RAC875_c76675_372 RAC875_c8093_605 RAC875_c8221_649 RAC875_c8221_711 ## 1 2 2 2 2 ## 2 2 2 2 2 ## 3 2 2 0 0 ## 4 2 2 2 2 ## 5 2 0 2 2 ## 6 2 0 0 0 ## RAC875_c8254_594 RAC875_c826_839 RAC875_c829_1971 RAC875_c86104_111 ## 1 2 1 0 2 ## 2 2 2 0 2 ## 3 0 0 1 2 ## 4 1 2 1 1 ## 5 2 2 0 2 ## 6 0 0 0 0 ## RAC875_c8661_692 RAC875_c8842_724 RAC875_c9082_267 RAC875_c9523_328 ## 1 0 0 2 2 ## 2 2 0 2 2 ## 3 0 0 2 2 ## 4 0 0 2 2 ## 5 0 0 2 2 ## 6 2 0 2 2 ## RAC875_c97102_63 RAC875_c99055_69 RAC875_rep_c101299_88 ## 1 2 2 2 ## 2 2 0 2 ## 3 2 2 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 0 2 2 ## RAC875_rep_c104937_1548 RAC875_rep_c105196_532 RAC875_rep_c105718_304 ## 1 2 2 2 ## 2 2 2 1 ## 3 2 2 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 2 0 2 ## RAC875_rep_c106439_1159 RAC875_rep_c106876_446 RAC875_rep_c107228_92 ## 1 0 2 0 ## 2 0 2 0 ## 3 0 2 0 ## 4 0 2 0 ## 5 2 2 0 ## 6 0 2 2 ## RAC875_rep_c108328_299 RAC875_rep_c108548_163 RAC875_rep_c109288_122 ## 1 0 0 2 ## 2 0 0 2 ## 3 0 0 2 ## 4 0 2 0 ## 5 0 0 2 ## 6 0 0 2 ## RAC875_rep_c111243_125 RAC875_rep_c112818_870 RAC875_rep_c113106_355 ## 1 2 2 2 ## 2 2 2 0 ## 3 1 2 1 ## 4 0 2 2 ## 5 0 2 2 ## 6 0 2 2 ## RAC875_rep_c113731_95 RAC875_rep_c116173_605 RAC875_rep_c119568_203 ## 1 0 2 0 ## 2 0 2 0 ## 3 0 2 0 ## 4 0 2 0 ## 5 0 2 0 ## 6 0 0 0 ## RAC875_rep_c69334_132 RAC875_rep_c69360_259 RAC875_rep_c69619_145 ## 1 0 2 2 ## 2 1 2 2 ## 3 0 2 2 ## 4 2 2 0 ## 5 2 1 0 ## 6 0 2 0 ## RAC875_rep_c70284_235 RAC875_rep_c71093_1070 RAC875_rep_c71248_689 ## 1 2 2 0 ## 2 2 2 2 ## 3 2 0 2 ## 4 2 0 0 ## 5 2 0 2 ## 6 2 0 2 ## RAC875_rep_c71463_98 RAC875_rep_c72040_1809 RAC875_rep_c76193_513 ## 1 0 2 0 ## 2 0 2 0 ## 3 0 2 1 ## 4 0 2 0 ## 5 2 2 0 ## 6 2 2 0 ## RAC875_rep_c77684_470 RAC875_rep_c78007_425 RAC875_rep_c79427_59 ## 1 2 0 0 ## 2 2 1 2 ## 3 1 2 2 ## 4 2 2 0 ## 5 2 0 2 ## 6 2 0 2 ## RAC875_rep_c85994_258 RAC875_rep_c91682_90 RAC875_s113853_61 ## 1 2 2 2 ## 2 2 0 0 ## 3 2 2 0 ## 4 2 0 2 ## 5 2 2 0 ## 6 2 2 2 ## RFL_Contig1284_640 RFL_Contig1599_906 RFL_Contig1622_1259 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 0 2 ## 4 2 0 2 ## 5 2 0 2 ## 6 0 0 2 ## RFL_Contig1987_3440 RFL_Contig2206_1694 RFL_Contig2484_1065 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 2 2 ## 4 0 2 2 ## 5 2 0 2 ## 6 2 0 2 ## RFL_Contig2615_982 RFL_Contig2852_1839 RFL_Contig29_1062 ## 1 0 1 0 ## 2 0 2 0 ## 3 0 0 2 ## 4 0 2 2 ## 5 0 0 0 ## 6 0 0 2 ## RFL_Contig3008_1370 RFL_Contig304_729 RFL_Contig3343_2115 ## 1 2 0 0 ## 2 2 0 0 ## 3 2 0 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 2 0 0 ## RFL_Contig4140_1135 RFL_Contig4403_1034 RFL_Contig4790_1091 ## 1 1 0 0 ## 2 2 0 0 ## 3 2 1 0 ## 4 2 1 0 ## 5 1 2 0 ## 6 2 0 0 ## RFL_Contig4849_702 RFL_Contig5037_560 RFL_Contig5056_2192 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 0 2 ## 4 0 2 0 ## 5 0 2 0 ## 6 0 2 0 ## RFL_Contig5137_602 RFL_Contig5277_1283 RFL_Contig5302_405 ## 1 0 2 0 ## 2 0 2 0 ## 3 0 2 0 ## 4 0 2 0 ## 5 0 0 1 ## 6 0 0 0 ## RFL_Contig539_1789 RFL_Contig5495_464 RFL_Contig5495_682 ## 1 2 2 2 ## 2 2 2 2 ## 3 1 2 2 ## 4 0 0 0 ## 5 0 2 2 ## 6 0 2 2 ## RFL_Contig5706_1294 RFL_Contig5898_807 RFL_Contig5937_1677 ## 1 2 2 2 ## 2 0 2 2 ## 3 2 2 0 ## 4 0 0 2 ## 5 1 0 0 ## 6 2 2 0 ## RFL_Contig658_1166 RFL_Contig840_961 RFL_Contig854_2201 TA001028.0737 ## 1 0 2 0 0 ## 2 0 0 2 2 ## 3 0 2 0 2 ## 4 0 0 0 2 ## 5 0 0 0 2 ## 6 0 2 0 2 ## TA001229.0435 TA001459.1122 TA001559.0515 TA001874.1495 TA002095.0637 ## 1 2 1 0 0 0 ## 2 2 0 0 0 2 ## 3 0 2 2 0 2 ## 4 2 2 0 0 2 ## 5 2 1 0 2 0 ## 6 0 2 2 2 2 ## TA002420.0575 TA002541.0818 TA002565.0478 TA002853.0110.w TA002919.0864 ## 1 0 2 0 0 2 ## 2 1 2 0 2 2 ## 3 2 1 2 0 2 ## 4 0 0 2 0 2 ## 5 0 2 0 0 2 ## 6 2 0 0 0 2 ## TA003135.0494 TA003570.0548 TA003589.0518 TA003745.0632 TA003804.0980 ## 1 2 2 0 2 0 ## 2 2 2 2 2 2 ## 3 2 1 2 2 2 ## 4 2 2 2 2 2 ## 5 0 1 2 2 2 ## 6 2 0 0 2 1 ## TA004132.0670 TA004602.1630 TA004904.1360 TA005098.0959 TA005107.0866 ## 1 0 2 0 2 2 ## 2 0 2 0 2 1 ## 3 0 2 0 0 0 ## 4 0 2 0 2 0 ## 5 0 2 0 0 0 ## 6 0 2 2 2 0 ## TA005292.0114 TA005643.0627 TA005893.0466 TA006103.0916 TA006157.0542 ## 1 0 0 0 0 0 ## 2 0 0 0 0 0 ## 3 0 0 0 0 0 ## 4 0 0 2 0 0 ## 5 2 2 0 0 0 ## 6 2 0 0 0 0 ## TA006231.0789 TA006289.1238 TA006396.1406 TA012395.0819 TA012840.0369 ## 1 2 0 2 2 2 ## 2 0 0 2 2 0 ## 3 2 0 2 2 0 ## 4 0 0 2 1 2 ## 5 0 0 2 2 0 ## 6 2 0 2 0 2 ## TA014828.0481 TA015506.0388 Tdurum_contig10108_246 ## 1 2 0 2 ## 2 2 2 2 ## 3 2 2 2 ## 4 2 0 0 ## 5 0 2 2 ## 6 0 2 2 ## Tdurum_contig10307_375 Tdurum_contig10608_1081 Tdurum_contig10911_117 ## 1 2 0 2 ## 2 2 0 2 ## 3 0 2 2 ## 4 2 0 2 ## 5 2 2 2 ## 6 0 2 2 ## Tdurum_contig11803_306 Tdurum_contig11896_550 Tdurum_contig11905_1690 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 1 2 ## 4 1 0 2 ## 5 2 0 0 ## 6 2 0 2 ## Tdurum_contig12204_384 Tdurum_contig12551_233 Tdurum_contig13810_485 ## 1 2 2 2 ## 2 2 0 0 ## 3 2 0 0 ## 4 0 2 2 ## 5 2 0 2 ## 6 0 2 2 ## Tdurum_contig13837_573 Tdurum_contig14460_561 Tdurum_contig15734_221 ## 1 0 0 0 ## 2 0 2 0 ## 3 0 0 0 ## 4 0 2 0 ## 5 2 0 0 ## 6 2 2 0 ## Tdurum_contig16445_218 Tdurum_contig16632_288 Tdurum_contig17697_771 ## 1 0 2 0 ## 2 0 0 0 ## 3 2 2 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 2 2 0 ## Tdurum_contig22897_107 Tdurum_contig25539_248 Tdurum_contig25642_92 ## 1 2 0 2 ## 2 0 2 0 ## 3 2 0 2 ## 4 2 0 0 ## 5 2 0 0 ## 6 2 0 2 ## Tdurum_contig27982_568 Tdurum_contig28598_245 Tdurum_contig28703_293 ## 1 0 0 0 ## 2 0 2 0 ## 3 1 2 0 ## 4 0 2 0 ## 5 0 2 0 ## 6 0 2 0 ## Tdurum_contig29013_239 Tdurum_contig29823_203 Tdurum_contig29989_132 ## 1 0 2 0 ## 2 0 2 2 ## 3 2 0 0 ## 4 2 2 0 ## 5 2 0 0 ## 6 2 2 0 ## Tdurum_contig30163_105 Tdurum_contig30909_76 Tdurum_contig31130_148 ## 1 2 2 1 ## 2 0 2 2 ## 3 0 2 2 ## 4 0 2 2 ## 5 2 2 1 ## 6 2 0 0 ## Tdurum_contig31139_143 Tdurum_contig34920_104 Tdurum_contig36183_129 ## 1 2 0 0 ## 2 0 0 0 ## 3 2 2 0 ## 4 2 0 0 ## 5 2 0 0 ## 6 2 2 0 ## Tdurum_contig42083_1539 Tdurum_contig42309_627 Tdurum_contig42495_389 ## 1 0 0 0 ## 2 0 0 2 ## 3 0 0 0 ## 4 0 0 0 ## 5 0 0 2 ## 6 0 2 2 ## Tdurum_contig42520_585 Tdurum_contig42522_573 Tdurum_contig42584_1190 ## 1 0 2 2 ## 2 0 0 2 ## 3 2 2 2 ## 4 0 0 2 ## 5 2 0 2 ## 6 0 2 2 ## Tdurum_contig42858_1256 Tdurum_contig43350_837 Tdurum_contig44048_276 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 2 0 0 ## 5 0 2 0 ## 6 0 2 2 ## Tdurum_contig44853_1083 Tdurum_contig44861_237 Tdurum_contig46030_580 ## 1 0 0 2 ## 2 0 2 2 ## 3 2 2 2 ## 4 0 2 0 ## 5 2 2 2 ## 6 0 2 2 ## Tdurum_contig46611_1061 Tdurum_contig47071_1322 Tdurum_contig47622_234 ## 1 2 0 2 ## 2 0 0 0 ## 3 2 1 2 ## 4 0 2 2 ## 5 0 2 2 ## 6 0 0 2 ## Tdurum_contig49145_914 Tdurum_contig49477_548 Tdurum_contig49608_1185 ## 1 2 2 0 ## 2 0 0 0 ## 3 2 2 0 ## 4 2 1 0 ## 5 0 0 0 ## 6 2 2 0 ## Tdurum_contig49753_191 Tdurum_contig49928_424 Tdurum_contig5009_349 ## 1 0 0 0 ## 2 0 0 2 ## 3 0 0 0 ## 4 0 2 0 ## 5 0 0 0 ## 6 2 2 0 ## Tdurum_contig50667_306 Tdurum_contig51145_476 Tdurum_contig5427_314 ## 1 1 2 0 ## 2 2 2 0 ## 3 2 0 0 ## 4 2 0 0 ## 5 2 2 0 ## 6 2 0 0 ## Tdurum_contig54832_139 Tdurum_contig55961_384 Tdurum_contig56175_791 ## 1 2 0 0 ## 2 0 0 0 ## 3 2 0 0 ## 4 2 0 0 ## 5 2 0 0 ## 6 0 0 0 ## Tdurum_contig57101_1349 Tdurum_contig57324_104 Tdurum_contig57914_745 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 2 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 0 0 ## Tdurum_contig57927_171 Tdurum_contig59566_1534 Tdurum_contig61492_684 ## 1 2 2 1 ## 2 2 2 0 ## 3 1 2 2 ## 4 2 1 2 ## 5 2 2 0 ## 6 0 2 0 ## Tdurum_contig61864_1352 Tdurum_contig61938_424 Tdurum_contig63071_132 ## 1 2 0 2 ## 2 2 0 0 ## 3 2 0 2 ## 4 2 0 0 ## 5 2 2 0 ## 6 0 2 2 ## Tdurum_contig64286_182 Tdurum_contig64563_491 Tdurum_contig64772_417 ## 1 2 0 0 ## 2 0 0 2 ## 3 2 0 0 ## 4 0 0 0 ## 5 0 0 0 ## 6 0 0 0 ## Tdurum_contig66015_346 Tdurum_contig67399_676 Tdurum_contig67686_1204 ## 1 0 0 0 ## 2 0 0 2 ## 3 0 0 1 ## 4 0 0 1 ## 5 0 0 1 ## 6 0 0 1 ## Tdurum_contig67686_874 Tdurum_contig67690_183 Tdurum_contig70820_833 ## 1 0 0 0 ## 2 2 0 0 ## 3 1 2 0 ## 4 1 2 0 ## 5 1 2 0 ## 6 1 2 0 ## Tdurum_contig71521_191 Tdurum_contig76105_124 Tdurum_contig77759_52 ## 1 2 0 2 ## 2 2 0 2 ## 3 0 0 2 ## 4 0 0 2 ## 5 0 0 2 ## 6 2 0 2 ## Tdurum_contig78972_316 Tdurum_contig8158_269 Tdurum_contig81587_90 ## 1 2 2 2 ## 2 0 0 0 ## 3 2 2 2 ## 4 2 2 2 ## 5 2 0 2 ## 6 2 2 2 ## Tdurum_contig82438_136 Tdurum_contig82504_154 Tdurum_contig83113_134 ## 1 0 2 2 ## 2 0 2 2 ## 3 0 2 0 ## 4 0 2 0 ## 5 0 0 2 ## 6 0 0 2 ## Tdurum_contig83564_600 Tdurum_contig8402_460 Tdurum_contig93270_1008 ## 1 2 2 0 ## 2 2 2 0 ## 3 2 2 0 ## 4 2 2 0 ## 5 2 2 2 ## 6 0 2 0 ## Tdurum_contig94629_258 Tdurum_contig9514_807 Tdurum_contig9584_463 ## 1 0 2 0 ## 2 0 2 0 ## 3 2 2 0 ## 4 2 2 0 ## 5 2 2 0 ## 6 2 2 0 ## Tdurum_contig97240_912 Tdurum_contig97656_120 Tdurum_contig97942_163 ## 1 0 0 0 ## 2 0 0 1 ## 3 0 0 0 ## 4 0 0 0 ## 5 2 0 0 ## 6 0 2 0 ## tplb0021a17_853 tplb0022c16_494 tplb0023j07_1091 tplb0024a09_2106 ## 1 0 2 0 0 ## 2 0 2 0 0 ## 3 2 2 1 0 ## 4 2 2 0 0 ## 5 0 1 0 0 ## 6 0 0 0 0 ## tplb0024k14_1812 tplb0028p23_691 tplb0041e10_1230 tplb0042o21_419 ## 1 2 0 0 0 ## 2 2 0 0 0 ## 3 2 2 0 0 ## 4 2 2 0 0 ## 5 0 2 2 2 ## 6 2 2 2 0 ## tplb0045p11_893 tplb0046g22_1351 tplb0050b23_546 tplb0057d20_531 ## 1 0 2 0 2 ## 2 2 2 0 0 ## 3 1 2 0 0 ## 4 0 2 0 2 ## 5 0 2 0 0 ## 6 0 2 0 2 ## tplb0059i08_441 tplb0060b03_432 tplb0062k24_584 wsnp_BE405275A_Ta_1_1 ## 1 0 0 0 2 ## 2 0 0 2 0 ## 3 0 0 0 2 ## 4 0 0 0 2 ## 5 0 0 2 2 ## 6 0 2 0 2 ## wsnp_BE424100D_Ta_1_1 wsnp_BE426418A_Ta_2_1 wsnp_BE444644A_Ta_2_1 ## 1 2 2 2 ## 2 0 0 0 ## 3 2 2 2 ## 4 2 2 2 ## 5 0 2 2 ## 6 0 2 2 ## wsnp_BE445506A_Ta_2_2 wsnp_BE490384A_Ta_2_7 wsnp_BE490604A_Ta_2_1 ## 1 2 0 2 ## 2 2 2 2 ## 3 2 0 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 2 0 2 ## wsnp_BE497845D_Ta_1_1 wsnp_BE604885A_Ta_2_1 wsnp_BE638137B_Ta_2_2 ## 1 1 0 0 ## 2 2 0 0 ## 3 2 2 0 ## 4 0 2 0 ## 5 0 0 0 ## 6 0 2 0 ## wsnp_BF292295A_Ta_2_1 wsnp_BF473052D_Ta_2_1 wsnp_BF473056D_Ta_2_1 ## 1 2 0 0 ## 2 2 0 0 ## 3 2 0 0 ## 4 2 2 1 ## 5 0 2 2 ## 6 0 0 0 ## wsnp_BF483091A_Ta_2_5 wsnp_BF485168B_Ta_2_1 wsnp_BG263358A_Ta_2_3 ## 1 0 2 2 ## 2 0 2 0 ## 3 2 2 1 ## 4 0 2 2 ## 5 2 2 2 ## 6 0 2 2 ## wsnp_BM134363A_Ta_2_4 wsnp_BQ161779D_Ta_2_1 wsnp_BQ171683B_Ta_2_1 ## 1 0 2 0 ## 2 2 0 0 ## 3 0 2 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 0 1 0 ## wsnp_CAP11_c2142_1128735 wsnp_CAP11_c2307_1200406 ## 1 0 0 ## 2 0 0 ## 3 2 0 ## 4 0 2 ## 5 2 2 ## 6 0 0 ## wsnp_CAP11_c2596_1325540 wsnp_CAP11_c3968_1874257 ## 1 2 1 ## 2 0 2 ## 3 2 2 ## 4 2 2 ## 5 2 -1 ## 6 0 2 ## wsnp_CAP11_c6264_2895652 wsnp_CAP11_c639_424134 ## 1 0 0 ## 2 0 0 ## 3 0 0 ## 4 0 0 ## 5 0 0 ## 6 0 0 ## wsnp_CAP11_rep_c8668_3741698 wsnp_CAP12_c1388_706924 ## 1 0 2 ## 2 0 2 ## 3 0 2 ## 4 0 0 ## 5 2 2 ## 6 0 2 ## wsnp_CAP12_c3056_1439567 wsnp_CAP12_c3166_1482592 wsnp_CAP12_c55_32598 ## 1 0 2 0 ## 2 2 2 0 ## 3 2 2 0 ## 4 0 2 0 ## 5 0 2 0 ## 6 2 0 0 ## wsnp_CAP8_rep_c3938_1936666 wsnp_Ex_c10084_16572374 ## 1 2 0 ## 2 2 0 ## 3 2 0 ## 4 2 2 ## 5 2 0 ## 6 2 0 ## wsnp_Ex_c1011_1931797 wsnp_Ex_c10657_17376448 wsnp_Ex_c10959_17801482 ## 1 2 0 0 ## 2 2 0 0 ## 3 0 2 0 ## 4 2 2 0 ## 5 0 0 0 ## 6 2 0 2 ## wsnp_Ex_c1143_2195442 wsnp_Ex_c11658_18773086 wsnp_Ex_c11684_18805687 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 0 0 2 ## 5 2 2 0 ## 6 2 0 0 ## wsnp_Ex_c11874_19050989 wsnp_Ex_c11877_19055556 wsnp_Ex_c11992_19213872 ## 1 2 2 0 ## 2 2 2 0 ## 3 0 1 2 ## 4 0 0 0 ## 5 0 0 2 ## 6 2 0 2 ## wsnp_Ex_c12341_19693090 wsnp_Ex_c1247_2397552 wsnp_Ex_c13217_20858600 ## 1 2 0 2 ## 2 2 2 0 ## 3 2 2 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 2 2 2 ## wsnp_Ex_c13859_21713144 wsnp_Ex_c13949_21828493 wsnp_Ex_c14031_21934322 ## 1 2 0 0 ## 2 2 0 0 ## 3 2 2 0 ## 4 2 2 0 ## 5 2 2 0 ## 6 2 2 0 ## wsnp_Ex_c1427_2736441 wsnp_Ex_c14273_22230844 wsnp_Ex_c14478_22481430 ## 1 2 2 0 ## 2 2 2 0 ## 3 2 2 2 ## 4 2 2 1 ## 5 2 2 0 ## 6 2 2 2 ## wsnp_Ex_c14622_22670594 wsnp_Ex_c14711_22789762 wsnp_Ex_c15341_23592075 ## 1 2 0 0 ## 2 2 0 2 ## 3 2 0 0 ## 4 1 2 2 ## 5 0 0 2 ## 6 2 0 0 ## wsnp_Ex_c15378_23638822 wsnp_Ex_c1630_3105100 wsnp_Ex_c16423_24920805 ## 1 2 2 0 ## 2 2 2 0 ## 3 2 2 2 ## 4 2 2 0 ## 5 2 2 2 ## 6 2 0 0 ## wsnp_Ex_c16569_25082760 wsnp_Ex_c16715_25264080 wsnp_Ex_c17914_26681837 ## 1 0 0 2 ## 2 2 2 0 ## 3 0 0 2 ## 4 0 2 2 ## 5 2 2 2 ## 6 0 2 2 ## wsnp_Ex_c18250_27065775 wsnp_Ex_c1944_3663988 wsnp_Ex_c1962_3696265 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 0 1 0 ## 5 0 0 2 ## 6 0 2 0 ## wsnp_Ex_c1996_3754394 wsnp_Ex_c22547_31738007 wsnp_Ex_c22766_31972812 ## 1 0 2 2 ## 2 0 0 0 ## 3 2 0 0 ## 4 2 0 0 ## 5 0 0 0 ## 6 0 2 0 ## wsnp_Ex_c23102_32328851 wsnp_Ex_c2337_4379619 wsnp_Ex_c2360_4422599 ## 1 0 0 0 ## 2 2 0 0 ## 3 0 0 0 ## 4 2 0 2 ## 5 2 2 0 ## 6 0 2 0 ## wsnp_Ex_c23618_32855041 wsnp_Ex_c2365_4431185 wsnp_Ex_c24376_33618864 ## 1 2 0 2 ## 2 2 2 0 ## 3 2 2 0 ## 4 2 0 0 ## 5 2 0 2 ## 6 2 2 0 ## wsnp_Ex_c24474_33721784 wsnp_Ex_c2459_4591695 wsnp_Ex_c25043_34305764 ## 1 0 0 2 ## 2 0 0 2 ## 3 1 0 2 ## 4 2 0 0 ## 5 0 0 2 ## 6 0 2 2 ## wsnp_Ex_c25730_34991010 wsnp_Ex_c26252_35497729 wsnp_Ex_c26887_36107413 ## 1 0 2 0 ## 2 0 2 0 ## 3 2 0 2 ## 4 2 0 2 ## 5 2 2 2 ## 6 2 2 2 ## wsnp_Ex_c28429_37553452 wsnp_Ex_c3019_5578884 wsnp_Ex_c31149_39976103 ## 1 0 0 0 ## 2 2 0 0 ## 3 2 1 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 0 2 2 ## wsnp_Ex_c33675_42124657 wsnp_Ex_c33765_42199371 wsnp_Ex_c33932_42333941 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 0 ## 4 0 2 0 ## 5 0 0 2 ## 6 2 0 0 ## wsnp_Ex_c34303_42642389 wsnp_Ex_c356_698872 wsnp_Ex_c37943_45584325 ## 1 0 2 0 ## 2 0 2 0 ## 3 0 2 2 ## 4 2 2 2 ## 5 0 2 2 ## 6 0 0 2 ## wsnp_Ex_c3858_7011837 wsnp_Ex_c3930_7127883 wsnp_Ex_c39592_46849607 ## 1 -1 0 2 ## 2 1 2 2 ## 3 0 2 2 ## 4 2 2 2 ## 5 2 2 2 ## 6 2 2 2 ## wsnp_Ex_c39616_46871127 wsnp_Ex_c4026_7281501 wsnp_Ex_c42815_49298013 ## 1 2 0 0 ## 2 0 0 0 ## 3 1 2 0 ## 4 2 2 0 ## 5 0 2 0 ## 6 2 2 0 ## wsnp_Ex_c43518_49814933 wsnp_Ex_c4605_8239915 wsnp_Ex_c4789_8550135 ## 1 0 1 2 ## 2 0 2 2 ## 3 0 2 2 ## 4 0 2 2 ## 5 2 0 2 ## 6 0 0 2 ## wsnp_Ex_c5268_9320618 wsnp_Ex_c539_1072859 wsnp_Ex_c5412_9564478 ## 1 0 0 2 ## 2 1 0 2 ## 3 2 1 0 ## 4 2 0 1 ## 5 2 0 0 ## 6 0 0 0 ## wsnp_Ex_c558_1105911 wsnp_Ex_c56091_58346859 wsnp_Ex_c56443_58561683 ## 1 2 2 2 ## 2 2 2 2 ## 3 2 2 0 ## 4 2 2 0 ## 5 0 0 0 ## 6 2 0 1 ## wsnp_Ex_c5653_9937062 wsnp_Ex_c60462_60905848 wsnp_Ex_c6400_11123059 ## 1 0 2 0 ## 2 1 2 0 ## 3 0 0 2 ## 4 2 0 1 ## 5 0 0 2 ## 6 2 0 0 ## wsnp_Ex_c6548_11355524 wsnp_Ex_c7071_12171222 wsnp_Ex_c7252_12453079 ## 1 2 0 2 ## 2 2 0 2 ## 3 2 1 0 ## 4 2 2 0 ## 5 2 0 2 ## 6 2 0 2 ## wsnp_Ex_c7629_13033231 wsnp_Ex_c7934_13467460 wsnp_Ex_c8386_14127329 ## 1 0 2 2 ## 2 2 2 2 ## 3 0 0 0 ## 4 2 2 0 ## 5 2 2 2 ## 6 0 2 2 ## wsnp_Ex_c9948_16379630 wsnp_Ex_c9948_16379867 wsnp_Ex_c9971_16412615 ## 1 2 2 2 ## 2 2 2 2 ## 3 2 2 0 ## 4 2 2 0 ## 5 2 2 0 ## 6 2 2 0 ## wsnp_Ex_rep_c107564_91144523 wsnp_Ex_rep_c66389_64589189 ## 1 0 0 ## 2 2 2 ## 3 2 1 ## 4 2 0 ## 5 2 2 ## 6 2 2 ## wsnp_Ex_rep_c66522_64795143 wsnp_Ex_rep_c67848_66550913 ## 1 2 2 ## 2 2 2 ## 3 2 2 ## 4 2 2 ## 5 0 2 ## 6 0 2 ## wsnp_Ex_rep_c68491_67318138 wsnp_Ex_rep_c68555_67394261 ## 1 2 2 ## 2 2 2 ## 3 2 2 ## 4 2 2 ## 5 2 2 ## 6 2 2 ## wsnp_Ex_rep_c68600_67448893 wsnp_JD_c1119_1642176 ## 1 0 2 ## 2 0 0 ## 3 1 2 ## 4 2 2 ## 5 2 2 ## 6 0 2 ## wsnp_JD_c13946_13810300 wsnp_JD_c1635_2290177 wsnp_JD_c3732_4781170 ## 1 0 2 0 ## 2 2 2 0 ## 3 0 2 0 ## 4 2 2 0 ## 5 2 2 0 ## 6 0 0 2 ## wsnp_JD_c38619_27992279 wsnp_JD_c41732_29490776 wsnp_JD_c5659_6814240 ## 1 2 2 2 ## 2 2 2 2 ## 3 0 0 1 ## 4 0 0 2 ## 5 0 0 1 ## 6 0 0 2 ## wsnp_JD_c7795_8868122 wsnp_JD_c9360_10216330 wsnp_JD_rep_c48914_33168544 ## 1 0 0 2 ## 2 0 0 0 ## 3 2 1 0 ## 4 0 1 1 ## 5 2 0 0 ## 6 0 0 0 ## wsnp_JD_rep_c51623_35119179 wsnp_JD_rep_c63083_40243538 ## 1 0 0 ## 2 0 0 ## 3 0 0 ## 4 0 0 ## 5 0 2 ## 6 0 2 ## wsnp_JG_c2509_1153697 wsnp_Ku_c12503_20174234 wsnp_Ku_c13043_20902807 ## 1 0 0 2 ## 2 0 0 0 ## 3 1 0 1 ## 4 1 2 2 ## 5 2 2 0 ## 6 0 0 2 ## wsnp_Ku_c14496_22838796 wsnp_Ku_c16022_24798741 wsnp_Ku_c16354_25219645 ## 1 0 0 0 ## 2 0 0 2 ## 3 2 2 0 ## 4 2 2 0 ## 5 2 2 2 ## 6 2 2 0 ## wsnp_Ku_c19622_29138795 wsnp_Ku_c26323_36285697 wsnp_Ku_c27273_37219950 ## 1 2 1 0 ## 2 2 0 0 ## 3 2 2 0 ## 4 2 1 0 ## 5 2 2 0 ## 6 2 2 0 ## wsnp_Ku_c30545_40369365 wsnp_Ku_c30992_40773238 wsnp_Ku_c3201_5970486 ## 1 0 0 0 ## 2 0 2 0 ## 3 1 0 0 ## 4 1 0 0 ## 5 2 0 0 ## 6 0 0 2 ## wsnp_Ku_c34036_43438136 wsnp_Ku_c3663_6748611 wsnp_Ku_c3684_6789632 ## 1 2 1 2 ## 2 2 1 2 ## 3 0 2 0 ## 4 2 0 2 ## 5 0 0 0 ## 6 2 0 0 ## wsnp_Ku_c40218_48484410 wsnp_Ku_c42539_50247333 wsnp_Ku_c44716_51926415 ## 1 0 0 0 ## 2 0 2 0 ## 3 1 2 1 ## 4 0 2 2 ## 5 2 2 2 ## 6 0 2 2 ## wsnp_Ku_c5693_10079278 wsnp_Ku_c5938_10491311 ## 1 2 2 ## 2 0 2 ## 3 2 2 ## 4 2 0 ## 5 2 0 ## 6 2 2 ## wsnp_Ku_rep_c69924_69422461 wsnp_Ra_c1146_2307483 ## 1 0 2 ## 2 0 0 ## 3 0 0 ## 4 0 0 ## 5 0 0 ## 6 0 2 ## wsnp_Ra_c11532_18688426 wsnp_Ra_c14920_23225219 wsnp_Ra_c16264_24873670 ## 1 0 0 2 ## 2 2 2 2 ## 3 0 0 2 ## 4 2 0 2 ## 5 2 0 0 ## 6 0 2 0 ## wsnp_Ra_c17636_26538543 wsnp_Ra_c26091_35652620 wsnp_Ra_c29350_38734189 ## 1 2 0 0 ## 2 2 0 2 ## 3 2 0 0 ## 4 2 0 0 ## 5 2 0 2 ## 6 0 2 2 ## wsnp_Ra_c42862_49716715 wsnp_Ra_c8506_14401408 ## 1 0 2 ## 2 0 0 ## 3 0 0 ## 4 0 0 ## 5 0 1 ## 6 0 0 ## wsnp_Ra_rep_c69221_66574148 wsnp_RFL_Contig2606_2264492 ## 1 0 0 ## 2 2 0 ## 3 0 0 ## 4 0 0 ## 5 0 0 ## 6 0 2 ## wsnp_RFL_Contig4594_5459508 ## 1 0 ## 2 0 ## 3 0 ## 4 0 ## 5 0 ## 6 0 ++++Afterwards, we substitute short labels to the marker names, which are quite long and make plotting problematic. In addition we identify which variables in the data are traits, which are markers, which contain variety IDs and pedigree information. names(magic)[12:14] ## [1] &quot;BobWhite_c10082_241&quot; &quot;BobWhite_c10126_263&quot; &quot;BobWhite_c10140_297&quot; names(magic)[12:ncol(magic)] = paste(&quot;G&quot;, 12:ncol(magic) - 11, sep = &quot;&quot;) names(magic)[12:14] ## [1] &quot;G1&quot; &quot;G2&quot; &quot;G3&quot; Finally, we extract observations with incomplete data (in the traits and variety information, missing values in the markers have all been imputed). partial = magic[!complete.cases(magic), ] margic = magic[complete.cases(magic),] 9.1.1.2 Performing cross-validation The Bayesian networks model is fitted by the fit.the.model() function below, which takes the data and the type I error threshold alpha to use for structure learning as arguments. fit.the.model = function(data, alpha) { cpc = vector(length(traits), mode = &quot;list&quot;) names(cpc) = traits # find the parents of each trait (may be genes or other traits). for (t in seq_along(traits)) { # BLUP away the family structure. m = lmer(as.formula(paste(traits[t], &quot;~ (1|FUNNEL:PLANT)&quot;)), data = data) data[!is.na(data[, traits[t]]), traits[t]] = data[, traits[t]] - ranef(m)[[1]][paste(data$FUNNEL, data$PLANT, sep = &quot;:&quot;), 1] # find out the parents. cpc[[t]] = learn.nbr(data[, c(traits, genes)], node = traits[t], debug = FALSE, method = &quot;si.hiton.pc&quot;, test = &quot;cor&quot;, alpha = alpha) }#FOR # merge the relevant variables to use for learning. nodes = unique(c(traits, unlist(cpc))) # yield has no children, and genes cannot depend on traits. blacklist = tiers2blacklist(list(nodes[!(nodes %in% traits)], traits[traits != &quot;YLD&quot;], &quot;YLD&quot;)) # build the Bayesian network. bn = hc(data[, nodes], blacklist = blacklist) return(bn) }#FIT.THE.MODEL 9.1.2 Reference Analysis of the MAGIC population in Scutari et al., Genetics (2014): http://www.bnlearn.com/research/genetics14/.The contents of this page are licensed under the Creative Commons Attribution-Share Alike License. "],
["the-rationale-for-using-negative-binomial-distribution-to-model-read-count-in-rna-seq-data.html", "10 The rationale for using negative binomial distribution to model read count in RNA-seq data 10.1 Negative binomial in R 10.2 Reference 10.3 Batch effect 10.4 Reference", " 10 The rationale for using negative binomial distribution to model read count in RNA-seq data Several tools for DEG detection (including DESeq2 and eageR) model read counts as a negative binomial (NB) distribution. The nagative binomial distribtion, especitally in its alternative parameterization, can be used as an alternative to the Poisson distribution. It is espectially useful for discrete data over an unbounded positive range whose sample variance exceeds the sample mean. In such cases, the observations are overdispersed with respect to a Poisson distribution, for which the mean is equal to the variance. Hence a Poison distribution is not an appropriate model. Since the negative binomial distribution has one more parameter than the Poisson distribution, the second parameter can be used to adjust the variance independently of the mean. Discrete data over an unbounded positive range is one way of saying ‘integer counts’. The negative binomial distribution also arises as a continuous mixture of Poisson distributions (i.e. a compound probability distribution) where the mixing distribution of the Poisson rate is a gamma distribution.&quot; The other important bit of information to know is that read counts for a sample in theory follow a Binomial(n,p) distribution, where n is the total number of reads and p is the probability of a read mapping to a specific gene. However, the binomial distribution is computationally inconvenient, since it involves computing factorials, and with millions of reads in each sample, the Poisson distribution (with lambda = n*p) is an excellent approximation to the Binomial while being far more mathematically tractable. So the Poisson noise quantifies the counting uncertainty, while the gamma distribution quantifies the variation in gene expression between replicates. The mixture of the two yields the negative binomial. See also section 2 of http://www.statsci.org/smyth/pubs/edgeRChapterPreprint.pdf If differential expresssion detection is our goal, we need to keep in mind that we model the distribution of counts for a given gene across replicates; we don’t model the dsitrution of an individual samples. So for DE detection, we are not concerned with shape of distribution of counts or the whole organisms at all. Poisson is a single parameter dist’n, with mean=variance. That assumption, which is really an approximation to the binomial, is suitable only for the variability associated with sampling the same DNA population (e.g. if you sequence multiple lanes of the same DNA, and assume no lane-specific effects, etc.). But if there is variation between your replicates (e.g. lab mice, people, etc.), the Poisson assumption will tend to underestimate the variance and any differences you observe (e.g. testing the null hypothesis that two groups have the same mean expression) will be overstated. This explaination is from the co-author of edgeR (https://www.biostars.org/p/6028/). 10.1 Negative binomial in R set.seed(100) # 1) n: number of number of observations. # 2) size: target for number of successful trials, or dispersion parameter (the shape parameter of the gamma mixing distribution). Must be strictly positive, need not be integer. # 3) prob: probability of success in each trial. 0 &lt; prob &lt;= 1. obs_nb &lt;- rnbinom(100000, 5, 0.5) obs_pios &lt;- rpois(10000, mean(obs_nb)) table(obs_nb) ## obs_nb ## 0 1 2 3 4 5 6 7 8 9 10 11 ## 3039 7651 11590 13833 13598 12468 10303 8098 6055 4377 3094 2078 ## 12 13 14 15 16 17 18 19 20 21 22 23 ## 1329 956 583 364 224 150 77 50 37 22 7 7 ## 24 25 27 28 29 ## 5 1 2 1 1 table(obs_pios) ## obs_pios ## 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ## 65 360 833 1434 1696 1706 1433 1096 672 388 170 86 45 9 6 ## 15 ## 1 hist(obs_nb, breaks = 1000) hist(obs_pios, breaks = 1000) var(obs_nb) ## [1] 9.949713 var(obs_pios) ## [1] 5.11018 Here we can clearly see that the variance (measure of variation.) in the simulated data with Poisson distribution () is higher than that with negative binomial distribtuon. n = 10000 dist_nb = rep(NA, n) for(i in 1:n){ obs_nb_tem &lt;- rnbinom(3, 5, 0.5) dist_nb[i] = var(obs_nb_tem)/mean(obs_nb_tem) } hist(dist_nb) n = 10000 dist_pios = rep(NA, n) for(i in 1:n){ obs_pois_tem &lt;- rpois(3, 5) dist_pios[i] = var(obs_pois_tem)/mean(obs_pois_tem) } hist(dist_pios) hist(dist_nb - dist_pios, breaks=100, col = &quot;lightblue&quot;, border = NA) abline(v=0, col=&quot;red&quot;, lty=&quot;dashed&quot;) 10.1.1 Real data read_count = read.table(&quot;data/yeast_EV_DNMT3B_count.tab&quot;, sep=&quot;\\t&quot;, head=T) read_count_sub = read_count[, c(4:6)] head(read_count_sub) ## DNMT3B_2 DNMT3B_3 DNMT3B_4 ## 1 717 948 1039 ## 2 392 386 403 ## 3 0 0 1 ## 4 106 55 33 ## 5 477 418 366 ## 6 285 187 138 mean_var_diff &lt;- apply(read_count_sub, 1, var) - apply(read_count_sub, 1, mean) summary(mean_var_diff) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -6078 1 623 1058496 5794 2026890302 hist(mean_var_diff,breaks=100000,xlim=c(-50000,100000)) 10.2 Reference What’s the rationale for using the negative binomial distribution to model read: https://support.bioconductor.org/p/84832/ Why do we use the negative binomial distribution for analysing RNAseq data?: http://bridgeslab.sph.umich.edu/posts/why-do-we-use-the-negative-binomial-distribution-for-rnaseq R统计学(06): 负二项分布: https://mp.weixin.qq.com/s/QBkL8_cW6Lsm5U56SUmUoQ 10.3 Batch effect Batch effects are sub-groups of measurements that have qualitatively different behaviour across conditions and are unrelated to the biological or scientific variables in a study. For example, batch effects may occur if a subset of experiments was run on Monday and another set on Tuesday, if two technicians were responsible for different subsets of the experiments or if two different lots of reagents, chips or instruments were used. These effects are not exclusive to high-throughput biology and genomics research1, and batch effects also affect low-dimensional molecular measurements, such as northern blots and quantitative PCR. batch effects occur because measurements are affected by laboratory conditions, reagent lots and personnel differences. 1.1 Data simulation We downloaded an RNA-seq dataset from online for Zebrafish. This is a standard count data from RNA-seq experiment. These data are available as part of the zebrafishRNASeq Bioconductor package. (https://bioconductor.org/packages/release/data/experiment/html/zebrafishRNASeq.html) We first filter low expressed genes and only keep genes with more than 5 counts in at least two samples, and then check the dispersion of counts data by plotting the variance against the mean of the zebrafish dataset. Based on the higher dispersion usually existing in count data, we assume a zero inflated negative binomial distribution and estimate the parameters from the zebrafish data. We then use the R package of “ polyester” [24] to simulate 2 RNA-seq datasets by using the same dispersion parameters (mean and variance) from the zebrafish dataset, thus to mimic the real situation in a common RNA-seq experiment. For the data simulation step, we simulate 10, 000 genes on 20 samples. These 20 samples are simulated on 2 batches, with 5 cases and 5 controls on each batch. So there will be 2 kinds of factors on each of the 10, 000 genes: group factor (case/control status) and batch factor (batch 1/2). The DEGs detected could be caused by either of these 2 factors. For dataset 1, we simulate the group factor (case/control) on 0 gene (i.e., 0 gene will be detected as differentially expressed due to case/control status), and batch factor on 10, 000 genes (i.e., if any of these 10, 000 genes are detected as differentially expressed, that will only be caused by batch factor, not by sample phenotype of case/control status). In this case, the DEGs will be false positive signals because of the existence of batch effect and absence of case/control difference. In second case, we generate a dataset 2 with random batch effects on case and control samples (i.e., the phenotype factors are not balanced between case and control samples in each batch and batch factor have different impact on case samples and control samples). For the genes, the group factors (case and control) are simulated on 3000 genes and batch factors are simulated on 5000 genes using R package of “ polyester” respectively. Finally, among all the 10, 000 genes, 1000 genes are with group factor only, 2000 genes are with both group and batch factors, 3000 genes are with batch factor only, and the rest 4000 genes have either group factor or batch factor. The 3000 genes with batch factor only are defined as control genes, so that we can test the impact of batch effects and the performance of each method in removing batch effects). 10.4 Reference Simulation of batch effect data: https://www.biorxiv.org/content/biorxiv/suppl/2017/12/15/234344.DC1/234344-1.pdf Evaluation of Methods in Removing Batch Effects on RNA-seq Data: http://www.tran-med.com/article/2016/2411-2917-2-1-3.html#outline_anchor_4 "],
["multiple-test-corretion.html", "11 Multiple test corretion", " 11 Multiple test corretion "],
["working-with-missing-values.html", "12 Working with missing values 12.1 12.2 Summaryize the missing values 12.3 Delete columns/rows with more that x% missing 12.4 Imputing the data 12.5 Reference", " 12 Working with missing values 12.1 ## Some sample data set.seed(0) dat &lt;- matrix(1:100, 10, 10) dat[sample(1:100, 10)] &lt;- NA dat &lt;- data.frame(dat) 12.2 Summaryize the missing values 12.2.1 Summarize the missing values using mice package The mice package provides a nice function md.pattern() to get a better understanding of the pattern of missing data. #install.packages(&quot;mice&quot;) library(mice) ## ## Attaching package: &#39;mice&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## cbind, rbind md.pattern(dat) ## X1 X5 X8 X2 X3 X4 X7 X10 X6 X9 ## 4 1 1 1 1 1 1 1 1 1 1 0 ## 1 1 1 1 1 1 1 1 1 1 0 1 ## 1 1 1 1 1 1 1 1 1 0 0 2 ## 1 1 1 1 1 1 1 1 0 0 1 2 ## 1 1 1 1 1 1 1 0 1 1 1 1 ## 1 1 1 1 1 0 0 1 1 1 1 2 ## 1 1 1 1 0 1 1 1 1 1 0 2 ## 0 0 0 1 1 1 1 1 2 3 10 12.2.2 Summarize the missing values using VIM packages #install.packages(&quot;VIM&quot;) library(VIM) ## Loading required package: colorspace ## Loading required package: grid ## Loading required package: data.table ## ## Attaching package: &#39;data.table&#39; ## The following objects are masked from &#39;package:xts&#39;: ## ## first, last ## The following objects are masked from &#39;package:reshape2&#39;: ## ## dcast, melt ## VIM is ready to use. ## Since version 4.0.0 the GUI is in its own package VIMGUI. ## ## Please use the package to use the new (and old) GUI. ## Suggestions and bug-reports can be submitted at: https://github.com/alexkowa/VIM/issues ## ## Attaching package: &#39;VIM&#39; ## The following object is masked from &#39;package:datasets&#39;: ## ## sleep aggr(dat, numbers = TRUE, prop = c(TRUE, FALSE)) aggr(t(dat), numbers = TRUE, prop = c(TRUE, FALSE)) aggr_plot &lt;- aggr(dat, col=c(&#39;navyblue&#39;,&#39;red&#39;), numbers=TRUE, sortVars=TRUE, labels=names(dat), cex.axis=.7, gap=3, ylab=c(&quot;Histogram of missing data&quot;,&quot;Pattern&quot;)) ## ## Variables sorted by number of missings: ## Variable Count ## X9 0.3 ## X6 0.2 ## X2 0.1 ## X3 0.1 ## X4 0.1 ## X7 0.1 ## X10 0.1 ## X1 0.0 ## X5 0.0 ## X8 0.0 tdat = t(dat) aggr_plot &lt;- aggr(tdat, col=c(&#39;navyblue&#39;,&#39;red&#39;), numbers=TRUE, sortVars=TRUE, labels=names(tdat), cex.axis=.7, gap=3, ylab=c(&quot;Histogram of missing data&quot;,&quot;Pattern&quot;)) ## ## Variables sorted by number of missings: ## Variable Count ## V6 0.2 ## V7 0.2 ## V8 0.2 ## V10 0.2 ## V1 0.1 ## V5 0.1 ## V2 0.0 ## V3 0.0 ## V4 0.0 ## V9 0.0 12.3 Delete columns/rows with more that x% missing ## Remove columns with more than 50% NA dat_file = dat[, -which(colMeans(is.na(dat)) &gt; 0.5)] 12.4 Imputing the data 12.4.1 Imputing the data with row-wise mean dat.imp = dat k &lt;- which(is.na(dat.imp), arr.ind=TRUE) dat.imp[k] &lt;- rowMeans(dat.imp, na.rm=TRUE)[k[,1]] 12.4.2 Imputing the data with row-wise mean using mice tempDat &lt;- mice(as.matrix(dat), method = &quot;mean&quot;) ## ## iter imp variable ## 1 1 ## 1 2 ## 1 3 ## 1 4 ## 1 5 ## 2 1 ## 2 2 ## 2 3 ## 2 4 ## 2 5 ## 3 1 ## 3 2 ## 3 3 ## 3 4 ## 3 5 ## 4 1 ## 4 2 ## 4 3 ## 4 4 ## 4 5 ## 5 1 ## 5 2 ## 5 3 ## 5 4 ## 5 5 ## Warning: Number of logged events: 9 summary(tempDat) ## Class: mids ## Number of multiple imputations: 5 ## Imputation methods: ## X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ## &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## PredictorMatrix: ## X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ## X1 0 0 0 0 0 0 0 0 0 0 ## X2 0 0 0 0 0 0 0 0 0 0 ## X3 0 0 0 0 0 0 0 0 0 0 ## X4 0 0 0 0 0 0 0 0 0 0 ## X5 1 0 0 0 0 0 0 0 0 0 ## X6 0 0 0 0 0 0 0 0 0 0 ## Number of logged events: 9 ## it im dep meth out ## 1 0 0 collinear X5 ## 2 0 0 collinear X8 ## 3 0 0 collinear X2 ## 4 0 0 collinear X3 ## 5 0 0 collinear X4 ## 6 0 0 collinear X7 impDat&lt;- complete(tempDat) impDat ## X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ## 1 1 11 21 31 41 51 NA 71 81 91 ## 2 2 12 22 32 42 52 62 72 82 92 ## 3 3 13 23 33 43 53 63 73 83 93 ## 4 4 14 24 34 44 54 64 74 84 94 ## 5 5 15 25 35 45 55 65 75 NA 95 ## 6 6 16 26 36 46 NA 66 76 86 NA ## 7 7 17 NA NA 47 57 67 77 87 97 ## 8 8 18 28 38 48 NA 68 78 NA 98 ## 9 9 19 29 39 49 59 69 79 89 99 ## 10 10 NA 30 40 50 60 70 80 NA 100 12.5 Reference Imputing Missing Data with R; MICE package: https://datascienceplus.com/imputing-missing-data-with-r-mice-package/ Delete columns/rows with more that x% missing : https://stackoverflow.com/questions/31848156/delete-columns-rows-with-more-that-x-missing Tutorial on 5 Powerful R Packages used for imputing missing values https://www.analyticsvidhya.com/blog/2016/03/tutorial-powerful-packages-imputing-missing-values/ "],
["data-wrangling.html", "13 Data wrangling 13.1 13.2 Joining Data in R with dplyr 13.3 Reference", " 13 Data wrangling 13.1 df[df == 0] &lt;- NA data&lt;-replace(data.frame(lapply(data, as.character), stringsAsFactors = FALSE), !is.na(data), “1”) 13.2 Joining Data in R with dplyr 13.2.1 Whats Covered Mutating joins Filtering joins and set operations Assembling data Advanced joining Case Study Keys The Primary key needs to be unique in a table The foreign key in the second table can be duplicated second table will be matched to the primary table based on the primary key The primary key may be one, two or even more columns in the table #install.packages(&quot;dplyr&quot;) library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:data.table&#39;: ## ## between, first, last ## The following objects are masked from &#39;package:Hmisc&#39;: ## ## src, summarize ## The following object is masked from &#39;package:MASS&#39;: ## ## select ## The following objects are masked from &#39;package:xts&#39;: ## ## first, last ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union 13.3 Reference https://rpubs.com/williamsurles/293454 dplyr tutorial https://genomicsclass.github.io/book/pages/dplyr_tutorial.html "],
["pca.html", "14 PCA 14.1 Read data 14.2 Head data 14.3 Summary of the data 14.4 Check the distribution of the data 14.5 Eigendecomposition - Computing Eigenvectors and Eigenvalues 14.6 PCA with two variables 14.7 PCA on wine data 14.8 References", " 14 PCA PCA reduces the dimensionality of a multivariate data to two or three principal components, that can be visualized graphically, with minimal loss of information. PCA is veru useful whne the varianle with the data set are highly correlated. Correlation indicates that there is redundancy in the data. Due to this redundancy, PCA can be used to reduce the original variable into smaller number of new variabeles, nameing principal components. 14.1 Read data iris_tab &lt;- read.csv(&quot;https://gist.githubusercontent.com/curran/a08a1080b88344b0c8a7/raw/d546eaee765268bf2f487608c537c05e22e4b221/iris.csv&quot;) 14.2 Head data head(iris_tab) ## sepal_length sepal_width petal_length petal_width species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa 14.3 Summary of the data summary(iris_tab) ## sepal_length sepal_width petal_length petal_width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.054 Mean :3.759 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## 14.4 Check the distribution of the data hist(iris_tab$sepal_length) 14.5 Eigendecomposition - Computing Eigenvectors and Eigenvalues In linear algebra, an eigenvector is a non-zero vector that changes by only a scalar factor when that linear transformation is applied to it. The eigenvectors and eigenvalues of a covariance (or correlation) matrix represent the “core” of a PCA: The eigenvectors (principal components) determine the directions of the new feature space, and the eigenvalues determine their magnitude. In other words, the eigenvalues explain the variance of the data along the new feature axes. 14.5.1 Covariance Matrix The classic approach to PCA is to perform the eigendecomposition on the covariance matrix \\(\\Sigma\\), which is a \\(d \\times d\\) matrix where each element represents the covariance between two features. The covariance between two features is calculated as follows: \\(\\sigma_{jk} = \\frac{1}{n-1}\\sum_{i=1}^{N}\\left( x_{ij}-\\bar{x}_j \\right) \\left( x_{ik}-\\bar{x}_k \\right).\\) We can summarize the calculation of the covariance matrix via the following matrix equation: \\(\\Sigma = \\frac{1}{n-1} \\left( (\\mathbf{X} - \\mathbf{\\bar{x}})^T\\;(\\mathbf{X} - \\mathbf{\\bar{x}}) \\right)\\) where \\(\\mathbf{\\bar{x}}\\) is the mean vector \\(\\mathbf{\\bar{x}} = \\sum\\limits_{i=1}^n x_{i}.\\) The mean vector is a \\(d\\)-dimensional vector where each value in this vector represents the sample mean of a feature column in the dataset. cov_mat&lt;-cor(iris_tab[,1:4]) cov_mat ## sepal_length sepal_width petal_length petal_width ## sepal_length 1.0000000 -0.1093692 0.8717542 0.8179536 ## sepal_width -0.1093692 1.0000000 -0.4205161 -0.3565441 ## petal_length 0.8717542 -0.4205161 1.0000000 0.9627571 ## petal_width 0.8179536 -0.3565441 0.9627571 1.0000000 #install.packages(&quot;corrplot&quot;) library(corrplot) corrplot(cov_mat) 14.6 PCA with two variables new_data = as.data.frame(cbind(petal_length = iris_tab$petal_length, petal_width = iris_tab$petal_width)) head(new_data) ## petal_length petal_width ## 1 1.4 0.2 ## 2 1.4 0.2 ## 3 1.3 0.2 ## 4 1.5 0.2 ## 5 1.4 0.2 ## 6 1.7 0.4 plot(new_data$petal_length, new_data$petal_width) #install.packages(&quot;FactoMineR&quot;) library(&quot;FactoMineR&quot;) pc_2var_res = PCA(new_data) print(pc_2var_res) ## **Results for the Principal Component Analysis (PCA)** ## The analysis was performed on 150 individuals, described by 2 variables ## *The results are available in the following objects: ## ## name description ## 1 &quot;$eig&quot; &quot;eigenvalues&quot; ## 2 &quot;$var&quot; &quot;results for the variables&quot; ## 3 &quot;$var$coord&quot; &quot;coord. for the variables&quot; ## 4 &quot;$var$cor&quot; &quot;correlations variables - dimensions&quot; ## 5 &quot;$var$cos2&quot; &quot;cos2 for the variables&quot; ## 6 &quot;$var$contrib&quot; &quot;contributions of the variables&quot; ## 7 &quot;$ind&quot; &quot;results for the individuals&quot; ## 8 &quot;$ind$coord&quot; &quot;coord. for the individuals&quot; ## 9 &quot;$ind$cos2&quot; &quot;cos2 for the individuals&quot; ## 10 &quot;$ind$contrib&quot; &quot;contributions of the individuals&quot; ## 11 &quot;$call&quot; &quot;summary statistics&quot; ## 12 &quot;$call$centre&quot; &quot;mean of the variables&quot; ## 13 &quot;$call$ecart.type&quot; &quot;standard error of the variables&quot; ## 14 &quot;$call$row.w&quot; &quot;weights for the individuals&quot; ## 15 &quot;$call$col.w&quot; &quot;weights for the variables&quot; #install.packages(&quot;FactoInvestigate&quot;) #library(FactoInvestigate) #Investigate(pc_2var_res, document = &quot;pdf_document&quot;) Next, we perform an eigendecomposition on the covariance matrix: eigen(cov_mat) ## eigen() decomposition ## $values ## [1] 2.91081808 0.92122093 0.14735328 0.02060771 ## ## $vectors ## [,1] [,2] [,3] [,4] ## [1,] 0.5223716 -0.37231836 0.7210168 0.2619956 ## [2,] -0.2633549 -0.92555649 -0.2420329 -0.1241348 ## [3,] 0.5812540 -0.02109478 -0.1408923 -0.8011543 ## [4,] 0.5656110 -0.06541577 -0.6338014 0.5235463 14.7 PCA on wine data 14.7.1 Read the wine data wine &lt;- read.csv(&quot;data/wine.csv&quot;, header=T) knitr::kable(wine) Wine Alcohol Malic.acid Ash Acl Mg Phenols Flavanoids Nonflavanoid.phenols Proanth Color.int Hue OD Proline 1 14.23 1.71 2.43 15.6 127 2.80 3.06 0.28 2.29 5.640000 1.040 3.92 1065 1 13.20 1.78 2.14 11.2 100 2.65 2.76 0.26 1.28 4.380000 1.050 3.40 1050 1 13.16 2.36 2.67 18.6 101 2.80 3.24 0.30 2.81 5.680000 1.030 3.17 1185 1 14.37 1.95 2.50 16.8 113 3.85 3.49 0.24 2.18 7.800000 0.860 3.45 1480 1 13.24 2.59 2.87 21.0 118 2.80 2.69 0.39 1.82 4.320000 1.040 2.93 735 1 14.20 1.76 2.45 15.2 112 3.27 3.39 0.34 1.97 6.750000 1.050 2.85 1450 1 14.39 1.87 2.45 14.6 96 2.50 2.52 0.30 1.98 5.250000 1.020 3.58 1290 1 14.06 2.15 2.61 17.6 121 2.60 2.51 0.31 1.25 5.050000 1.060 3.58 1295 1 14.83 1.64 2.17 14.0 97 2.80 2.98 0.29 1.98 5.200000 1.080 2.85 1045 1 13.86 1.35 2.27 16.0 98 2.98 3.15 0.22 1.85 7.220000 1.010 3.55 1045 1 14.10 2.16 2.30 18.0 105 2.95 3.32 0.22 2.38 5.750000 1.250 3.17 1510 1 14.12 1.48 2.32 16.8 95 2.20 2.43 0.26 1.57 5.000000 1.170 2.82 1280 1 13.75 1.73 2.41 16.0 89 2.60 2.76 0.29 1.81 5.600000 1.150 2.90 1320 1 14.75 1.73 2.39 11.4 91 3.10 3.69 0.43 2.81 5.400000 1.250 2.73 1150 1 14.38 1.87 2.38 12.0 102 3.30 3.64 0.29 2.96 7.500000 1.200 3.00 1547 1 13.63 1.81 2.70 17.2 112 2.85 2.91 0.30 1.46 7.300000 1.280 2.88 1310 1 14.30 1.92 2.72 20.0 120 2.80 3.14 0.33 1.97 6.200000 1.070 2.65 1280 1 13.83 1.57 2.62 20.0 115 2.95 3.40 0.40 1.72 6.600000 1.130 2.57 1130 1 14.19 1.59 2.48 16.5 108 3.30 3.93 0.32 1.86 8.700000 1.230 2.82 1680 1 13.64 3.10 2.56 15.2 116 2.70 3.03 0.17 1.66 5.100000 0.960 3.36 845 1 14.06 1.63 2.28 16.0 126 3.00 3.17 0.24 2.10 5.650000 1.090 3.71 780 1 12.93 3.80 2.65 18.6 102 2.41 2.41 0.25 1.98 4.500000 1.030 3.52 770 1 13.71 1.86 2.36 16.6 101 2.61 2.88 0.27 1.69 3.800000 1.110 4.00 1035 1 12.85 1.60 2.52 17.8 95 2.48 2.37 0.26 1.46 3.930000 1.090 3.63 1015 1 13.50 1.81 2.61 20.0 96 2.53 2.61 0.28 1.66 3.520000 1.120 3.82 845 1 13.05 2.05 3.22 25.0 124 2.63 2.68 0.47 1.92 3.580000 1.130 3.20 830 1 13.39 1.77 2.62 16.1 93 2.85 2.94 0.34 1.45 4.800000 0.920 3.22 1195 1 13.30 1.72 2.14 17.0 94 2.40 2.19 0.27 1.35 3.950000 1.020 2.77 1285 1 13.87 1.90 2.80 19.4 107 2.95 2.97 0.37 1.76 4.500000 1.250 3.40 915 1 14.02 1.68 2.21 16.0 96 2.65 2.33 0.26 1.98 4.700000 1.040 3.59 1035 1 13.73 1.50 2.70 22.5 101 3.00 3.25 0.29 2.38 5.700000 1.190 2.71 1285 1 13.58 1.66 2.36 19.1 106 2.86 3.19 0.22 1.95 6.900000 1.090 2.88 1515 1 13.68 1.83 2.36 17.2 104 2.42 2.69 0.42 1.97 3.840000 1.230 2.87 990 1 13.76 1.53 2.70 19.5 132 2.95 2.74 0.50 1.35 5.400000 1.250 3.00 1235 1 13.51 1.80 2.65 19.0 110 2.35 2.53 0.29 1.54 4.200000 1.100 2.87 1095 1 13.48 1.81 2.41 20.5 100 2.70 2.98 0.26 1.86 5.100000 1.040 3.47 920 1 13.28 1.64 2.84 15.5 110 2.60 2.68 0.34 1.36 4.600000 1.090 2.78 880 1 13.05 1.65 2.55 18.0 98 2.45 2.43 0.29 1.44 4.250000 1.120 2.51 1105 1 13.07 1.50 2.10 15.5 98 2.40 2.64 0.28 1.37 3.700000 1.180 2.69 1020 1 14.22 3.99 2.51 13.2 128 3.00 3.04 0.20 2.08 5.100000 0.890 3.53 760 1 13.56 1.71 2.31 16.2 117 3.15 3.29 0.34 2.34 6.130000 0.950 3.38 795 1 13.41 3.84 2.12 18.8 90 2.45 2.68 0.27 1.48 4.280000 0.910 3.00 1035 1 13.88 1.89 2.59 15.0 101 3.25 3.56 0.17 1.70 5.430000 0.880 3.56 1095 1 13.24 3.98 2.29 17.5 103 2.64 2.63 0.32 1.66 4.360000 0.820 3.00 680 1 13.05 1.77 2.10 17.0 107 3.00 3.00 0.28 2.03 5.040000 0.880 3.35 885 1 14.21 4.04 2.44 18.9 111 2.85 2.65 0.30 1.25 5.240000 0.870 3.33 1080 1 14.38 3.59 2.28 16.0 102 3.25 3.17 0.27 2.19 4.900000 1.040 3.44 1065 1 13.90 1.68 2.12 16.0 101 3.10 3.39 0.21 2.14 6.100000 0.910 3.33 985 1 14.10 2.02 2.40 18.8 103 2.75 2.92 0.32 2.38 6.200000 1.070 2.75 1060 1 13.94 1.73 2.27 17.4 108 2.88 3.54 0.32 2.08 8.900000 1.120 3.10 1260 1 13.05 1.73 2.04 12.4 92 2.72 3.27 0.17 2.91 7.200000 1.120 2.91 1150 1 13.83 1.65 2.60 17.2 94 2.45 2.99 0.22 2.29 5.600000 1.240 3.37 1265 1 13.82 1.75 2.42 14.0 111 3.88 3.74 0.32 1.87 7.050000 1.010 3.26 1190 1 13.77 1.90 2.68 17.1 115 3.00 2.79 0.39 1.68 6.300000 1.130 2.93 1375 1 13.74 1.67 2.25 16.4 118 2.60 2.90 0.21 1.62 5.850000 0.920 3.20 1060 1 13.56 1.73 2.46 20.5 116 2.96 2.78 0.20 2.45 6.250000 0.980 3.03 1120 1 14.22 1.70 2.30 16.3 118 3.20 3.00 0.26 2.03 6.380000 0.940 3.31 970 1 13.29 1.97 2.68 16.8 102 3.00 3.23 0.31 1.66 6.000000 1.070 2.84 1270 1 13.72 1.43 2.50 16.7 108 3.40 3.67 0.19 2.04 6.800000 0.890 2.87 1285 2 12.37 0.94 1.36 10.6 88 1.98 0.57 0.28 0.42 1.950000 1.050 1.82 520 2 12.33 1.10 2.28 16.0 101 2.05 1.09 0.63 0.41 3.270000 1.250 1.67 680 2 12.64 1.36 2.02 16.8 100 2.02 1.41 0.53 0.62 5.750000 0.980 1.59 450 2 13.67 1.25 1.92 18.0 94 2.10 1.79 0.32 0.73 3.800000 1.230 2.46 630 2 12.37 1.13 2.16 19.0 87 3.50 3.10 0.19 1.87 4.450000 1.220 2.87 420 2 12.17 1.45 2.53 19.0 104 1.89 1.75 0.45 1.03 2.950000 1.450 2.23 355 2 12.37 1.21 2.56 18.1 98 2.42 2.65 0.37 2.08 4.600000 1.190 2.30 678 2 13.11 1.01 1.70 15.0 78 2.98 3.18 0.26 2.28 5.300000 1.120 3.18 502 2 12.37 1.17 1.92 19.6 78 2.11 2.00 0.27 1.04 4.680000 1.120 3.48 510 2 13.34 0.94 2.36 17.0 110 2.53 1.30 0.55 0.42 3.170000 1.020 1.93 750 2 12.21 1.19 1.75 16.8 151 1.85 1.28 0.14 2.50 2.850000 1.280 3.07 718 2 12.29 1.61 2.21 20.4 103 1.10 1.02 0.37 1.46 3.050000 0.906 1.82 870 2 13.86 1.51 2.67 25.0 86 2.95 2.86 0.21 1.87 3.380000 1.360 3.16 410 2 13.49 1.66 2.24 24.0 87 1.88 1.84 0.27 1.03 3.740000 0.980 2.78 472 2 12.99 1.67 2.60 30.0 139 3.30 2.89 0.21 1.96 3.350000 1.310 3.50 985 2 11.96 1.09 2.30 21.0 101 3.38 2.14 0.13 1.65 3.210000 0.990 3.13 886 2 11.66 1.88 1.92 16.0 97 1.61 1.57 0.34 1.15 3.800000 1.230 2.14 428 2 13.03 0.90 1.71 16.0 86 1.95 2.03 0.24 1.46 4.600000 1.190 2.48 392 2 11.84 2.89 2.23 18.0 112 1.72 1.32 0.43 0.95 2.650000 0.960 2.52 500 2 12.33 0.99 1.95 14.8 136 1.90 1.85 0.35 2.76 3.400000 1.060 2.31 750 2 12.70 3.87 2.40 23.0 101 2.83 2.55 0.43 1.95 2.570000 1.190 3.13 463 2 12.00 0.92 2.00 19.0 86 2.42 2.26 0.30 1.43 2.500000 1.380 3.12 278 2 12.72 1.81 2.20 18.8 86 2.20 2.53 0.26 1.77 3.900000 1.160 3.14 714 2 12.08 1.13 2.51 24.0 78 2.00 1.58 0.40 1.40 2.200000 1.310 2.72 630 2 13.05 3.86 2.32 22.5 85 1.65 1.59 0.61 1.62 4.800000 0.840 2.01 515 2 11.84 0.89 2.58 18.0 94 2.20 2.21 0.22 2.35 3.050000 0.790 3.08 520 2 12.67 0.98 2.24 18.0 99 2.20 1.94 0.30 1.46 2.620000 1.230 3.16 450 2 12.16 1.61 2.31 22.8 90 1.78 1.69 0.43 1.56 2.450000 1.330 2.26 495 2 11.65 1.67 2.62 26.0 88 1.92 1.61 0.40 1.34 2.600000 1.360 3.21 562 2 11.64 2.06 2.46 21.6 84 1.95 1.69 0.48 1.35 2.800000 1.000 2.75 680 2 12.08 1.33 2.30 23.6 70 2.20 1.59 0.42 1.38 1.740000 1.070 3.21 625 2 12.08 1.83 2.32 18.5 81 1.60 1.50 0.52 1.64 2.400000 1.080 2.27 480 2 12.00 1.51 2.42 22.0 86 1.45 1.25 0.50 1.63 3.600000 1.050 2.65 450 2 12.69 1.53 2.26 20.7 80 1.38 1.46 0.58 1.62 3.050000 0.960 2.06 495 2 12.29 2.83 2.22 18.0 88 2.45 2.25 0.25 1.99 2.150000 1.150 3.30 290 2 11.62 1.99 2.28 18.0 98 3.02 2.26 0.17 1.35 3.250000 1.160 2.96 345 2 12.47 1.52 2.20 19.0 162 2.50 2.27 0.32 3.28 2.600000 1.160 2.63 937 2 11.81 2.12 2.74 21.5 134 1.60 0.99 0.14 1.56 2.500000 0.950 2.26 625 2 12.29 1.41 1.98 16.0 85 2.55 2.50 0.29 1.77 2.900000 1.230 2.74 428 2 12.37 1.07 2.10 18.5 88 3.52 3.75 0.24 1.95 4.500000 1.040 2.77 660 2 12.29 3.17 2.21 18.0 88 2.85 2.99 0.45 2.81 2.300000 1.420 2.83 406 2 12.08 2.08 1.70 17.5 97 2.23 2.17 0.26 1.40 3.300000 1.270 2.96 710 2 12.60 1.34 1.90 18.5 88 1.45 1.36 0.29 1.35 2.450000 1.040 2.77 562 2 12.34 2.45 2.46 21.0 98 2.56 2.11 0.34 1.31 2.800000 0.800 3.38 438 2 11.82 1.72 1.88 19.5 86 2.50 1.64 0.37 1.42 2.060000 0.940 2.44 415 2 12.51 1.73 1.98 20.5 85 2.20 1.92 0.32 1.48 2.940000 1.040 3.57 672 2 12.42 2.55 2.27 22.0 90 1.68 1.84 0.66 1.42 2.700000 0.860 3.30 315 2 12.25 1.73 2.12 19.0 80 1.65 2.03 0.37 1.63 3.400000 1.000 3.17 510 2 12.72 1.75 2.28 22.5 84 1.38 1.76 0.48 1.63 3.300000 0.880 2.42 488 2 12.22 1.29 1.94 19.0 92 2.36 2.04 0.39 2.08 2.700000 0.860 3.02 312 2 11.61 1.35 2.70 20.0 94 2.74 2.92 0.29 2.49 2.650000 0.960 3.26 680 2 11.46 3.74 1.82 19.5 107 3.18 2.58 0.24 3.58 2.900000 0.750 2.81 562 2 12.52 2.43 2.17 21.0 88 2.55 2.27 0.26 1.22 2.000000 0.900 2.78 325 2 11.76 2.68 2.92 20.0 103 1.75 2.03 0.60 1.05 3.800000 1.230 2.50 607 2 11.41 0.74 2.50 21.0 88 2.48 2.01 0.42 1.44 3.080000 1.100 2.31 434 2 12.08 1.39 2.50 22.5 84 2.56 2.29 0.43 1.04 2.900000 0.930 3.19 385 2 11.03 1.51 2.20 21.5 85 2.46 2.17 0.52 2.01 1.900000 1.710 2.87 407 2 11.82 1.47 1.99 20.8 86 1.98 1.60 0.30 1.53 1.950000 0.950 3.33 495 2 12.42 1.61 2.19 22.5 108 2.00 2.09 0.34 1.61 2.060000 1.060 2.96 345 2 12.77 3.43 1.98 16.0 80 1.63 1.25 0.43 0.83 3.400000 0.700 2.12 372 2 12.00 3.43 2.00 19.0 87 2.00 1.64 0.37 1.87 1.280000 0.930 3.05 564 2 11.45 2.40 2.42 20.0 96 2.90 2.79 0.32 1.83 3.250000 0.800 3.39 625 2 11.56 2.05 3.23 28.5 119 3.18 5.08 0.47 1.87 6.000000 0.930 3.69 465 2 12.42 4.43 2.73 26.5 102 2.20 2.13 0.43 1.71 2.080000 0.920 3.12 365 2 13.05 5.80 2.13 21.5 86 2.62 2.65 0.30 2.01 2.600000 0.730 3.10 380 2 11.87 4.31 2.39 21.0 82 2.86 3.03 0.21 2.91 2.800000 0.750 3.64 380 2 12.07 2.16 2.17 21.0 85 2.60 2.65 0.37 1.35 2.760000 0.860 3.28 378 2 12.43 1.53 2.29 21.5 86 2.74 3.15 0.39 1.77 3.940000 0.690 2.84 352 2 11.79 2.13 2.78 28.5 92 2.13 2.24 0.58 1.76 3.000000 0.970 2.44 466 2 12.37 1.63 2.30 24.5 88 2.22 2.45 0.40 1.90 2.120000 0.890 2.78 342 2 12.04 4.30 2.38 22.0 80 2.10 1.75 0.42 1.35 2.600000 0.790 2.57 580 3 12.86 1.35 2.32 18.0 122 1.51 1.25 0.21 0.94 4.100000 0.760 1.29 630 3 12.88 2.99 2.40 20.0 104 1.30 1.22 0.24 0.83 5.400000 0.740 1.42 530 3 12.81 2.31 2.40 24.0 98 1.15 1.09 0.27 0.83 5.700000 0.660 1.36 560 3 12.70 3.55 2.36 21.5 106 1.70 1.20 0.17 0.84 5.000000 0.780 1.29 600 3 12.51 1.24 2.25 17.5 85 2.00 0.58 0.60 1.25 5.450000 0.750 1.51 650 3 12.60 2.46 2.20 18.5 94 1.62 0.66 0.63 0.94 7.100000 0.730 1.58 695 3 12.25 4.72 2.54 21.0 89 1.38 0.47 0.53 0.80 3.850000 0.750 1.27 720 3 12.53 5.51 2.64 25.0 96 1.79 0.60 0.63 1.10 5.000000 0.820 1.69 515 3 13.49 3.59 2.19 19.5 88 1.62 0.48 0.58 0.88 5.700000 0.810 1.82 580 3 12.84 2.96 2.61 24.0 101 2.32 0.60 0.53 0.81 4.920000 0.890 2.15 590 3 12.93 2.81 2.70 21.0 96 1.54 0.50 0.53 0.75 4.600000 0.770 2.31 600 3 13.36 2.56 2.35 20.0 89 1.40 0.50 0.37 0.64 5.600000 0.700 2.47 780 3 13.52 3.17 2.72 23.5 97 1.55 0.52 0.50 0.55 4.350000 0.890 2.06 520 3 13.62 4.95 2.35 20.0 92 2.00 0.80 0.47 1.02 4.400000 0.910 2.05 550 3 12.25 3.88 2.20 18.5 112 1.38 0.78 0.29 1.14 8.210000 0.650 2.00 855 3 13.16 3.57 2.15 21.0 102 1.50 0.55 0.43 1.30 4.000000 0.600 1.68 830 3 13.88 5.04 2.23 20.0 80 0.98 0.34 0.40 0.68 4.900000 0.580 1.33 415 3 12.87 4.61 2.48 21.5 86 1.70 0.65 0.47 0.86 7.650000 0.540 1.86 625 3 13.32 3.24 2.38 21.5 92 1.93 0.76 0.45 1.25 8.420000 0.550 1.62 650 3 13.08 3.90 2.36 21.5 113 1.41 1.39 0.34 1.14 9.400000 0.570 1.33 550 3 13.50 3.12 2.62 24.0 123 1.40 1.57 0.22 1.25 8.600000 0.590 1.30 500 3 12.79 2.67 2.48 22.0 112 1.48 1.36 0.24 1.26 10.800000 0.480 1.47 480 3 13.11 1.90 2.75 25.5 116 2.20 1.28 0.26 1.56 7.100000 0.610 1.33 425 3 13.23 3.30 2.28 18.5 98 1.80 0.83 0.61 1.87 10.520000 0.560 1.51 675 3 12.58 1.29 2.10 20.0 103 1.48 0.58 0.53 1.40 7.600000 0.580 1.55 640 3 13.17 5.19 2.32 22.0 93 1.74 0.63 0.61 1.55 7.900000 0.600 1.48 725 3 13.84 4.12 2.38 19.5 89 1.80 0.83 0.48 1.56 9.010000 0.570 1.64 480 3 12.45 3.03 2.64 27.0 97 1.90 0.58 0.63 1.14 7.500000 0.670 1.73 880 3 14.34 1.68 2.70 25.0 98 2.80 1.31 0.53 2.70 13.000000 0.570 1.96 660 3 13.48 1.67 2.64 22.5 89 2.60 1.10 0.52 2.29 11.750000 0.570 1.78 620 3 12.36 3.83 2.38 21.0 88 2.30 0.92 0.50 1.04 7.650000 0.560 1.58 520 3 13.69 3.26 2.54 20.0 107 1.83 0.56 0.50 0.80 5.880000 0.960 1.82 680 3 12.85 3.27 2.58 22.0 106 1.65 0.60 0.60 0.96 5.580000 0.870 2.11 570 3 12.96 3.45 2.35 18.5 106 1.39 0.70 0.40 0.94 5.280000 0.680 1.75 675 3 13.78 2.76 2.30 22.0 90 1.35 0.68 0.41 1.03 9.580000 0.700 1.68 615 3 13.73 4.36 2.26 22.5 88 1.28 0.47 0.52 1.15 6.620000 0.780 1.75 520 3 13.45 3.70 2.60 23.0 111 1.70 0.92 0.43 1.46 10.680000 0.850 1.56 695 3 12.82 3.37 2.30 19.5 88 1.48 0.66 0.40 0.97 10.260000 0.720 1.75 685 3 13.58 2.58 2.69 24.5 105 1.55 0.84 0.39 1.54 8.660000 0.740 1.80 750 3 13.40 4.60 2.86 25.0 112 1.98 0.96 0.27 1.11 8.500000 0.670 1.92 630 3 12.20 3.03 2.32 19.0 96 1.25 0.49 0.40 0.73 5.500000 0.660 1.83 510 3 12.77 2.39 2.28 19.5 86 1.39 0.51 0.48 0.64 9.899999 0.570 1.63 470 3 14.16 2.51 2.48 20.0 91 1.68 0.70 0.44 1.24 9.700000 0.620 1.71 660 3 13.71 5.65 2.45 20.5 95 1.68 0.61 0.52 1.06 7.700000 0.640 1.74 740 3 13.40 3.91 2.48 23.0 102 1.80 0.75 0.43 1.41 7.300000 0.700 1.56 750 3 13.27 4.28 2.26 20.0 120 1.59 0.69 0.43 1.35 10.200000 0.590 1.56 835 3 13.17 2.59 2.37 20.0 120 1.65 0.68 0.53 1.46 9.300000 0.600 1.62 840 3 14.13 4.10 2.74 24.5 96 2.05 0.76 0.56 1.35 9.200000 0.610 1.60 560 14.7.2 Description of each column wine_desc &lt;- read.table(&quot;data/wine_data_desc.tsv&quot;, sep=&quot;\\t&quot;, header = T) knitr::kable(wine_desc) colname description Type The type of wine, into one of three classes, 1 (59 obs), 2(71 obs), and 3 (48 obs). Alcohol Alcohol Malic Malic acid Ash Ash Alcalinity Alcalinity of ash Magnesium Magnesium Phenols Total phenols Flavanoids Flavanoids Nonflavanoids Nonflavanoid phenols Proanthocyanins Proanthocyanins Color Color intensity. Hue Hue Dilution D280/OD315 of diluted wines. Proline Proline library(corrplot) dim(wine) ## [1] 178 14 wine_x&lt;-wine[, 2:14] cor_matrix&lt;-cor(wine_x) # method = &quot;square&quot;, ellipse, number, shade, color, pie # type = upper, lower, full(default) corrplot(cor_matrix, method=&quot;circle&quot;, type = &quot;upper&quot;) corrplot.mixed(cor_matrix) 14.7.3 Example Depends on the goal of your analysis. Some common practices, some of which are mentioned in whuber’s link: Standardizing is usually done when the variables on which the PCA is performed are not measured on the same scale. Note that standardizing implies assigning equal importance to all variables. If they are not measured on the same scale and you choose to work on the non standardized variables, it is often the case that each PC is dominated by a single variable and you just get a sort of ordering of the variables by their variance. (One of the loadings of each (early) component will be close to +1 or -1.) The two methods often lead to different results, as you have experienced. Intuitive example: Suppose you have two variables: the height of a tree and the girth of the same tree. We will convert the volume to a factor: a tree will be high in volume if its volume is bigger than 20 cubic feet, and low in volume otherwise. We will use the trees dataset which comes preloaded in R data(trees) tree.girth&lt;-trees[,1] tree.height&lt;-trees[,2] tree.vol&lt;-as.factor(ifelse(trees[,3]&gt;20,&quot;high&quot;,&quot;low&quot;)) Now suppose that the height was actually measured in miles instead of feet. tree.height&lt;-tree.height/5280 tree&lt;-cbind(tree.height,tree.girth) #do the PCA tree.pca&lt;-princomp(tree) summary(tree.pca) ## Importance of components: ## Comp.1 Comp.2 ## Standard deviation 3.0871086 1.014551e-03 ## Proportion of Variance 0.9999999 1.080050e-07 ## Cumulative Proportion 0.9999999 1.000000e+00 The first component explains almost 100% of the variability in the data. The loadings: loadings(tree.pca) ## ## Loadings: ## Comp.1 Comp.2 ## tree.height -1 ## tree.girth 1 ## ## Comp.1 Comp.2 ## SS loadings 1.0 1.0 ## Proportion Var 0.5 0.5 ## Cumulative Var 0.5 1.0 biplot(tree.pca,xlabs=tree.vol,col=c(&quot;grey&quot;,&quot;red&quot;)) ## Warning in arrows(0, 0, y[, 1L] * 0.8, y[, 2L] * 0.8, col = col[2L], length ## = arrow.len): zero-length arrow is of indeterminate angle and so skipped We see that trees high in volume tend to have a high tree girth, but the three height doesn’t give any information on tree volume. This is likely wrong and the consequence of the two different unit measures. We could use the same units, or we could standardize the variables. I expect both will lead to a more balanced picture of the variability. Of course in this case one can argue that the variables should have the same unit but not be standardized, which may be a valid argument, were it not that we are measuring two different things. (When we would be measuring the weight of the tree and the girth of the tree, the scale on which both should be measured is no longer very clear. In this case we have a clear argument to work on the standardized variables.) tree.height&lt;-tree.height*5280 tree&lt;-cbind(tree.height,tree.girth) #do the PCA tree.pca&lt;-princomp(tree) summary(tree.pca) ## Importance of components: ## Comp.1 Comp.2 ## Standard deviation 6.5088696 2.5407042 ## Proportion of Variance 0.8677775 0.1322225 ## Cumulative Proportion 0.8677775 1.0000000 loadings(tree.pca) ## ## Loadings: ## Comp.1 Comp.2 ## tree.height -0.956 0.293 ## tree.girth -0.293 -0.956 ## ## Comp.1 Comp.2 ## SS loadings 1.0 1.0 ## Proportion Var 0.5 0.5 ## Cumulative Var 0.5 1.0 biplot(tree.pca,xlabs=tree.vol,col=c(&quot;grey&quot;,&quot;red&quot;)) We now see that trees which are tall and have a big girth, are high in volume (bottom left corner), compared to low girth and low height for low volume trees (upper right corner). This intuitively makes sense. If one watches closely, however, we see that the contrast between high/low volume is strongest in the girth direction and not in the height direction. Let’s see what happens when we standardize: tree&lt;-scale(tree,center=F,scale=T) tree.pca&lt;-princomp(tree) summary(tree.pca) ## Importance of components: ## Comp.1 Comp.2 ## Standard deviation 0.2275561 0.06779544 ## Proportion of Variance 0.9184749 0.08152510 ## Cumulative Proportion 0.9184749 1.00000000 loadings(tree.pca) ## ## Loadings: ## Comp.1 Comp.2 ## tree.height 0.203 -0.979 ## tree.girth 0.979 0.203 ## ## Comp.1 Comp.2 ## SS loadings 1.0 1.0 ## Proportion Var 0.5 0.5 ## Cumulative Var 0.5 1.0 biplot(tree.pca,xlabs=tree.vol,col=c(&quot;grey&quot;,&quot;red&quot;)) Indeed, the girth now explains the majority of the difference in high and low volume trees! (The length of the arrow in the biplot is indicatory of the variance in the original variable.) So even if things are measured on the same scale, standardizing may be useful. Not standardizing may be recommended when we are for example comparing the length of different species of trees because this is exactly the same measurement. 14.8 References https://sebastianraschka.com/Articles/2015_pca_in_3_steps.html#about-iris How to read PCA biplots and scree plots: https://blog.bioturing.com/2018/06/18/how-to-read-pca-biplots-and-scree-plots/ Principal Component Analysis (PCA): https://learnche.org/pid/latent-variable-modelling/principal-component-analysis/index Exploratory Multivariate Analysis by Example using R: http://factominer.free.fr/course/index.html https://github.com/gabi493/ADEI/blob/master/Husson%20F.%20et%20al.%20-%20Exploratory%20Multivariate%20Analysis%20by%20Example%20-%20Using%20R%20-%202011.pdf Three Tips for Principal Component Analysis: https://www.theanalysisfactor.com/tips-principal-component-analysis/ Not normalizing data before PCA gives better explained variance ratio?: https://stats.stackexchange.com/questions/105592/not-normalizing-data-before-pca-gives-better-explained-variance-ratio "],
["random-forest.html", "15 Random forest 15.1 Practical experiments", " 15 Random forest 15.1 Practical experiments 15.1.1 Random forest for prediction of iris The caret package (short for _C_lassification _A_nd _RE_gression _T_raining) is a set of functions that attempt to streamline the process for creating predictive models. The package contains tools for: data splitting pre-processing feature selection model tuning using resampling variable importance estimation 15.1.1.1 Required R packages Required packages: caret AppliedPredictiveModeling ellipse Attribute Information: sepal length in cm sepal width in cm petal length in cm petal width in cm class: – Iris Setosa – Iris Versicolour – Iris Virginica str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa dim(iris) ## [1] 150 5 15.1.1.2 Visulization 15.1.1.2.1 Scatterplot Matrix #install.packages(&quot;AppliedPredictiveModeling&quot;) library(AppliedPredictiveModeling) transparentTheme(trans = .4) #install.packages(&quot;caret&quot;) library(caret) ## ## Attaching package: &#39;caret&#39; ## The following object is masked from &#39;package:survival&#39;: ## ## cluster featurePlot(x = iris[, 1:4], y = iris$Species, plot = &quot;pairs&quot;, ## Add a key at the top auto.key = list(columns = 3)) 15.1.1.2.2 Scatterplot Matrix with Ellipses #install.packages(&quot;ellipse&quot;) library(ellipse) ## ## Attaching package: &#39;ellipse&#39; ## The following object is masked from &#39;package:graphics&#39;: ## ## pairs featurePlot(x = iris[, 1:4], y = iris$Species, plot = &quot;ellipse&quot;, ## Add a key at the top auto.key = list(columns = 3)) 15.1.1.2.3 Overlayed Density Plots featurePlot(x = iris[, 1:4], y = iris$Species, plot = &quot;density&quot;, ## Pass in options to xyplot() to ## make it prettier scales = list(x = list(relation=&quot;free&quot;), y = list(relation=&quot;free&quot;)), adjust = 1.5, pch = &quot;|&quot;, layout = c(4, 1), auto.key = list(columns = 3)) 15.1.1.2.4 Box Plots featurePlot(x = iris[, 1:4], y = iris$Species, plot = &quot;box&quot;, ## Pass in options to bwplot() scales = list(y = list(relation=&quot;free&quot;), x = list(rot = 90)), layout = c(4,1 ), auto.key = list(columns = 2)) 15.1.1.2.5 Machine leraning - Random forest 15.1.1.2.6 Model Train set.seed(186) # Data Splitting train_index &lt;- createDataPartition(iris$Species, p = 0.75, , times=1, list = FALSE) train_set = iris[train_index, ] test_set = iris[-train_index, ] fit_rf_cv &lt;- train(Species ~ ., data=train_set, method=&#39;rf&#39;, metric = &quot;Accuracy&quot;, trControl=trainControl(method=&quot;cv&quot;,number=5)) fit_rf_cv ## Random Forest ## ## 114 samples ## 4 predictors ## 3 classes: &#39;setosa&#39;, &#39;versicolor&#39;, &#39;virginica&#39; ## ## No pre-processing ## Resampling: Cross-Validated (5 fold) ## Summary of sample sizes: 91, 91, 93, 91, 90 ## Resampling results across tuning parameters: ## ## mtry Accuracy Kappa ## 2 0.9398551 0.9100274 ## 3 0.9398551 0.9100274 ## 4 0.9398551 0.9100274 ## ## Accuracy was used to select the optimal model using the largest value. ## The final value used for the model was mtry = 2. ## Variance importance rfVarImpcv = varImp(fit_rf_cv) rfVarImpcv ## rf variable importance ## ## Overall ## Petal.Width 100.00 ## Petal.Length 95.11 ## Sepal.Length 16.93 ## Sepal.Width 0.00 15.1.1.2.7 Testing test data ## predict test_set$predict_rf &lt;- predict(fit_rf_cv, test_set, &quot;raw&quot;) confusionMatrix(test_set$predict_rf, test_set$Species) ## Confusion Matrix and Statistics ## ## Reference ## Prediction setosa versicolor virginica ## setosa 12 0 0 ## versicolor 0 11 1 ## virginica 0 1 11 ## ## Overall Statistics ## ## Accuracy : 0.9444 ## 95% CI : (0.8134, 0.9932) ## No Information Rate : 0.3333 ## P-Value [Acc &gt; NIR] : 1.728e-14 ## ## Kappa : 0.9167 ## Mcnemar&#39;s Test P-Value : NA ## ## Statistics by Class: ## ## Class: setosa Class: versicolor Class: virginica ## Sensitivity 1.0000 0.9167 0.9167 ## Specificity 1.0000 0.9583 0.9583 ## Pos Pred Value 1.0000 0.9167 0.9167 ## Neg Pred Value 1.0000 0.9583 0.9583 ## Prevalence 0.3333 0.3333 0.3333 ## Detection Rate 0.3333 0.3056 0.3056 ## Detection Prevalence 0.3333 0.3333 0.3333 ## Balanced Accuracy 1.0000 0.9375 0.9375 "],
["qtl-analysis.html", "16 QTL analysis 16.1 Reference", " 16 QTL analysis 16.1 Reference STAT/BMI 877: Statistical Methods for Molecular Biology: https://www.biostat.wisc.edu/~kendzior/STAT877/ QTL Mapping and reproducible research: https://github.com/kbroman/Teaching_UWStatGen2019 Karl Broman: http://kbroman.org/pages/teaching.html "],
["references-1.html", "References", " References CSAMA 2017: Statistical Data Analysis for Genome-Scale Biology: https://bioconductor.org/help/course-materials/2017/CSAMA/ Bioconductor Courses &amp; Conferences: https://bioconductor.org/help/course-materials/ Scalable Genomics with R and Bioconductor: https://arxiv.org/pdf/1409.2864v1.pdf What They Forgot to Teach You About R: https://whattheyforgot.org/ Data &amp; models versioning for ML projects, make them shareable and reproducible : "],
["transformation-of-data.html", "17 Transformation of data 17.1 Log transformation", " 17 Transformation of data 17.1 Log transformation The log transformation is the most popular among the different types of transformations used to transform skewed dat to approximately conform to normality. If the original data follows a log-normal distribution or approximately so, then the log-transformed data follows a normal or near normal distribution. We use log2 (and not log10) is that fold changes might happen on a smaller scale than the thousands/millions/billions that make log10 transformations useful in visualizations. For a long time, a two-fold change was the “gold standard” of a significant change from baseline. If FC was less than that, it might be due to experimental error. Thus, the log2 was used (instead of log10, or natural log, or some other base system). 17.1.1 The rationale of using log2 transformation dat &lt;- read.table(&quot;data/yeast_DESeq2_DEG.tab&quot;, header = T) 17.1.2 Reference Log-transformation and its implications for data analysis: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4120293/ Dumb question about LogFC: https://www.reddit.com/r/labrats/comments/7odtki/dumb_question_about_logfc/ "],
["partial-least-square-analysis.html", "18 Partial least square analysis 18.1 Prepare the data 18.2 Principal Component Analysis (PCA) 18.3 Partial least-squares: PLS and PLS-DA 18.4 Reference", " 18 Partial least square analysis 18.1 Prepare the data library(ropls) data(sacurine) names(sacurine) ## [1] &quot;dataMatrix&quot; &quot;sampleMetadata&quot; &quot;variableMetadata&quot; We attach sacurine to the search path and display a summary of the content of the dataMatrix, sampleMetadata and variableMetadata with the strF Function of the ropls package (see also str): attach(sacurine) strF(dataMatrix) ## dim class mode typeof size NAs min mean median max ## 183 x 109 matrix numeric double 0.2 Mb 0 -0.3 4.2 4.3 6 ## (2-methoxyethoxy)propanoic acid isomer (gamma)Glu-Leu/Ile ... ## HU_011 3.019766011 3.888479324 ... ## HU_014 3.81433889 4.277148905 ... ## ... ... ... ... ## HU_208 3.748127215 4.523763202 ... ## HU_209 4.208859398 4.675880567 ... ## Valerylglycine isomer 2 Xanthosine ## HU_011 3.889078716 4.075879575 ## HU_014 4.181765852 4.195761901 ## ... ... ... ## HU_208 4.634338821 4.487781609 ## HU_209 4.47194762 4.222953354 head(dataMatrix) ## (2-methoxyethoxy)propanoic acid isomer (gamma)Glu-Leu/Ile ## HU_011 3.019766 3.888479 ## HU_014 3.814339 4.277149 ## HU_015 3.519691 4.195649 ## HU_017 2.562183 4.323760 ## HU_018 3.781922 4.629329 ## HU_019 4.161074 4.412266 ## 1-Methyluric acid 1-Methylxanthine 1,3-Dimethyluric acid ## HU_011 3.869006 3.717259 3.535461 ## HU_014 3.837704 3.776851 3.932581 ## HU_015 4.102254 4.291665 3.955376 ## HU_017 4.538520 4.432216 4.228491 ## HU_018 4.178829 4.117360 4.005545 ## HU_019 4.516805 4.562052 4.320582 ## 1,7-Dimethyluric acid 2-acetamido-4-methylphenyl acetate ## HU_011 3.325199 4.204754 ## HU_014 4.025125 5.181858 ## HU_015 3.972904 3.885680 ## HU_017 4.109927 4.237915 ## HU_018 4.024092 1.852994 ## HU_019 4.326856 4.080681 ## 2-Aminoadipic acid 2-Hydroxybenzyl alcohol 2-Isopropylmalic acid ## HU_011 4.080204 4.560049 3.466916 ## HU_014 4.359246 3.158212 3.942746 ## HU_015 4.249111 4.290525 3.539600 ## HU_017 4.231404 3.644976 3.152084 ## HU_018 4.323679 4.095923 4.490116 ## HU_019 4.244485 4.428005 4.156567 ## 2-Methylhippuric acid 2,2-Dimethylglutaric acid ## HU_011 4.297716 3.799720 ## HU_014 3.833793 4.192342 ## HU_015 4.199262 4.146924 ## HU_017 3.865260 4.233270 ## HU_018 4.271223 4.755177 ## HU_019 3.831930 4.333599 ## 3-Hydroxybenzyl alcohol 3-Hydroxyphenylacetic acid ## HU_011 3.502958 4.672721 ## HU_014 4.370053 4.490127 ## HU_015 3.990814 4.416155 ## HU_017 4.151260 3.960912 ## HU_018 4.373425 4.247532 ## HU_019 1.446237 4.164327 ## 3-Indole carboxylic acid glucuronide 3-Methyl-2-oxovaleric acid ## HU_011 3.548979 3.956110 ## HU_014 4.344955 4.062870 ## HU_015 4.174503 4.420565 ## HU_017 4.688053 4.146152 ## HU_018 3.276676 4.351114 ## HU_019 4.206905 4.341494 ## 3-Methylcrotonylglycine 3,3-Dimethylglutaric acid ## HU_011 4.204465 4.223994 ## HU_014 4.055144 4.486961 ## HU_015 4.148095 4.137063 ## HU_017 4.193130 4.200239 ## HU_018 4.225720 4.569052 ## HU_019 4.127074 4.195226 ## 3,4-Dihydroxybenzeneacetic acid ## HU_011 3.400454 ## HU_014 4.366695 ## HU_015 3.965742 ## HU_017 4.121298 ## HU_018 4.373747 ## HU_019 2.320550 ## 3,5-dihydroxybenzoic acid/3,4-dihydroxybenzoic acid ## HU_011 4.494138 ## HU_014 4.118021 ## HU_015 4.284274 ## HU_017 4.118248 ## HU_018 4.077463 ## HU_019 4.107163 ## 3,7-Dimethyluric acid 4-Acetamidobutanoic acid isomer 2 ## HU_011 4.233820 4.046984 ## HU_014 3.596651 4.218431 ## HU_015 3.954022 3.995719 ## HU_017 3.995039 4.006450 ## HU_018 3.908515 4.564357 ## HU_019 4.720603 4.193068 ## 4-Acetamidobutanoic acid isomer 3 4-Hydroxybenzoic acid ## HU_011 3.964380 4.581811 ## HU_014 4.087865 4.675483 ## HU_015 4.031485 4.248248 ## HU_017 3.884681 4.171788 ## HU_018 4.347509 4.660293 ## HU_019 4.040541 4.335561 ## 4-Methylhippuric acid/3-Methylhippuric acid ## HU_011 3.242186 ## HU_014 3.838007 ## HU_015 4.723900 ## HU_017 3.617350 ## HU_018 4.285848 ## HU_019 3.430342 ## 5-Hydroxyindoleacetic acid 5-Sulfosalicylic acid ## HU_011 4.307545 4.023477 ## HU_014 4.402027 4.083692 ## HU_015 3.975413 4.232119 ## HU_017 4.168655 3.088972 ## HU_018 4.502182 4.142686 ## HU_019 4.281092 3.950241 ## 6-(2-hydroxyethoxy)-6-oxohexanoic acid ## HU_011 3.758640 ## HU_014 4.329163 ## HU_015 3.994170 ## HU_017 4.436174 ## HU_018 4.442814 ## HU_019 4.260599 ## 6-(carboxymethoxy)-hexanoic acid 9-Methylxanthine ## HU_011 3.445392 4.403909 ## HU_014 3.999589 4.211293 ## HU_015 4.039267 4.073960 ## HU_017 4.084428 4.257367 ## HU_018 4.527800 3.662754 ## HU_019 4.114818 4.262501 ## Acetaminophen glucuronide Acetylphenylalanine ## HU_011 1.64620136 4.169514 ## HU_014 0.09467123 4.515993 ## HU_015 -0.15947672 4.083460 ## HU_017 0.32143853 3.767910 ## HU_018 1.76127463 4.187942 ## HU_019 4.62568088 4.292496 ## alpha-N-Phenylacetyl-glutamine Aminosalicyluric acid ## HU_011 4.406638 4.125306 ## HU_014 4.362682 3.942512 ## HU_015 4.101540 4.004895 ## HU_017 4.173137 4.277246 ## HU_018 4.332330 4.307816 ## HU_019 4.366653 3.908610 ## Asp-Leu/Ile isomer 1 Asp-Leu/Ile isomer 2 Aspartic acid ## HU_011 3.565669 3.706871 4.262679 ## HU_014 3.852859 3.624547 4.278906 ## HU_015 3.879881 3.965623 4.225658 ## HU_017 3.564683 4.000451 4.476138 ## HU_018 4.710114 4.414012 4.460986 ## HU_019 4.551170 4.417869 4.545151 ## Azelaic acid Benzoic acid isomer Chenodeoxycholic acid isomer ## HU_011 4.419660 3.867245 3.507941 ## HU_014 4.331720 4.830236 3.925771 ## HU_015 4.105070 3.371990 4.765679 ## HU_017 4.017999 3.724525 4.058410 ## HU_018 4.320763 4.593359 4.379709 ## HU_019 4.641622 4.475130 4.120224 ## Cinnamoylglycine Citric acid Dehydroepiandrosterone 3-glucuronide ## HU_011 3.981493 4.077505 4.276799 ## HU_014 3.381453 4.418117 3.781079 ## HU_015 3.773393 4.179830 4.039523 ## HU_017 4.213982 4.218916 3.960037 ## HU_018 2.636678 4.294479 4.178258 ## HU_019 4.071694 4.386380 4.018968 ## Dehydroepiandrosterone sulfate Deoxyhexose Dimethylguanosine ## HU_011 4.462774 3.760569 4.052598 ## HU_014 3.806104 3.809186 4.269907 ## HU_015 3.193502 4.226145 4.197532 ## HU_017 4.165680 3.997357 4.350023 ## HU_018 4.363253 4.084736 4.408429 ## HU_019 3.986997 4.296965 4.310144 ## FMNH2 Fumaric acid Gentisic acid Glu-Val ## HU_011 3.565083 3.567561 4.300974 3.706666 ## HU_014 4.208395 3.840097 4.584677 4.310927 ## HU_015 4.034409 4.384064 4.764176 4.289509 ## HU_017 4.233037 3.416630 4.062663 4.376818 ## HU_018 4.597364 4.091964 4.431808 4.721889 ## HU_019 4.199745 4.012107 4.238883 4.392128 ## Gluconic acid and/or isomers Glucuronic acid and/or isomers ## HU_011 4.288424 4.271366 ## HU_014 4.586464 4.701159 ## HU_015 4.096407 4.123025 ## HU_017 4.743170 4.593438 ## HU_018 4.614798 4.461186 ## HU_019 4.334139 4.461209 ## Glyceric acid Glycocholic acid isomer 2 Glycocholic acid isomer 3 ## HU_011 3.928441 3.536033 3.467331 ## HU_014 4.286770 4.157624 4.170019 ## HU_015 4.273123 4.298947 4.045842 ## HU_017 4.606753 2.519658 2.687939 ## HU_018 4.641004 4.743202 4.763984 ## HU_019 4.429628 3.395705 3.371074 ## Heptylmalonic acid Hexanoylglycine Hippuric acid ## HU_011 4.299342 3.700495 4.281181 ## HU_014 4.587917 4.288872 4.274765 ## HU_015 4.245115 4.154405 4.030601 ## HU_017 4.101909 4.076289 4.437759 ## HU_018 4.270874 4.575928 4.105510 ## HU_019 4.417992 3.904992 4.297234 ## Hydroxybenzyl alcohol isomer Hydroxyphenyllactic acid ## HU_011 4.238096 3.959217 ## HU_014 3.602194 4.774698 ## HU_015 3.948782 3.457264 ## HU_017 3.368220 3.805230 ## HU_018 4.324214 4.567749 ## HU_019 4.043065 4.413443 ## Hydroxysuberic acid isomer 1 Hydroxysuberic acid isomer 2 ## HU_011 4.144705 4.295285 ## HU_014 3.914818 4.351692 ## HU_015 4.118942 4.050348 ## HU_017 4.016532 4.476785 ## HU_018 4.513977 4.474938 ## HU_019 4.522243 4.145574 ## Isovalerylalanine isomer Ketoleucine Kynurenic acid Malic acid ## HU_011 3.878689 3.522784 4.012747 3.534347 ## HU_014 4.167564 3.861882 4.068847 4.069774 ## HU_015 4.427536 3.839057 4.157414 3.696515 ## HU_017 4.377871 4.034678 4.392389 3.940602 ## HU_018 4.700258 4.078886 4.296854 4.231243 ## HU_019 4.067620 4.030812 4.323642 4.333562 ## Methoxysalicylic acid isomer ## HU_011 4.060952 ## HU_014 4.112547 ## HU_015 4.288847 ## HU_017 4.458437 ## HU_018 4.189123 ## HU_019 4.562835 ## Methyl (hydroxymethyl)pyrrolidine-carboxylate/Methyl (hydroxy)piperidine-carboxylate ## HU_011 3.899313 ## HU_014 4.233935 ## HU_015 4.520556 ## HU_017 4.355592 ## HU_018 4.407202 ## HU_019 4.232537 ## Methylinosine Mevalonic acid isomer 1 Monoethyl phthalate ## HU_011 3.979667 3.329769 4.186150 ## HU_014 4.191845 4.018856 3.347641 ## HU_015 4.362143 1.551281 3.824039 ## HU_017 4.272384 2.800934 3.091728 ## HU_018 4.487805 4.112110 3.655938 ## HU_019 4.378914 4.144182 4.240828 ## N-Acetyl-aspartic acid N-Acetylisoleucine N-Acetylleucine ## HU_011 4.117673 4.093393 3.411936 ## HU_014 4.428008 4.306259 4.478246 ## HU_015 4.205715 4.268660 4.266854 ## HU_017 4.385727 4.017203 4.027337 ## HU_018 4.253549 4.114619 3.237244 ## HU_019 4.363792 4.483260 4.370739 ## N-Acetyltryptophan N-Acetyltryptophan isomer 3 ## HU_011 3.792115 4.559495 ## HU_014 4.484242 4.038887 ## HU_015 4.254061 4.333962 ## HU_017 3.645018 4.621739 ## HU_018 4.193701 3.276002 ## HU_019 4.221705 4.174604 ## N2-Acetylaminoadipic acid N4-Acetylcytidine Nicotinuric acid isomer ## HU_011 3.631931 4.361610 3.848278 ## HU_014 4.493698 4.518477 4.441710 ## HU_015 3.904043 3.885826 4.240330 ## HU_017 3.997636 4.496160 4.343148 ## HU_018 4.330822 4.685971 4.044958 ## HU_019 4.210520 4.468025 4.452897 ## Ortho-Hydroxyphenylacetic acid Oxoglutaric acid p-Anisic acid ## HU_011 3.870825 2.997953 3.841620 ## HU_014 4.658541 3.993253 4.678148 ## HU_015 4.001141 3.482831 3.455275 ## HU_017 4.296011 3.947712 2.890224 ## HU_018 4.679458 3.955677 3.247603 ## HU_019 4.295495 4.195985 3.952277 ## p-Hydroxyhippuric acid p-Hydroxymandelic acid ## HU_011 4.198435 4.140949 ## HU_014 4.621760 3.818508 ## HU_015 3.835598 4.221860 ## HU_017 4.166668 4.421014 ## HU_018 4.592458 4.703186 ## HU_019 4.114812 4.096616 ## p-Hydroxyphenylacetic acid Pantothenic acid Pentose ## HU_011 4.057362 4.367247 4.119872 ## HU_014 3.867961 4.483832 4.219938 ## HU_015 4.198771 4.281965 4.354551 ## HU_017 4.138231 4.201390 4.294260 ## HU_018 4.348636 4.367093 4.465690 ## HU_019 4.181577 4.121433 4.250880 ## Phe-Tyr-Asp (and isomers) Porphobilinogen Pyridoxic acid isomer 1 ## HU_011 4.379156 3.873927 4.264819 ## HU_014 4.227932 4.181048 4.103788 ## HU_015 4.004176 4.136767 3.887147 ## HU_017 4.214129 4.162675 3.856186 ## HU_018 4.154741 4.461157 4.602857 ## HU_019 4.340768 4.170573 4.069686 ## Pyridylacetylglycine Pyrocatechol sulfate Pyroglutamic acid ## HU_011 4.042992 4.452942 4.013843 ## HU_014 4.210327 4.281094 4.188313 ## HU_015 4.099646 4.239741 4.202476 ## HU_017 4.309022 4.186333 4.209444 ## HU_018 4.386013 4.060466 4.246487 ## HU_019 4.398879 4.282089 4.184347 ## Pyrroledicarboxylic acid Pyruvic acid Quinic acid Salicylic acid ## HU_011 3.854579 3.229445 4.128023 3.925518 ## HU_014 4.059364 3.843606 4.168761 4.035196 ## HU_015 4.426634 3.555714 4.295171 4.588327 ## HU_017 3.763358 3.766176 4.533188 3.847885 ## HU_018 3.828249 3.985018 3.685546 3.695891 ## HU_019 4.317047 3.911799 4.459420 4.100363 ## Sebacic acid Suberic acid Sulfosalicylic acid isomer Taurine ## HU_011 4.298555 4.283358 4.724543 4.294956 ## HU_014 4.316859 4.521646 3.968791 5.143374 ## HU_015 4.387094 4.159625 3.946592 4.525365 ## HU_017 4.026013 4.125570 3.560990 4.821052 ## HU_018 4.516985 4.452634 4.320034 4.544508 ## HU_019 4.547073 4.535423 4.480640 3.999298 ## Testosterone glucuronide Tetrahydrohippuric acid ## HU_011 4.292437 3.409692 ## HU_014 3.467556 4.766827 ## HU_015 4.325043 3.407598 ## HU_017 4.306862 4.522244 ## HU_018 4.589208 4.296404 ## HU_019 4.010066 3.764092 ## Threo-3-Phenylserine Threonic acid/Erythronic acid Tryptophan ## HU_011 4.274910 4.313963 4.006518 ## HU_014 4.153934 4.473729 4.421590 ## HU_015 3.457296 4.124348 4.438306 ## HU_017 3.927525 4.558518 4.542105 ## HU_018 4.246966 4.446222 4.217120 ## HU_019 4.269736 4.367592 4.558531 ## Valerylglycine isomer 1 Valerylglycine isomer 2 Xanthosine ## HU_011 4.016261 3.889079 4.075880 ## HU_014 3.881005 4.181766 4.195762 ## HU_015 4.187176 4.254695 4.124493 ## HU_017 4.147544 4.290660 4.250258 ## HU_018 4.104498 4.138196 4.361709 ## HU_019 4.065452 4.300930 4.199196 sampleMetadata ## age bmi gender ## HU_011 29.0 19.75 M ## HU_014 59.0 22.64 F ## HU_015 42.0 22.72 M ## HU_017 41.0 23.03 M ## HU_018 34.0 20.96 M ## HU_019 35.0 23.41 M ## HU_020 59.0 17.10 M ## HU_021 34.0 23.36 M ## HU_022 51.0 28.23 F ## HU_023 51.0 29.55 M ## HU_024 57.0 29.86 M ## HU_025 53.0 21.60 M ## HU_026 34.0 23.46 F ## HU_027 37.0 24.82 M ## HU_028 41.0 23.92 F ## HU_029 37.0 27.78 M ## HU_030 49.0 25.88 M ## HU_031 25.0 20.76 M ## HU_032 38.0 24.09 F ## HU_033 44.0 18.36 F ## HU_034 52.0 23.37 M ## HU_035 37.0 20.70 F ## HU_036 47.0 29.51 M ## HU_037 35.0 25.62 M ## HU_038 52.0 22.72 M ## HU_039 45.0 24.90 M ## HU_040 24.0 26.54 M ## HU_041 28.0 23.67 M ## HU_042 36.0 19.75 M ## HU_043 42.0 29.04 M ## HU_044 57.0 25.46 F ## HU_045 46.0 20.81 F ## HU_046 35.0 24.84 M ## HU_047 43.0 25.00 F ## HU_048 39.0 19.49 F ## HU_049 50.0 27.85 M ## HU_050 30.0 24.21 M ## HU_051 24.0 23.23 F ## HU_052 51.0 20.06 F ## HU_053 49.0 25.88 M ## HU_054 29.0 20.76 M ## HU_055 58.0 24.89 F ## HU_056 41.0 21.15 M ## HU_057 57.0 27.16 M ## HU_058 45.0 26.70 M ## HU_060 55.0 28.72 F ## HU_061 44.0 25.35 F ## HU_062 34.0 22.22 M ## HU_063 35.0 21.01 F ## HU_064 32.0 21.94 F ## HU_065 54.0 21.87 M ## HU_066 25.0 22.53 F ## HU_067 40.0 19.31 F ## HU_068 37.0 27.22 F ## HU_069 39.0 24.38 M ## HU_070 58.0 18.71 M ## HU_072 47.0 27.13 M ## HU_073 35.0 25.38 M ## HU_074 42.0 20.94 F ## HU_075 38.0 21.05 M ## HU_076 47.0 26.70 M ## HU_077 27.0 21.15 M ## HU_078 46.0 25.18 M ## HU_079 47.0 23.55 M ## HU_080 21.0 19.72 F ## HU_081 25.0 17.84 F ## HU_082 49.0 23.15 M ## HU_083 50.0 29.76 M ## HU_084 62.0 23.80 F ## HU_085 23.0 22.86 M ## HU_086 33.0 23.51 M ## HU_087 38.0 23.80 F ## HU_088 50.0 21.78 F ## HU_089 31.0 23.70 M ## HU_090 46.0 19.79 M ## HU_091 61.0 26.12 M ## HU_092 40.0 21.83 M ## HU_093 53.0 21.71 M ## HU_094 32.0 23.29 M ## HU_095 27.0 27.33 M ## HU_097 50.0 26.78 M ## HU_098 46.0 20.45 M ## HU_099 23.0 21.30 M ## HU_100 47.0 21.22 F ## HU_101 39.0 23.70 M ## HU_102 59.0 24.03 F ## HU_103 49.0 26.79 M ## HU_105 47.0 22.96 M ## HU_106 42.0 27.34 M ## HU_107 46.0 24.22 M ## HU_108 25.0 23.81 M ## HU_109 32.0 22.68 M ## HU_110 50.0 20.90 F ## HU_112 55.0 25.36 M ## HU_113 44.0 23.05 M ## HU_114 58.0 29.38 M ## HU_115 46.0 27.24 F ## HU_116 28.0 20.96 F ## HU_117 24.0 22.86 M ## HU_118 30.0 21.64 F ## HU_119 50.0 24.44 F ## HU_120 32.0 23.88 F ## HU_121 26.0 20.57 M ## HU_122 48.0 23.03 M ## HU_123 49.0 24.39 M ## HU_124 34.0 22.22 M ## HU_125 58.0 25.47 M ## HU_126 45.0 24.70 M ## HU_127 45.0 25.62 M ## HU_129 47.0 29.32 M ## HU_130 33.0 26.06 M ## HU_131 42.0 23.12 M ## HU_132 38.0 26.67 F ## HU_133 53.0 25.43 M ## HU_134 48.0 22.89 M ## HU_135 31.0 24.93 M ## HU_136 52.0 20.81 F ## HU_137 28.0 22.22 M ## HU_138 42.0 21.88 M ## HU_139 47.0 23.03 M ## HU_140 49.0 26.59 M ## HU_142 25.0 20.98 M ## HU_143 52.0 23.15 F ## HU_144 38.0 29.54 M ## HU_145 27.0 29.09 M ## HU_146 42.0 24.21 M ## HU_147 60.0 31.74 M ## HU_148 55.0 30.48 F ## HU_149 35.0 19.49 F ## HU_150 49.0 27.24 F ## HU_152 26.0 17.58 F ## HU_154 35.0 27.71 F ## HU_155 48.0 20.45 F ## HU_156 36.0 16.85 F ## HU_157 43.0 21.95 F ## HU_158 50.0 25.48 F ## HU_159 37.0 21.72 F ## HU_160 31.0 24.17 F ## HU_162 50.0 29.03 F ## HU_163 49.0 23.15 F ## HU_164 45.0 25.63 F ## HU_166 40.0 19.72 F ## HU_167 55.0 20.57 F ## HU_168 37.0 20.76 F ## HU_169 53.0 19.14 F ## HU_170 50.0 24.61 F ## HU_171 29.0 21.37 F ## HU_172 55.0 21.36 F ## HU_173 55.0 20.28 F ## HU_174 42.0 31.64 F ## HU_175 35.0 21.26 F ## HU_177 59.0 28.58 F ## HU_179 33.0 26.57 F ## HU_180 53.0 23.74 F ## HU_181 49.0 22.46 F ## HU_182 43.0 23.74 F ## HU_183 46.0 19.13 F ## HU_184 37.0 25.33 F ## HU_185 42.0 21.09 F ## HU_186 44.0 22.10 F ## HU_187 21.0 19.95 F ## HU_188 22.0 24.22 F ## HU_189 39.0 19.43 F ## HU_190 28.0 25.93 M ## HU_191 36.0 26.12 M ## HU_192 31.0 24.22 M ## HU_193 35.0 21.78 F ## HU_194 40.0 28.04 F ## HU_195 26.0 18.42 F ## HU_196 27.0 21.10 F ## HU_197 26.0 20.72 M ## HU_198 35.0 22.98 M ## HU_199 33.0 21.04 M ## HU_200 46.0 23.89 M ## HU_201 34.0 20.24 M ## HU_202 42.0 28.06 M ## HU_203 25.0 19.95 F ## HU_204 31.0 29.06 M ## HU_205 33.0 28.37 M ## HU_206 45.0 22.15 F ## HU_207 33.0 19.47 F ## HU_208 27.0 18.61 F ## HU_209 17.5 21.48 F summary(sampleMetadata) ## age bmi gender ## Min. :17.5 Min. :16.85 M:100 ## 1st Qu.:33.0 1st Qu.:21.12 F: 83 ## Median :42.0 Median :23.36 ## Mean :40.9 Mean :23.61 ## 3rd Qu.:49.0 3rd Qu.:25.62 ## Max. :62.0 Max. :31.74 18.2 Principal Component Analysis (PCA) We perform a PCA on the dataMatrix matrix (samples as rows, variables as columns), with the opls method: sacurine.pca &lt;- opls(dataMatrix) ## PCA ## 183 samples x 109 variables ## standard scaling of predictors ## R2X(cum) pre ort ## Total 0.501 8 0 genderFc &lt;- sampleMetadata[, &quot;gender&quot;] plot(sacurine.pca, typeVc = &quot;x-score&quot;, parAsColFcVn = genderFc, parEllipsesL = TRUE) 18.3 Partial least-squares: PLS and PLS-DA For PLS (and OPLS), the Y response(s) must be provided to the opls method. Y can be either a numeric vector (respectively matrix) for single (respectively multiple) (O)PLS regression, or a character factor for (O)PLS-DA classification as in the following example with the gender qualitative response: sacurine.plsda &lt;- opls(dataMatrix, genderFc) ## PLS-DA ## 183 samples x 109 variables and 1 response ## standard scaling of predictors and response(s) ## R2X(cum) R2Y(cum) Q2(cum) RMSEE pre ort pR2Y pQ2 ## Total 0.275 0.73 0.584 0.262 3 0 0.05 0.05 genderFc ## [1] M F M M M M M M F M M M F M F M M M F F M F M M M M M M M M F F M F F ## [36] M M F F M M F M M M F F M F F M F F F M M M M F M M M M M F F M M F M ## [71] M F F M M M M M M M M M M F M F M M M M M M F M M M F F M F F F M M M ## [106] M M M M M M M F M M M F M M M M M F M M M M F F F F F F F F F F F F F ## [141] F F F F F F F F F F F F F F F F F F F F F F F M M M F F F F M M M M M ## [176] M F M M F F F F ## Levels: M F head(dataMatrix) ## (2-methoxyethoxy)propanoic acid isomer (gamma)Glu-Leu/Ile ## HU_011 3.019766 3.888479 ## HU_014 3.814339 4.277149 ## HU_015 3.519691 4.195649 ## HU_017 2.562183 4.323760 ## HU_018 3.781922 4.629329 ## HU_019 4.161074 4.412266 ## 1-Methyluric acid 1-Methylxanthine 1,3-Dimethyluric acid ## HU_011 3.869006 3.717259 3.535461 ## HU_014 3.837704 3.776851 3.932581 ## HU_015 4.102254 4.291665 3.955376 ## HU_017 4.538520 4.432216 4.228491 ## HU_018 4.178829 4.117360 4.005545 ## HU_019 4.516805 4.562052 4.320582 ## 1,7-Dimethyluric acid 2-acetamido-4-methylphenyl acetate ## HU_011 3.325199 4.204754 ## HU_014 4.025125 5.181858 ## HU_015 3.972904 3.885680 ## HU_017 4.109927 4.237915 ## HU_018 4.024092 1.852994 ## HU_019 4.326856 4.080681 ## 2-Aminoadipic acid 2-Hydroxybenzyl alcohol 2-Isopropylmalic acid ## HU_011 4.080204 4.560049 3.466916 ## HU_014 4.359246 3.158212 3.942746 ## HU_015 4.249111 4.290525 3.539600 ## HU_017 4.231404 3.644976 3.152084 ## HU_018 4.323679 4.095923 4.490116 ## HU_019 4.244485 4.428005 4.156567 ## 2-Methylhippuric acid 2,2-Dimethylglutaric acid ## HU_011 4.297716 3.799720 ## HU_014 3.833793 4.192342 ## HU_015 4.199262 4.146924 ## HU_017 3.865260 4.233270 ## HU_018 4.271223 4.755177 ## HU_019 3.831930 4.333599 ## 3-Hydroxybenzyl alcohol 3-Hydroxyphenylacetic acid ## HU_011 3.502958 4.672721 ## HU_014 4.370053 4.490127 ## HU_015 3.990814 4.416155 ## HU_017 4.151260 3.960912 ## HU_018 4.373425 4.247532 ## HU_019 1.446237 4.164327 ## 3-Indole carboxylic acid glucuronide 3-Methyl-2-oxovaleric acid ## HU_011 3.548979 3.956110 ## HU_014 4.344955 4.062870 ## HU_015 4.174503 4.420565 ## HU_017 4.688053 4.146152 ## HU_018 3.276676 4.351114 ## HU_019 4.206905 4.341494 ## 3-Methylcrotonylglycine 3,3-Dimethylglutaric acid ## HU_011 4.204465 4.223994 ## HU_014 4.055144 4.486961 ## HU_015 4.148095 4.137063 ## HU_017 4.193130 4.200239 ## HU_018 4.225720 4.569052 ## HU_019 4.127074 4.195226 ## 3,4-Dihydroxybenzeneacetic acid ## HU_011 3.400454 ## HU_014 4.366695 ## HU_015 3.965742 ## HU_017 4.121298 ## HU_018 4.373747 ## HU_019 2.320550 ## 3,5-dihydroxybenzoic acid/3,4-dihydroxybenzoic acid ## HU_011 4.494138 ## HU_014 4.118021 ## HU_015 4.284274 ## HU_017 4.118248 ## HU_018 4.077463 ## HU_019 4.107163 ## 3,7-Dimethyluric acid 4-Acetamidobutanoic acid isomer 2 ## HU_011 4.233820 4.046984 ## HU_014 3.596651 4.218431 ## HU_015 3.954022 3.995719 ## HU_017 3.995039 4.006450 ## HU_018 3.908515 4.564357 ## HU_019 4.720603 4.193068 ## 4-Acetamidobutanoic acid isomer 3 4-Hydroxybenzoic acid ## HU_011 3.964380 4.581811 ## HU_014 4.087865 4.675483 ## HU_015 4.031485 4.248248 ## HU_017 3.884681 4.171788 ## HU_018 4.347509 4.660293 ## HU_019 4.040541 4.335561 ## 4-Methylhippuric acid/3-Methylhippuric acid ## HU_011 3.242186 ## HU_014 3.838007 ## HU_015 4.723900 ## HU_017 3.617350 ## HU_018 4.285848 ## HU_019 3.430342 ## 5-Hydroxyindoleacetic acid 5-Sulfosalicylic acid ## HU_011 4.307545 4.023477 ## HU_014 4.402027 4.083692 ## HU_015 3.975413 4.232119 ## HU_017 4.168655 3.088972 ## HU_018 4.502182 4.142686 ## HU_019 4.281092 3.950241 ## 6-(2-hydroxyethoxy)-6-oxohexanoic acid ## HU_011 3.758640 ## HU_014 4.329163 ## HU_015 3.994170 ## HU_017 4.436174 ## HU_018 4.442814 ## HU_019 4.260599 ## 6-(carboxymethoxy)-hexanoic acid 9-Methylxanthine ## HU_011 3.445392 4.403909 ## HU_014 3.999589 4.211293 ## HU_015 4.039267 4.073960 ## HU_017 4.084428 4.257367 ## HU_018 4.527800 3.662754 ## HU_019 4.114818 4.262501 ## Acetaminophen glucuronide Acetylphenylalanine ## HU_011 1.64620136 4.169514 ## HU_014 0.09467123 4.515993 ## HU_015 -0.15947672 4.083460 ## HU_017 0.32143853 3.767910 ## HU_018 1.76127463 4.187942 ## HU_019 4.62568088 4.292496 ## alpha-N-Phenylacetyl-glutamine Aminosalicyluric acid ## HU_011 4.406638 4.125306 ## HU_014 4.362682 3.942512 ## HU_015 4.101540 4.004895 ## HU_017 4.173137 4.277246 ## HU_018 4.332330 4.307816 ## HU_019 4.366653 3.908610 ## Asp-Leu/Ile isomer 1 Asp-Leu/Ile isomer 2 Aspartic acid ## HU_011 3.565669 3.706871 4.262679 ## HU_014 3.852859 3.624547 4.278906 ## HU_015 3.879881 3.965623 4.225658 ## HU_017 3.564683 4.000451 4.476138 ## HU_018 4.710114 4.414012 4.460986 ## HU_019 4.551170 4.417869 4.545151 ## Azelaic acid Benzoic acid isomer Chenodeoxycholic acid isomer ## HU_011 4.419660 3.867245 3.507941 ## HU_014 4.331720 4.830236 3.925771 ## HU_015 4.105070 3.371990 4.765679 ## HU_017 4.017999 3.724525 4.058410 ## HU_018 4.320763 4.593359 4.379709 ## HU_019 4.641622 4.475130 4.120224 ## Cinnamoylglycine Citric acid Dehydroepiandrosterone 3-glucuronide ## HU_011 3.981493 4.077505 4.276799 ## HU_014 3.381453 4.418117 3.781079 ## HU_015 3.773393 4.179830 4.039523 ## HU_017 4.213982 4.218916 3.960037 ## HU_018 2.636678 4.294479 4.178258 ## HU_019 4.071694 4.386380 4.018968 ## Dehydroepiandrosterone sulfate Deoxyhexose Dimethylguanosine ## HU_011 4.462774 3.760569 4.052598 ## HU_014 3.806104 3.809186 4.269907 ## HU_015 3.193502 4.226145 4.197532 ## HU_017 4.165680 3.997357 4.350023 ## HU_018 4.363253 4.084736 4.408429 ## HU_019 3.986997 4.296965 4.310144 ## FMNH2 Fumaric acid Gentisic acid Glu-Val ## HU_011 3.565083 3.567561 4.300974 3.706666 ## HU_014 4.208395 3.840097 4.584677 4.310927 ## HU_015 4.034409 4.384064 4.764176 4.289509 ## HU_017 4.233037 3.416630 4.062663 4.376818 ## HU_018 4.597364 4.091964 4.431808 4.721889 ## HU_019 4.199745 4.012107 4.238883 4.392128 ## Gluconic acid and/or isomers Glucuronic acid and/or isomers ## HU_011 4.288424 4.271366 ## HU_014 4.586464 4.701159 ## HU_015 4.096407 4.123025 ## HU_017 4.743170 4.593438 ## HU_018 4.614798 4.461186 ## HU_019 4.334139 4.461209 ## Glyceric acid Glycocholic acid isomer 2 Glycocholic acid isomer 3 ## HU_011 3.928441 3.536033 3.467331 ## HU_014 4.286770 4.157624 4.170019 ## HU_015 4.273123 4.298947 4.045842 ## HU_017 4.606753 2.519658 2.687939 ## HU_018 4.641004 4.743202 4.763984 ## HU_019 4.429628 3.395705 3.371074 ## Heptylmalonic acid Hexanoylglycine Hippuric acid ## HU_011 4.299342 3.700495 4.281181 ## HU_014 4.587917 4.288872 4.274765 ## HU_015 4.245115 4.154405 4.030601 ## HU_017 4.101909 4.076289 4.437759 ## HU_018 4.270874 4.575928 4.105510 ## HU_019 4.417992 3.904992 4.297234 ## Hydroxybenzyl alcohol isomer Hydroxyphenyllactic acid ## HU_011 4.238096 3.959217 ## HU_014 3.602194 4.774698 ## HU_015 3.948782 3.457264 ## HU_017 3.368220 3.805230 ## HU_018 4.324214 4.567749 ## HU_019 4.043065 4.413443 ## Hydroxysuberic acid isomer 1 Hydroxysuberic acid isomer 2 ## HU_011 4.144705 4.295285 ## HU_014 3.914818 4.351692 ## HU_015 4.118942 4.050348 ## HU_017 4.016532 4.476785 ## HU_018 4.513977 4.474938 ## HU_019 4.522243 4.145574 ## Isovalerylalanine isomer Ketoleucine Kynurenic acid Malic acid ## HU_011 3.878689 3.522784 4.012747 3.534347 ## HU_014 4.167564 3.861882 4.068847 4.069774 ## HU_015 4.427536 3.839057 4.157414 3.696515 ## HU_017 4.377871 4.034678 4.392389 3.940602 ## HU_018 4.700258 4.078886 4.296854 4.231243 ## HU_019 4.067620 4.030812 4.323642 4.333562 ## Methoxysalicylic acid isomer ## HU_011 4.060952 ## HU_014 4.112547 ## HU_015 4.288847 ## HU_017 4.458437 ## HU_018 4.189123 ## HU_019 4.562835 ## Methyl (hydroxymethyl)pyrrolidine-carboxylate/Methyl (hydroxy)piperidine-carboxylate ## HU_011 3.899313 ## HU_014 4.233935 ## HU_015 4.520556 ## HU_017 4.355592 ## HU_018 4.407202 ## HU_019 4.232537 ## Methylinosine Mevalonic acid isomer 1 Monoethyl phthalate ## HU_011 3.979667 3.329769 4.186150 ## HU_014 4.191845 4.018856 3.347641 ## HU_015 4.362143 1.551281 3.824039 ## HU_017 4.272384 2.800934 3.091728 ## HU_018 4.487805 4.112110 3.655938 ## HU_019 4.378914 4.144182 4.240828 ## N-Acetyl-aspartic acid N-Acetylisoleucine N-Acetylleucine ## HU_011 4.117673 4.093393 3.411936 ## HU_014 4.428008 4.306259 4.478246 ## HU_015 4.205715 4.268660 4.266854 ## HU_017 4.385727 4.017203 4.027337 ## HU_018 4.253549 4.114619 3.237244 ## HU_019 4.363792 4.483260 4.370739 ## N-Acetyltryptophan N-Acetyltryptophan isomer 3 ## HU_011 3.792115 4.559495 ## HU_014 4.484242 4.038887 ## HU_015 4.254061 4.333962 ## HU_017 3.645018 4.621739 ## HU_018 4.193701 3.276002 ## HU_019 4.221705 4.174604 ## N2-Acetylaminoadipic acid N4-Acetylcytidine Nicotinuric acid isomer ## HU_011 3.631931 4.361610 3.848278 ## HU_014 4.493698 4.518477 4.441710 ## HU_015 3.904043 3.885826 4.240330 ## HU_017 3.997636 4.496160 4.343148 ## HU_018 4.330822 4.685971 4.044958 ## HU_019 4.210520 4.468025 4.452897 ## Ortho-Hydroxyphenylacetic acid Oxoglutaric acid p-Anisic acid ## HU_011 3.870825 2.997953 3.841620 ## HU_014 4.658541 3.993253 4.678148 ## HU_015 4.001141 3.482831 3.455275 ## HU_017 4.296011 3.947712 2.890224 ## HU_018 4.679458 3.955677 3.247603 ## HU_019 4.295495 4.195985 3.952277 ## p-Hydroxyhippuric acid p-Hydroxymandelic acid ## HU_011 4.198435 4.140949 ## HU_014 4.621760 3.818508 ## HU_015 3.835598 4.221860 ## HU_017 4.166668 4.421014 ## HU_018 4.592458 4.703186 ## HU_019 4.114812 4.096616 ## p-Hydroxyphenylacetic acid Pantothenic acid Pentose ## HU_011 4.057362 4.367247 4.119872 ## HU_014 3.867961 4.483832 4.219938 ## HU_015 4.198771 4.281965 4.354551 ## HU_017 4.138231 4.201390 4.294260 ## HU_018 4.348636 4.367093 4.465690 ## HU_019 4.181577 4.121433 4.250880 ## Phe-Tyr-Asp (and isomers) Porphobilinogen Pyridoxic acid isomer 1 ## HU_011 4.379156 3.873927 4.264819 ## HU_014 4.227932 4.181048 4.103788 ## HU_015 4.004176 4.136767 3.887147 ## HU_017 4.214129 4.162675 3.856186 ## HU_018 4.154741 4.461157 4.602857 ## HU_019 4.340768 4.170573 4.069686 ## Pyridylacetylglycine Pyrocatechol sulfate Pyroglutamic acid ## HU_011 4.042992 4.452942 4.013843 ## HU_014 4.210327 4.281094 4.188313 ## HU_015 4.099646 4.239741 4.202476 ## HU_017 4.309022 4.186333 4.209444 ## HU_018 4.386013 4.060466 4.246487 ## HU_019 4.398879 4.282089 4.184347 ## Pyrroledicarboxylic acid Pyruvic acid Quinic acid Salicylic acid ## HU_011 3.854579 3.229445 4.128023 3.925518 ## HU_014 4.059364 3.843606 4.168761 4.035196 ## HU_015 4.426634 3.555714 4.295171 4.588327 ## HU_017 3.763358 3.766176 4.533188 3.847885 ## HU_018 3.828249 3.985018 3.685546 3.695891 ## HU_019 4.317047 3.911799 4.459420 4.100363 ## Sebacic acid Suberic acid Sulfosalicylic acid isomer Taurine ## HU_011 4.298555 4.283358 4.724543 4.294956 ## HU_014 4.316859 4.521646 3.968791 5.143374 ## HU_015 4.387094 4.159625 3.946592 4.525365 ## HU_017 4.026013 4.125570 3.560990 4.821052 ## HU_018 4.516985 4.452634 4.320034 4.544508 ## HU_019 4.547073 4.535423 4.480640 3.999298 ## Testosterone glucuronide Tetrahydrohippuric acid ## HU_011 4.292437 3.409692 ## HU_014 3.467556 4.766827 ## HU_015 4.325043 3.407598 ## HU_017 4.306862 4.522244 ## HU_018 4.589208 4.296404 ## HU_019 4.010066 3.764092 ## Threo-3-Phenylserine Threonic acid/Erythronic acid Tryptophan ## HU_011 4.274910 4.313963 4.006518 ## HU_014 4.153934 4.473729 4.421590 ## HU_015 3.457296 4.124348 4.438306 ## HU_017 3.927525 4.558518 4.542105 ## HU_018 4.246966 4.446222 4.217120 ## HU_019 4.269736 4.367592 4.558531 ## Valerylglycine isomer 1 Valerylglycine isomer 2 Xanthosine ## HU_011 4.016261 3.889079 4.075880 ## HU_014 3.881005 4.181766 4.195762 ## HU_015 4.187176 4.254695 4.124493 ## HU_017 4.147544 4.290660 4.250258 ## HU_018 4.104498 4.138196 4.361709 ## HU_019 4.065452 4.300930 4.199196 18.4 Reference https://bioconductor.org/packages/release/bioc/vignettes/ropls/inst/doc/ropls-vignette.html#4_hands-on "]
]
